/*

List of flags and their descriptions:

bypasssub: Ignores a target's substitute.
bite: Power is multiplied by 1.5 when used by a Pokemon with the Strong Jaw Ability.
bullet: Has no effect on Pokemon with the Bulletproof Ability.
charge: The user is unable to make a move between turns.
contact: Makes contact.
dance: When used by a Pokemon, other Pokemon with the Dancer Ability can attempt to execute the same move.
defrost: Thaws the user if executed successfully while the user is frozen.
distance: Can target a Pokemon positioned anywhere in a Triple Battle.
gravity: Prevented from being executed or selected during Gravity's effect.
heal: Prevented from being executed or selected during Heal Block's effect.
mirror: Can be copied by Mirror Move.
allyanim: Animates when used against allies
nonsky: Prevented from being executed or selected in a Sky Battle.
powder: Has no effect on Grass-type Pokemon, Pokemon with the Overcoat Ability, and Pokemon holding Safety Goggles.
protect: Blocked by Detect, Protect, Spiky Shield, and if not a Status move, King's Shield.
pulse: Power is multiplied by 1.5 when used by a Pokemon with the Mega Launcher Ability.
punch: Power is multiplied by 1.2 when used by a Pokemon with the Iron Fist Ability.
recharge: If this move is successful, the user must recharge on the following turn and cannot make a move.
reflectable: Bounced back to the original user by Magic Coat or the Magic Bounce Ability.
slicing: Power is multiplied by 1.5 when used by a Pokemon with the Ability Sharpness.
snatch: Can be stolen from the original user and instead used by another Pokemon using Snatch.
sound: Has no effect on Pokemon with the Soundproof Ability.
wind: Activates the Wind Power and Wind Rider Abilities.

*/

import {Pokemon} from "../sim";

export const Moves: {[moveid: string]: MoveData} = {
	"10000000voltthunderbolt": {
		num: 719,
		accuracy: true,
		basePower: 195,
		category: "Special",
		isNonstandard: "Past",
		name: "10,000,000 Volt Thunderbolt",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "pikashuniumz",
		critRatio: 3,
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	absorb: {
		num: 71,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Absorb",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	accelerock: {
		num: 709,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Accelerock",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	acid: {
		num: 51,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Acid",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Poison",
		contestType: "Clever",
	},
	acidarmor: {
		num: 151,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Armor",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	aciddownpour: {
		num: 628,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Acid Downpour",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "poisoniumz",
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Cool",
	},
	acidspray: {
		num: 491,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Acid Spray",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Poison",
		contestType: "Beautiful",
	},
	acrobatics: {
		num: 512,
		accuracy: 100,
		basePower: 55,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.item) {
				this.debug("BP doubled for no item");
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "Acrobatics",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	acupressure: {
		num: 367,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acupressure",
		pp: 30,
		priority: 0,
		flags: {},
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 2;
				this.boost(boost);
			} else {
				return false;
			}
		},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Normal",
		zMove: {effect: 'crit2'},
		contestType: "Tough",
	},
	aerialace: {
		num: 332,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Aerial Ace",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1, slicing: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	aeroblast: {
		num: 177,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Aeroblast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		critRatio: 2,
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	afteryou: {
		num: 495,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "After You",
		pp: 15,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		onHit(target) {
			if (target.side.active.length < 2) return false; // fails in singles
			const action = this.queue.willMove(target);
			if (action) {
				this.queue.prioritizeAction(action);
				this.add('-activate', target, 'move: After You');
			} else {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Cute",
	},
	agility: {
		num: 97,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Agility",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	aircutter: {
		num: 314,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Air Cutter",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1, wind: 1},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Flying",
		contestType: "Cool",
	},
	airslash: {
		num: 403,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Air Slash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1, slicing: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	alloutpummeling: {
		num: 624,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "All-Out Pummeling",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "fightiniumz",
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	allyswitch: {
		num: 502,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ally Switch",
		pp: 15,
		priority: 2,
		flags: {},
		stallingMove: true,
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onTryHit(source) {
			if (source.side.active.length === 1) return false;
			if (source.side.active.length === 3 && source.position === 1) return false;
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
			const newPosition = (pokemon.position === 0 ? pokemon.side.active.length - 1 : 0);
			if (!pokemon.side.active[newPosition]) return false;
			if (pokemon.side.active[newPosition].fainted) return false;
			this.swapPosition(pokemon, newPosition, '[from] move: Ally Switch');
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	amnesia: {
		num: 133,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Amnesia",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spd: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	anchorshot: {
		num: 677,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Past",
		name: "Anchor Shot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Tough",
	},
	ancientpower: {
		num: 246,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Ancient Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	appleacid: {
		num: 787,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Apple Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Grass",
	},
	aquacutter: {
		num: 895,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Aqua Cutter",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	aquajet: {
		num: 453,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Aqua Jet",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	aquaring: {
		num: 392,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aqua Ring",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'aquaring',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Aqua Ring');
			},
			onResidualOrder: 6,
			onResidual(pokemon) {
				this.heal(pokemon.baseMaxhp / 16);
			},
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
	},
	aquastep: {
		num: 872,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Aqua Step",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	aquatail: {
		num: 401,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Aqua Tail",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	armorcannon: {
		num: 890,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Armor Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
	},
	armthrust: {
		num: 292,
		accuracy: 100,
		basePower: 15,
		category: "Physical",
		name: "Arm Thrust",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	aromatherapy: {
		num: 312,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Aromatherapy",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, distance: 1},
		onHit(target, source, move) {
			this.add('-activate', source, 'move: Aromatherapy');
			let success = false;
			const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];
			for (const ally of allies) {
				if (ally !== source && ((ally.hasAbility('sapsipper')) ||
						(ally.volatiles['substitute'] && !move.infiltrates))) {
					continue;
				}
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		target: "allyTeam",
		type: "Grass",
		zMove: {effect: 'heal'},
		contestType: "Clever",
	},
	aromaticmist: {
		num: 597,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aromatic Mist",
		pp: 20,
		priority: 0,
		flags: {bypasssub: 1},
		boosts: {
			spd: 1,
		},
		secondary: null,
		target: "adjacentAlly",
		type: "Fairy",
		zMove: {boost: {spd: 2}},
		contestType: "Beautiful",
	},
	assist: {
		num: 274,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Assist",
		pp: 20,
		priority: 0,
		flags: {},
		onHit(target) {
			const noAssist = [
				'assist', 'banefulbunker', 'beakblast', 'belch', 'bestow', 'blazingtorque', 'bounce', 'celebrate', 'chatter', 'circlethrow', 'combattorque', 'copycat', 'counter', 'covet', 'destinybond', 'detect', 'dig', 'dive', 'dragontail', 'endure', 'feint', 'fly', 'focuspunch', 'followme', 'helpinghand', 'holdhands', 'kingsshield', 'magicaltorque', 'matblock', 'mefirst', 'metronome', 'mimic', 'mirrorcoat', 'mirrormove', 'naturepower', 'noxioustorque', 'phantomforce', 'protect', 'ragepowder', 'roar', 'shadowforce', 'shelltrap', 'sketch', 'skydrop', 'sleeptalk', 'snatch', 'spikyshield', 'spotlight', 'struggle', 'switcheroo', 'thief', 'transform', 'trick', 'whirlwind', 'wickedtorque',
			];

			const moves = [];
			for (const pokemon of target.side.pokemon) {
				if (pokemon === target) continue;
				for (const moveSlot of pokemon.moveSlots) {
					const moveid = moveSlot.id;
					if (noAssist.includes(moveid)) continue;
					const move = this.dex.moves.get(moveid);
					if (move.isZ || move.isMax) {
						continue;
					}
					moves.push(moveid);
				}
			}
			let randomMove = '';
			if (moves.length) randomMove = this.sample(moves);
			if (!randomMove) {
				return false;
			}
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cute",
	},
	assurance: {
		num: 372,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			if (target.hurtThisTurn) {
				this.debug('BP doubled on damaged target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "Assurance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	astonish: {
		num: 310,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Astonish",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ghost",
		contestType: "Cute",
	},
	astralbarrage: {
		num: 825,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Astral Barrage",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ghost",
	},
	attackorder: {
		num: 454,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Attack Order",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	attract: {
		num: 213,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Attract",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'attract',
		condition: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon, source, effect) {
				const isMale = (query: Pokemon) => query.gender === 'M';
				const isFemale = (query: Pokemon) => query.gender === 'F' || query.getAbility().id === 'boardpowerjp';
				const hasGender = (query: Pokemon) => isMale(query) || isFemale(query);
				if (!(source?.abilityState?.irresistable && hasGender(pokemon)) &&
					!(isMale(pokemon) && isFemale(source)) && !(isFemale(pokemon) && isMale(source))) {
					this.debug('incompatible gender');
					return false;
				}
				if (!this.runEvent('Attract', pokemon, source)) {
					this.debug('Attract event failed');
					return false;
				}

				if (effect.name === 'Cute Charm') {
					this.add('-start', pokemon, 'Attract', '[from] ability: Cute Charm', '[of] ' + source);
				} else if (effect.name === 'Destiny Knot') {
					this.add('-start', pokemon, 'Attract', '[from] item: Destiny Knot', '[of] ' + source);
				} else {
					this.add('-start', pokemon, 'Attract');
				}
			},
			onUpdate(pokemon) {
				if (this.effectState.source && !this.effectState.source.isActive && pokemon.volatiles['attract']) {
					this.debug('Removing Attract volatile on ' + pokemon);
					pokemon.removeVolatile('attract');
				}
			},
			onBeforeMovePriority: 2,
			onBeforeMove(pokemon, target, move) {
				this.add('-activate', pokemon, 'move: Attract', '[of] ' + this.effectState.source);
				if (this.randomChance(1, 2)) {
					this.add('cant', pokemon, 'Attract');
					return false;
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Attract', '[silent]');
			},
		},
		onTryImmunity(target, source) {
			return (target.gender === 'M' && source.gender === 'F') || (target.gender === 'F' && source.gender === 'M');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	aurasphere: {
		num: 396,
		accuracy: true,
		basePower: 80,
		category: "Special",
		name: "Aura Sphere",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Fighting",
		contestType: "Beautiful",
	},
	aurawheel: {
		num: 783,
		accuracy: 100,
		basePower: 110,
		category: "Physical",
		isNonstandard: "Past",
		name: "Aura Wheel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		onTry(source) {
			if (source.species.baseSpecies === 'Morpeko') {
				return;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Aura Wheel');
			this.hint("Only a Pokemon whose form is Morpeko or Morpeko-Hangry can use this move.");
			return null;
		},
		onModifyType(move, pokemon) {
			if (pokemon.species.name === 'Morpeko-Hangry') {
				move.type = 'Dark';
			} else {
				move.type = 'Electric';
			}
		},
		target: "normal",
		type: "Electric",
	},
	aurorabeam: {
		num: 62,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Aurora Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	auroraveil: {
		num: 694,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aurora Veil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'auroraveil',
		onTry() {
			return this.field.isWeather(['hail', 'snow']);
		},
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('lightclay') || source?.hasAbility('builder')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && this.effectState.target.hasAlly(target)) {
					if ((target.side.getSideCondition('reflect') && this.getCategory(move) === 'Physical') ||
							(target.side.getSideCondition('lightscreen') && this.getCategory(move) === 'Special')) {
						return;
					}
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Aurora Veil weaken');
						if (this.activePerHalf > 1) return this.chainModify([2732, 4096]);
						return this.chainModify(0.5);
					}
				}
			},
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Aurora Veil');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 10,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Aurora Veil');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Ice",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	autotomize: {
		num: 475,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Autotomize",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		onTryHit(pokemon) {
			const hasContrary = pokemon.hasAbility('contrary');
			if ((!hasContrary && pokemon.boosts.spe === 6) || (hasContrary && pokemon.boosts.spe === -6)) {
				return false;
			}
		},
		boosts: {
			spe: 2,
		},
		onHit(pokemon) {
			if (pokemon.weighthg > 1) {
				pokemon.weighthg = Math.max(1, pokemon.weighthg - 1000);
				this.add('-start', pokemon, 'Autotomize');
			}
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	avalanche: {
		num: 419,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			const damagedByTarget = pokemon.attackedBy.some(
				p => p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('BP doubled for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "Avalanche",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	axekick: {
		num: 853,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Axe Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fighting",
	},
	babydolleyes: {
		num: 608,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Baby-Doll Eyes",
		pp: 30,
		priority: 1,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	baddybad: {
		num: 737,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Baddy Bad",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		self: {
			sideCondition: 'reflect',
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	banefulbunker: {
		num: 661,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Baneful Bunker",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'banefulbunker',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					source.trySetStatus('psn', target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					source.trySetStatus('psn', target);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	barbbarrage: {
		num: 839,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Barb Barrage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		secondary: {
			chance: 50,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
	},
	barrage: {
		num: 140,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		isNonstandard: "Past",
		name: "Barrage",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	barrier: {
		num: 112,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Barrier",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	batonpass: {
		num: 226,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Baton Pass",
		pp: 40,
		priority: 0,
		flags: {},
		onHit(target) {
			if (!this.canSwitch(target.side)) {
				this.attrLastMove('[still]');
				this.add('-fail', target);
				return this.NOT_FAIL;
			}
		},
		self: {
			onHit(source) {
				source.skipBeforeSwitchOutEventFlag = true;
			},
		},
		selfSwitch: 'copyvolatile',
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	beakblast: {
		num: 690,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Beak Blast",
		pp: 15,
		priority: -3,
		flags: {bullet: 1, protect: 1},
		priorityChargeCallback(pokemon) {
			pokemon.addVolatile('beakblast');
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Beak Blast');
			},
			onHit(target, source, move) {
				if (this.checkMoveMakesContact(move, source, target)) {
					source.trySetStatus('brn', target);
				}
			},
		},
		// FIXME: onMoveAborted(pokemon) {pokemon.removeVolatile('beakblast')},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('beakblast');
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Tough",
	},
	beatup: {
		num: 251,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target, move) {
			const currentSpecies = move.allies!.shift()!.species;
			const bp = 5 + Math.floor(currentSpecies.baseStats.atk / 10);
			this.debug('BP for ' + currentSpecies.name + ' hit: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Beat Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onModifyMove(move, pokemon) {
			move.allies = pokemon.side.pokemon.filter(ally => ally === pokemon || !ally.fainted && !ally.status);
			move.multihit = move.allies.length;
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	behemothbash: {
		num: 782,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Behemoth Bash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	behemothblade: {
		num: 781,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Behemoth Blade",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	belch: {
		num: 562,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Belch",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onDisableMove(pokemon) {
			if (!pokemon.ateBerry) pokemon.disableMove('belch');
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	bellydrum: {
		num: 187,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Belly Drum",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			if (target.hp <= target.maxhp / 2 || target.boosts.atk >= 6 || target.maxhp === 1) { // Shedinja clause
				return false;
			}
			this.directDamage(target.maxhp / 2);
			this.boost({atk: 12}, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Cute",
	},
	bestow: {
		num: 516,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Bestow",
		pp: 15,
		priority: 0,
		flags: {mirror: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source, move) {
			if (target.item) {
				return false;
			}
			const myItem = source.takeItem();
			if (!myItem) return false;
			if (!this.singleEvent('TakeItem', myItem, source.itemState, target, source, move, myItem) || !target.setItem(myItem)) {
				source.item = myItem.id;
				return false;
			}
			this.add('-item', target, myItem.name, '[from] move: Bestow', '[of] ' + source);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 2}},
		contestType: "Cute",
	},
	bide: {
		num: 117,
		accuracy: true,
		basePower: 0,
		category: "Physical",
		isNonstandard: "Past",
		name: "Bide",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1},
		volatileStatus: 'bide',
		ignoreImmunity: true,
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['bide']) return true;
		},
		condition: {
			duration: 3,
			onLockMove: 'bide',
			onStart(pokemon) {
				this.effectState.totalDamage = 0;
				this.add('-start', pokemon, 'move: Bide');
			},
			onDamagePriority: -101,
			onDamage(damage, target, source, move) {
				if (!move || move.effectType !== 'Move' || !source) return;
				this.effectState.totalDamage += damage;
				this.effectState.lastDamageSource = source;
			},
			onBeforeMove(pokemon, target, move) {
				if (this.effectState.duration === 1) {
					this.add('-end', pokemon, 'move: Bide');
					target = this.effectState.lastDamageSource;
					if (!target || !this.effectState.totalDamage) {
						this.attrLastMove('[still]');
						this.add('-fail', pokemon);
						return false;
					}
					if (!target.isActive) {
						const possibleTarget = this.getRandomTarget(pokemon, this.dex.moves.get('pound'));
						if (!possibleTarget) {
							this.add('-miss', pokemon);
							return false;
						}
						target = possibleTarget;
					}
					const moveData: Partial<ActiveMove> = {
						id: 'bide' as ID,
						name: "Bide",
						accuracy: true,
						damage: this.effectState.totalDamage * 2,
						category: "Physical",
						priority: 1,
						flags: {contact: 1, protect: 1},
						effectType: 'Move',
						type: 'Normal',
					};
					this.actions.tryMoveHit(target, pokemon, moveData as ActiveMove);
					pokemon.removeVolatile('bide');
					return false;
				}
				this.add('-activate', pokemon, 'move: Bide');
			},
			onMoveAborted(pokemon) {
				pokemon.removeVolatile('bide');
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Bide', '[silent]');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Tough",
	},
	bind: {
		num: 20,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		name: "Bind",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	bite: {
		num: 44,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bite",
		pp: 25,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	bitterblade: {
		num: 891,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Bitter Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fire",
	},
	bittermalice: {
		num: 841,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Bitter Malice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Ghost",
	},
	blackholeeclipse: {
		num: 654,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Black Hole Eclipse",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "darkiniumz",
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	blastburn: {
		num: 307,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Blast Burn",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	blazekick: {
		num: 299,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Blaze Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	blazingtorque: {
		num: 896,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Blazing Torque",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
	},
	bleakwindstorm: {
		num: 846,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Bleakwind Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 30,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Flying",
	},
	blizzard: {
		num: 59,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Blizzard",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		onModifyMove(move) {
			if (this.field.isWeather(['hail', 'snow'])) move.accuracy = true;
		},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Beautiful",
	},
	block: {
		num: 335,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Block",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	bloomdoom: {
		num: 644,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Bloom Doom",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "grassiumz",
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	blueflare: {
		num: 551,
		accuracy: 85,
		basePower: 130,
		category: "Special",
		isNonstandard: "Past",
		name: "Blue Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	bodypress: {
		num: 776,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Body Press",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideOffensiveStat: 'def',
		secondary: null,
		target: "normal",
		type: "Fighting",
	},
	bodyslam: {
		num: 34,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Body Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	boltbeak: {
		num: 754,
		accuracy: 100,
		basePower: 85,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Bolt Beak damage boost');
				return move.basePower * 2;
			}
			this.debug('Bolt Beak NOT boosted');
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Bolt Beak",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
	},
	boltstrike: {
		num: 550,
		accuracy: 85,
		basePower: 130,
		category: "Physical",
		isNonstandard: "Past",
		name: "Bolt Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Beautiful",
	},
	boneclub: {
		num: 125,
		accuracy: 85,
		basePower: 65,
		category: "Physical",
		isNonstandard: "Past",
		name: "Bone Club",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	bonemerang: {
		num: 155,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		isNonstandard: "Past",
		name: "Bonemerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Ground",
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	bonerush: {
		num: 198,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Bone Rush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Ground",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	boomburst: {
		num: 586,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		name: "Boomburst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		contestType: "Tough",
	},
	bounce: {
		num: 340,
		accuracy: 85,
		basePower: 85,
		category: "Physical",
		name: "Bounce",
		pp: 5,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability(target, source, move) {
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onSourceBasePower(basePower, target, source, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "any",
		type: "Flying",
		contestType: "Cute",
	},
	bouncybubble: {
		num: 733,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Bouncy Bubble",
		pp: 20,
		priority: 0,
		flags: {protect: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	branchpoke: {
		num: 785,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Branch Poke",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	bravebird: {
		num: 413,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Brave Bird",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		recoil: [33, 100],
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	breakingswipe: {
		num: 784,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Breaking Swipe",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Dragon",
	},
	breakneckblitz: {
		num: 622,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Breakneck Blitz",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "normaliumz",
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	brickbreak: {
		num: 280,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Brick Break",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	brine: {
		num: 362,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Brine",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.hp * 2 <= target.maxhp) {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	brutalswing: {
		num: 693,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Brutal Swing",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Dark",
		contestType: "Tough",
	},
	bubble: {
		num: 145,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		isNonstandard: "Past",
		name: "Bubble",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Cute",
	},
	bubblebeam: {
		num: 61,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Bubble Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	bugbite: {
		num: 450,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bug Bite",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target, source) {
			const item = target.getItem();
			if (source.hp && item.isBerry && target.takeItem(source)) {
				this.add('-enditem', target, item.name, '[from] stealeat', '[move] Bug Bite', '[of] ' + source);
				if (this.singleEvent('Eat', item, null, source, null, null)) {
					this.runEvent('EatItem', source, null, null, item);
					if (item.id === 'leppaberry') target.staleness = 'external';
				}
				if (item.onEat) source.ateBerry = true;
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	bugbuzz: {
		num: 405,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Bug Buzz",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Bug",
		contestType: "Beautiful",
	},
	bulkup: {
		num: 339,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bulk Up",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Fighting",
		zMove: {boost: {atk: 1}},
		contestType: "Cool",
	},
	bulldoze: {
		num: 523,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bulldoze",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacent",
		type: "Ground",
		contestType: "Tough",
	},
	bulletpunch: {
		num: 418,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Bullet Punch",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Tough",
	},
	bulletseed: {
		num: 331,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Bullet Seed",
		pp: 30,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	burningjealousy: {
		num: 807,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Burning Jealousy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (target?.statsRaisedThisTurn) {
					target.trySetStatus('brn', source, move);
				}
			},
		},
		target: "allAdjacentFoes",
		type: "Fire",
		contestType: "Tough",
	},
	burnup: {
		num: 682,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		name: "Burn Up",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onTryMove(pokemon, target, move) {
			if (pokemon.hasType('Fire')) return;
			this.add('-fail', pokemon, 'move: Burn Up');
			this.attrLastMove('[still]');
			return null;
		},
		self: {
			onHit(pokemon) {
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Fire" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Burn Up');
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	buzzybuzz: {
		num: 734,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Buzzy Buzz",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	calmmind: {
		num: 347,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Calm Mind",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	camouflage: {
		num: 293,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Camouflage",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			let newType = 'Normal';
			if (this.field.isTerrain('electricterrain')) {
				newType = 'Electric';
			} else if (this.field.isTerrain('grassyterrain')) {
				newType = 'Grass';
			} else if (this.field.isTerrain('mistyterrain')) {
				newType = 'Fairy';
			} else if (this.field.isTerrain('psychicterrain')) {
				newType = 'Psychic';
			}

			if (target.getTypes().join() === newType || !target.setType(newType)) return false;
			this.add('-start', target, 'typechange', newType);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {evasion: 1}},
		contestType: "Clever",
	},
	captivate: {
		num: 445,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Captivate",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onTryImmunity(pokemon, source) {
			return (pokemon.gender === 'M' && source.gender === 'F') || (pokemon.gender === 'F' && source.gender === 'M');
		},
		boosts: {
			spa: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMove: {boost: {spd: 2}},
		contestType: "Cute",
	},
	catastropika: {
		num: 658,
		accuracy: true,
		basePower: 210,
		category: "Physical",
		isNonstandard: "Past",
		name: "Catastropika",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "pikaniumz",
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	ceaselessedge: {
		num: 845,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Ceaseless Edge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('spikes');
				}
			},
		},
		secondary: {}, // allows sheer force to trigger
		target: "normal",
		type: "Dark",
	},
	celebrate: {
		num: 606,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Celebrate",
		pp: 40,
		priority: 0,
		flags: {},
		onTryHit(target, source) {
			this.add('-activate', target, 'move: Celebrate');
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Cute",
	},
	charge: {
		num: 268,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Charge",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'charge',
		condition: {
			onStart(pokemon, source, effect) {
				if (effect && ['Electromorphosis', 'Wind Power'].includes(effect.name)) {
					this.add('-start', pokemon, 'Charge', this.activeMove!.name, '[from] ability: ' + effect.name);
				} else {
					this.add('-start', pokemon, 'Charge');
				}
			},
			onRestart(pokemon, source, effect) {
				if (effect && ['Electromorphosis', 'Wind Power'].includes(effect.name)) {
					this.add('-start', pokemon, 'Charge', this.activeMove!.name, '[from] ability: ' + effect.name);
				} else {
					this.add('-start', pokemon, 'Charge');
				}
			},
			onBasePowerPriority: 9,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric') {
					this.debug('charge boost');
					return this.chainModify(2);
				}
			},
			onMoveAborted(pokemon, target, move) {
				if (move.type === 'Electric' && move.id !== 'charge') {
					pokemon.removeVolatile('charge');
				}
			},
			onAfterMove(pokemon, target, move) {
				if (move.type === 'Electric' && move.id !== 'charge') {
					pokemon.removeVolatile('charge');
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Charge', '[silent]');
			},
		},
		boosts: {
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Electric",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	chargebeam: {
		num: 451,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Charge Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 70,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Electric",
		contestType: "Beautiful",
	},
	charm: {
		num: 204,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Charm",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		boosts: {
			atk: -2,
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	chatter: {
		num: 448,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Chatter",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, distance: 1, bypasssub: 1},
		noSketch: true,
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Flying",
		contestType: "Cute",
	},
	chillingwater: {
		num: 886,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Chilling Water",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	chillyreception: {
		num: 881,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Chilly Reception",
		pp: 10,
		priority: 0,
		flags: {},
		// TODO show prepare message before the "POKEMON used MOVE!" message
		// This happens even before sleep shows its "POKEMON is fast asleep." message
		weather: 'snow',
		selfSwitch: true,
		secondary: null,
		target: "all",
		type: "Ice",
	},
	chipaway: {
		num: 498,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		isNonstandard: "Past",
		name: "Chip Away",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreDefensive: true,
		ignoreEvasion: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	chloroblast: {
		num: 835,
		accuracy: 95,
		basePower: 150,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Chloroblast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		mindBlownRecoil: true,
		onAfterMove(pokemon, target, move) {
			if (move.mindBlownRecoil && !move.multihit) {
				const hpBeforeRecoil = pokemon.hp;
				this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get('Chloroblast'), true);
				if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {
					this.runEvent('EmergencyExit', pokemon, pokemon);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	circlethrow: {
		num: 509,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Circle Throw",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	clamp: {
		num: 128,
		accuracy: 85,
		basePower: 35,
		category: "Physical",
		isNonstandard: "Past",
		name: "Clamp",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	clangingscales: {
		num: 691,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		isNonstandard: "Past",
		name: "Clanging Scales",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		selfBoost: {
			boosts: {
				def: -1,
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		contestType: "Tough",
	},
	clangoroussoul: {
		num: 775,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Clangorous Soul",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, sound: 1, dance: 1},
		onTry(source) {
			if (source.hp <= (source.maxhp * 33 / 100) || source.maxhp === 1) return false;
		},
		onTryHit(pokemon, target, move) {
			if (!this.boost(move.boosts as SparseBoostsTable)) return null;
			delete move.boosts;
		},
		onHit(pokemon) {
			this.directDamage(pokemon.maxhp * 33 / 100);
		},
		boosts: {
			atk: 1,
			def: 1,
			spa: 1,
			spd: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Dragon",
	},
	clangoroussoulblaze: {
		num: 728,
		accuracy: true,
		basePower: 185,
		category: "Special",
		isNonstandard: "Past",
		name: "Clangorous Soulblaze",
		pp: 1,
		priority: 0,
		flags: {sound: 1, bypasssub: 1},
		selfBoost: {
			boosts: {
				atk: 1,
				def: 1,
				spa: 1,
				spd: 1,
				spe: 1,
			},
		},
		isZ: "kommoniumz",
		secondary: {
			// Sheer Force negates the selfBoost even though it is not secondary
		},
		target: "allAdjacentFoes",
		type: "Dragon",
		contestType: "Cool",
	},
	clearsmog: {
		num: 499,
		accuracy: true,
		basePower: 50,
		category: "Special",
		name: "Clear Smog",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			target.clearBoosts();
			this.add('-clearboost', target);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Beautiful",
	},
	closecombat: {
		num: 370,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Close Combat",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	coaching: {
		num: 811,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coaching",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		secondary: null,
		boosts: {
			atk: 1,
			def: 1,
		},
		target: "adjacentAlly",
		type: "Fighting",
	},
	coil: {
		num: 489,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			def: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	collisioncourse: {
		num: 878,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Collision Course",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			if (target.runEffectiveness(move) > 0) {
				// Placeholder
				this.debug(`collision course super effective buff`);
				return this.chainModify([5461, 4096]);
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	combattorque: {
		num: 899,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Combat Torque",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Fighting",
	},
	cometpunch: {
		num: 4,
		accuracy: 85,
		basePower: 18,
		category: "Physical",
		isNonstandard: "Past",
		name: "Comet Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		maxMove: {basePower: 100},
		contestType: "Tough",
	},
	comeuppance: {
		num: 894,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			const lastDamagedBy = pokemon.getLastDamagedBy(true);
			if (lastDamagedBy !== undefined) {
				return (lastDamagedBy.damage * 1.5) || 1;
			}
			return 0;
		},
		category: "Physical",
		name: "Comeuppance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			const lastDamagedBy = source.getLastDamagedBy(true);
			if (lastDamagedBy === undefined || !lastDamagedBy.thisTurn) return false;
		},
		onModifyTarget(targetRelayVar, source, target, move) {
			const lastDamagedBy = source.getLastDamagedBy(true);
			if (lastDamagedBy) {
				targetRelayVar.target = this.getAtSlot(lastDamagedBy.slot);
			}
		},
		secondary: null,
		target: "scripted",
		type: "Dark",
		contestType: "Cool",
	},
	confide: {
		num: 590,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Confide",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		boosts: {
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	confuseray: {
		num: 109,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Confuse Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	confusion: {
		num: 93,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Confusion",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	constrict: {
		num: 132,
		accuracy: 100,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Constrict",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	continentalcrush: {
		num: 632,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Continental Crush",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "rockiumz",
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	conversion: {
		num: 160,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Conversion",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			const type = this.dex.moves.get(target.moveSlots[0].id).type;
			if (target.hasType(type) || !target.setType(type)) return false;
			this.add('-start', target, 'typechange', type);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Beautiful",
	},
	conversion2: {
		num: 176,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Conversion 2",
		pp: 30,
		priority: 0,
		flags: {bypasssub: 1},
		onHit(target, source) {
			if (!target.lastMoveUsed) {
				return false;
			}
			const possibleTypes = [];
			const attackType = target.lastMoveUsed.type;
			for (const type of this.dex.types.names()) {
				if (source.hasType(type)) continue;
				const typeCheck = this.dex.types.get(type).damageTaken[attackType];
				if (typeCheck === 2 || typeCheck === 3) {
					possibleTypes.push(type);
				}
			}
			if (!possibleTypes.length) {
				return false;
			}
			const randomType = this.sample(possibleTypes);

			if (!source.setType(randomType)) return false;
			this.add('-start', source, 'typechange', randomType);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
	},
	copycat: {
		num: 383,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Copycat",
		pp: 20,
		priority: 0,
		flags: {},
		onHit(pokemon) {
			const noCopycat = [
				'assist', 'banefulbunker', 'beakblast', 'behemothbash', 'behemothblade', 'belch', 'bestow', 'celebrate', 'chatter', 'circlethrow', 'copycat', 'counter', 'covet', 'craftyshield', 'destinybond', 'detect', 'dragontail', 'dynamaxcannon', 'endure', 'feint', 'focuspunch', 'followme', 'helpinghand', 'holdhands', 'kingsshield', 'matblock', 'mefirst', 'metronome', 'mimic', 'mirrorcoat', 'mirrormove', 'naturepower', 'obstruct', 'protect', 'ragepowder', 'roar', 'shelltrap', 'sketch', 'sleeptalk', 'snatch', 'spikyshield', 'spotlight', 'struggle', 'switcheroo', 'thief', 'transform', 'trick', 'whirlwind',
			];
			let move: Move | ActiveMove | null = this.lastMove;
			if (!move) return;

			if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);
			if (noCopycat.includes(move.id) || move.isZ || move.isMax) {
				return false;
			}
			this.actions.useMove(move.id, pokemon);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cute",
	},
	coreenforcer: {
		num: 687,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Core Enforcer",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		zMove: {basePower: 140},
		contestType: "Tough",
	},
	corkscrewcrash: {
		num: 638,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Corkscrew Crash",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "steeliumz",
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	corrosivegas: {
		num: 810,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Corrosive Gas",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target, source) {
			const item = target.takeItem(source);
			if (item) {
				this.add('-enditem', target, item.name, '[from] move: Corrosive Gas', '[of] ' + source);
			} else {
				this.add('-fail', target, 'move: Corrosive Gas');
			}
		},
		secondary: null,
		target: "allAdjacent",
		type: "Poison",
	},
	cosmicpower: {
		num: 322,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Cosmic Power",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	cottonguard: {
		num: 538,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cotton Guard",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 3,
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	cottonspore: {
		num: 178,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Cotton Spore",
		pp: 40,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	counter: {
		num: 68,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			if (!pokemon.volatiles['counter']) return 0;
			return pokemon.volatiles['counter'].damage || 1;
		},
		category: "Physical",
		name: "Counter",
		pp: 20,
		priority: -5,
		flags: {contact: 1, protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('counter');
		},
		onTry(source) {
			if (!source.volatiles['counter']) return false;
			if (source.volatiles['counter'].slot === null) return false;
		},
		condition: {
			duration: 1,
			noCopy: true,
			onStart(target, source, move) {
				this.effectState.slot = null;
				this.effectState.damage = 0;
			},
			onRedirectTargetPriority: -1,
			onRedirectTarget(target, source, source2, move) {
				if (move.id !== 'counter') return;
				if (source !== this.effectState.target || !this.effectState.slot) return;
				return this.getAtSlot(this.effectState.slot);
			},
			onDamagingHit(damage, target, source, move) {
				if (!source.isAlly(target) && this.getCategory(move) === 'Physical') {
					this.effectState.slot = source.getSlot();
					this.effectState.damage = 2 * damage;
				}
			},
		},
		secondary: null,
		target: "scripted",
		type: "Fighting",
		maxMove: {basePower: 75},
		contestType: "Tough",
	},
	courtchange: {
		num: 756,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Court Change",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		onHitField(target, source) {
			const sideConditions = [
				'mist', 'lightscreen', 'reflect', 'spikes', 'safeguard', 'tailwind', 'toxicspikes', 'stealthrock', 'waterpledge', 'firepledge', 'grasspledge', 'stickyweb', 'auroraveil', 'mirageveil', 'gmaxsteelsurge', 'gmaxcannonade', 'gmaxvinelash', 'gmaxwildfire', 'luckyroll',
			];
			let success = false;
			if (this.gameType === "freeforall") {
				// random integer from 1-3 inclusive
				const offset = this.random(3) + 1;
				// the list of all sides in counterclockwise order
				const sides = [this.sides[0], this.sides[2]!, this.sides[1], this.sides[3]!];
				const temp: {[k: number]: typeof source.side.sideConditions} = {0: {}, 1: {}, 2: {}, 3: {}};
				for (const side of sides) {
					for (const id in side.sideConditions) {
						if (!sideConditions.includes(id)) continue;
						temp[side.n][id] = side.sideConditions[id];
						delete side.sideConditions[id];
						const effectName = this.dex.conditions.get(id).name;
						this.add('-sideend', side, effectName, '[silent]');
						success = true;
					}
				}
				for (let i = 0; i < 4; i++) {
					const sourceSideConditions = temp[sides[i].n];
					const targetSide = sides[(i + offset) % 4]; // the next side in rotation
					for (const id in sourceSideConditions) {
						targetSide.sideConditions[id] = sourceSideConditions[id];
						const effectName = this.dex.conditions.get(id).name;
						let layers = sourceSideConditions[id].layers || 1;
						for (; layers > 0; layers--) this.add('-sidestart', targetSide, effectName, '[silent]');
					}
				}
			} else {
				const sourceSideConditions = source.side.sideConditions;
				const targetSideConditions = source.side.foe.sideConditions;
				const sourceTemp: typeof sourceSideConditions = {};
				const targetTemp: typeof targetSideConditions = {};
				for (const id in sourceSideConditions) {
					if (!sideConditions.includes(id)) continue;
					sourceTemp[id] = sourceSideConditions[id];
					delete sourceSideConditions[id];
					success = true;
				}
				for (const id in targetSideConditions) {
					if (!sideConditions.includes(id)) continue;
					targetTemp[id] = targetSideConditions[id];
					delete targetSideConditions[id];
					success = true;
				}
				for (const id in sourceTemp) {
					targetSideConditions[id] = sourceTemp[id];
				}
				for (const id in targetTemp) {
					sourceSideConditions[id] = targetTemp[id];
				}
				this.add('-swapsideconditions');
			}
			if (!success) return false;
			this.add('-activate', source, 'move: Court Change');
		},
		secondary: null,
		target: "all",
		type: "Normal",
	},
	covet: {
		num: 343,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Covet",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (
				!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)
			) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-item', source, yourItem, '[from] move: Covet', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	crabhammer: {
		num: 152,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Crabhammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	craftyshield: {
		num: 578,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Crafty Shield",
		pp: 10,
		priority: 3,
		flags: {},
		sideCondition: 'craftyshield',
		onTry() {
			return !!this.queue.willAct();
		},
		condition: {
			duration: 1,
			onSideStart(target, source) {
				this.add('-singleturn', source, 'Crafty Shield');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (['self', 'all'].includes(move.target) || move.category !== 'Status') return;
				this.add('-activate', target, 'move: Crafty Shield');
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fairy",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	crosschop: {
		num: 238,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Cross Chop",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	crosspoison: {
		num: 440,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Cross Poison",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		critRatio: 2,
		target: "normal",
		type: "Poison",
		contestType: "Cool",
	},
	crunch: {
		num: 242,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Crunch",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	crushclaw: {
		num: 306,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Crush Claw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	crushgrip: {
		num: 462,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const hp = target.hp;
			const maxHP = target.maxhp;
			const bp = Math.floor(Math.floor((120 * (100 * Math.floor(hp * 4096 / maxHP)) + 2048 - 1) / 4096) / 100) || 1;
			this.debug('BP for ' + hp + '/' + maxHP + " HP: " + bp);
			return bp;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Crush Grip",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 190},
		maxMove: {basePower: 140},
		contestType: "Tough",
	},
	curse: {
		num: 174,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Curse",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1},
		volatileStatus: 'curse',
		onModifyMove(move, source, target) {
			if (!source.hasType('Ghost')) {
				move.target = move.nonGhostTarget as MoveTarget;
			} else if (source.isAlly(target)) {
				move.target = 'randomNormal';
			}
		},
		onTryHit(target, source, move) {
			if (!source.hasType('Ghost')) {
				delete move.volatileStatus;
				delete move.onHit;
				move.self = {boosts: {spe: -1, atk: 1, def: 1}};
			} else if (move.volatileStatus && target.volatiles['curse']) {
				return false;
			}
		},
		onHit(target, source) {
			this.directDamage(source.maxhp / 2, source, source);
		},
		condition: {
			onStart(pokemon, source) {
				this.add('-start', pokemon, 'Curse', '[of] ' + source);
			},
			onResidualOrder: 12,
			onResidual(pokemon) {
				this.damage(pokemon.baseMaxhp / 4);
			},
		},
		secondary: null,
		target: "normal",
		nonGhostTarget: "self",
		type: "Ghost",
		zMove: {effect: 'curse'},
		contestType: "Tough",
	},
	cut: {
		num: 15,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Cut",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	darkestlariat: {
		num: 663,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Darkest Lariat",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreEvasion: true,
		ignoreDefensive: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	darkpulse: {
		num: 399,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Dark Pulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Dark",
		contestType: "Cool",
	},
	darkvoid: {
		num: 464,
		accuracy: 50,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Dark Void",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		onTry(source, target, move) {
			if (source.species.name === 'Darkrai' || move.hasBounced) {
				return;
			}
			this.add('-fail', source, 'move: Dark Void');
			this.hint("Only a Pokemon whose form is Darkrai can use this move.");
			return null;
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	dazzlinggleam: {
		num: 605,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Dazzling Gleam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		contestType: "Beautiful",
	},
	decorate: {
		num: 777,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Decorate",
		pp: 15,
		priority: 0,
		flags: {allyanim: 1},
		secondary: null,
		boosts: {
			atk: 2,
			spa: 2,
		},
		target: "normal",
		type: "Fairy",
	},
	defendorder: {
		num: 455,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Defend Order",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	defensecurl: {
		num: 111,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Defense Curl",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		volatileStatus: 'defensecurl',
		condition: {
			noCopy: true,
			onRestart: () => null,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cute",
	},
	defog: {
		num: 432,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Defog",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		onHit(target, source, move) {
			let success = false;
			if (!target.volatiles['substitute'] || move.infiltrates) success = !!this.boost({evasion: -1});
			const removeTarget = [
				'reflect', 'lightscreen', 'auroraveil', 'mirageveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			const removeAll = [
				'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			for (const targetCondition of removeTarget) {
				if (target.side.removeSideCondition(targetCondition)) {
					if (!removeAll.includes(targetCondition)) continue;
					this.add('-sideend', target.side, this.dex.conditions.get(targetCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}
			}
			for (const sideCondition of removeAll) {
				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}
			}
			this.field.clearTerrain();
			return success;
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cool",
	},
	destinybond: {
		num: 194,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Destiny Bond",
		pp: 5,
		priority: 0,
		flags: {bypasssub: 1},
		volatileStatus: 'destinybond',
		onPrepareHit(pokemon) {
			return !pokemon.removeVolatile('destinybond');
		},
		condition: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Destiny Bond');
			},
			onFaint(target, source, effect) {
				if (!source || !effect || target.isAlly(source)) return;
				if (effect.effectType === 'Move' && !effect.isFutureMove) {
					if (source.volatiles['dynamax']) {
						this.add('-hint', "Dynamaxed Pokémon are immune to Destiny Bond.");
						return;
					}
					this.add('-activate', target, 'move: Destiny Bond');
					source.faint();
				}
			},
			onBeforeMovePriority: -1,
			onBeforeMove(pokemon, target, move) {
				if (move.id === 'destinybond') return;
				this.debug('removing Destiny Bond before attack');
				pokemon.removeVolatile('destinybond');
			},
			onMoveAborted(pokemon, target, move) {
				pokemon.removeVolatile('destinybond');
			},
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		zMove: {effect: 'redirect'},
		contestType: "Clever",
	},
	detect: {
		num: 197,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Detect",
		pp: 5,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		secondary: null,
		target: "self",
		type: "Fighting",
		zMove: {boost: {evasion: 1}},
		contestType: "Cool",
	},
	devastatingdrake: {
		num: 652,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Devastating Drake",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "dragoniumz",
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
	},
	diamondstorm: {
		num: 591,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Diamond Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			chance: 50,
			boosts: {
				def: 2,
			},
		},
		secondary: {
			// Sheer Force negates the self even though it is not secondary
		},
		target: "allAdjacentFoes",
		type: "Rock",
		contestType: "Beautiful",
	},
	dig: {
		num: 91,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Dig",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onImmunity(type, pokemon) {
				if (type === 'sandstorm' || type === 'hail') return false;
			},
			onInvulnerability(target, source, move) {
				if (['earthquake', 'magnitude', 'lavasplash', 'divinequake', 'meteorrain', 'terrakinesis', 'magmaquake', 'lavaquake'].includes(move.id) && !target.hasAbility('Digger')) {
					return;
				}
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'earthquake' || move.id === 'magnitude') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	disable: {
		num: 50,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Disable",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'disable',
		onTryHit(target) {
			if (!target.lastMove || target.lastMove.isZ || target.lastMove.isMax || target.lastMove.id === 'struggle') {
				return false;
			}
		},
		condition: {
			duration: 5,
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon, source, effect) {
				// The target hasn't taken its turn, or Cursed Body activated and the move was not used through Dancer or Instruct
				if (
					this.queue.willMove(pokemon) ||
					(pokemon === this.activePokemon && this.activeMove && !this.activeMove.isExternal)
				) {
					this.effectState.duration--;
				}
				if (!pokemon.lastMove) {
					this.debug(`Pokemon hasn't moved yet`);
					return false;
				}
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id === pokemon.lastMove.id) {
						if (!moveSlot.pp) {
							this.debug('Move out of PP');
							return false;
						}
					}
				}
				if (effect.effectType === 'Ability') {
					this.add('-start', pokemon, 'Disable', pokemon.lastMove.name, '[from] ability: Cursed Body', '[of] ' + source);
				} else {
					this.add('-start', pokemon, 'Disable', pokemon.lastMove.name);
				}
				this.effectState.move = pokemon.lastMove.id;
			},
			onResidualOrder: 17,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Disable');
			},
			onBeforeMovePriority: 7,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && move.id === this.effectState.move) {
					this.add('cant', attacker, 'Disable', move);
					return false;
				}
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id === this.effectState.move) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	disarmingvoice: {
		num: 574,
		accuracy: true,
		basePower: 40,
		category: "Special",
		name: "Disarming Voice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		contestType: "Cute",
	},
	discharge: {
		num: 435,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Discharge",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacent",
		type: "Electric",
		contestType: "Beautiful",
	},
	direclaw: {
		num: 827,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Dire Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('psn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('slp', source);
				}
			},
		},
		target: "normal",
		type: "Poison",
	},
	dive: {
		num: 291,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, nonsky: 1, allyanim: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			if (attacker.hasAbility('gulpmissile') && attacker.species.name === 'Cramorant' && !attacker.transformed) {
				const forme = attacker.hp <= attacker.maxhp / 2 ? 'cramorantgorging' : 'cramorantgulping';
				attacker.formeChange(forme, move);
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onImmunity(type, pokemon) {
				if (type === 'sandstorm' || type === 'hail') return false;
			},
			onInvulnerability(target, source, move) {
				if (['surf', 'whirlpool'].includes(move.id)) {
					return;
				}
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'surf' || move.id === 'whirlpool') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	dizzypunch: {
		num: 146,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		isNonstandard: "Past",
		name: "Dizzy Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	doodle: {
		num: 867,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Doodle",
		pp: 10,
		priority: 0,
		flags: {},
		onHit(target, source, move) {
			let success: boolean | null = false;
			for (const pokemon of source.alliesAndSelf()) {
				if (pokemon.ability === target.ability) continue;
				const oldAbility = pokemon.setAbility(target.ability);
				if (oldAbility) {
					this.add('-ability', pokemon, target.getAbility().name, '[from] move: Doodle');
					success = true;
				} else if (!success && oldAbility === null) {
					success = null;
				}
			}
			if (!success) {
				if (success === false) {
					this.add('-fail', source);
				}
				this.attrLastMove('[still]');
				return this.NOT_FAIL;
			}
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
	},
	doomdesire: {
		num: 353,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		isNonstandard: "Past",
		name: "Doom Desire",
		pp: 5,
		priority: 0,
		flags: {},
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				move: 'doomdesire',
				source: source,
				moveData: {
					id: 'doomdesire',
					name: "Doom Desire",
					accuracy: 100,
					basePower: 140,
					category: "Special",
					priority: 0,
					flags: {},
					effectType: 'Move',
					isFutureMove: true,
					type: 'Steel',
				},
			});
			this.add('-start', source, 'Doom Desire');
			return this.NOT_FAIL;
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
	},
	doubleedge: {
		num: 38,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Double-Edge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	doublehit: {
		num: 458,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Double Hit",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 140},
		maxMove: {basePower: 120},
		contestType: "Cool",
	},
	doubleironbash: {
		num: 742,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Double Iron Bash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: 2,
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		zMove: {basePower: 180},
		maxMove: {basePower: 140},
		contestType: "Clever",
	},
	doublekick: {
		num: 24,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Double Kick",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		maxMove: {basePower: 80},
		contestType: "Cool",
	},
	doubleshock: {
		num: 892,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Double Shock",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(pokemon, target, move) {
			if (pokemon.hasType('Electric')) return;
			this.add('-fail', pokemon, 'move: Double Shock');
			this.attrLastMove('[still]');
			return null;
		},
		self: {
			onHit(pokemon) {
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Electric" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Double Shock');
			},
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	doubleslap: {
		num: 3,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		isNonstandard: "Past",
		name: "Double Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	doubleteam: {
		num: 104,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Double Team",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			evasion: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	dracometeor: {
		num: 434,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Draco Meteor",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Beautiful",
	},
	dragonascent: {
		num: 620,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Dragon Ascent",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		target: "any",
		type: "Flying",
		contestType: "Beautiful",
	},
	dragonbreath: {
		num: 225,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Dragon Breath",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
	},
	dragonclaw: {
		num: 337,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Dragon Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
	},
	dragondance: {
		num: 349,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dragon Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Dragon",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	dragondarts: {
		num: 751,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Dragon Darts",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		smartTarget: true,
		secondary: null,
		target: "normal",
		type: "Dragon",
		maxMove: {basePower: 130},
	},
	dragonenergy: {
		num: 820,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower * pokemon.hp / pokemon.maxhp;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Dragon Energy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
	},
	dragonhammer: {
		num: 692,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Dragon Hammer",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Tough",
	},
	dragonpulse: {
		num: 406,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Dragon Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Dragon",
		contestType: "Beautiful",
	},
	dragonrage: {
		num: 82,
		accuracy: 100,
		basePower: 0,
		damage: 40,
		category: "Special",
		isNonstandard: "Past",
		name: "Dragon Rage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
	},
	dragonrush: {
		num: 407,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "Dragon Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Dragon",
		contestType: "Tough",
	},
	dragontail: {
		num: 525,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Dragon Tail",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		target: "normal",
		type: "Dragon",
		contestType: "Tough",
	},
	drainingkiss: {
		num: 577,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Draining Kiss",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [3, 4],
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Cute",
	},
	drainpunch: {
		num: 409,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Drain Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	dreameater: {
		num: 138,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Dream Eater",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		onTryImmunity(target) {
			return target.status === 'slp' || target.hasAbility('comatose') || target.hasAbility('boardpowerz');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	drillpeck: {
		num: 65,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Drill Peck",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	drillrun: {
		num: 529,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Drill Run",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	drumbeating: {
		num: 778,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Drum Beating",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Grass",
	},
	dualchop: {
		num: 530,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		isNonstandard: "Past",
		name: "Dual Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	dualwingbeat: {
		num: 814,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Dual Wingbeat",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Flying",
		maxMove: {basePower: 130},
	},
	dynamaxcannon: {
		num: 744,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Dynamax Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
	},
	dynamicpunch: {
		num: 223,
		accuracy: 50,
		basePower: 100,
		category: "Physical",
		name: "Dynamic Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	earthpower: {
		num: 414,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Earth Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Ground",
		contestType: "Beautiful",
	},
	earthquake: {
		num: 89,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Earthquake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Ground",
		contestType: "Tough",
	},
	echoedvoice: {
		num: 497,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			if (this.field.pseudoWeather.echoedvoice) {
				bp = move.basePower * this.field.pseudoWeather.echoedvoice.multiplier;
			}
			this.debug('BP: ' + move.basePower);
			return bp;
		},
		category: "Special",
		name: "Echoed Voice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		onTry() {
			this.field.addPseudoWeather('echoedvoice');
		},
		condition: {
			duration: 2,
			onFieldStart() {
				this.effectState.multiplier = 1;
			},
			onFieldRestart() {
				if (this.effectState.duration !== 2) {
					this.effectState.duration = 2;
					if (this.effectState.multiplier < 5) {
						this.effectState.multiplier++;
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	eerieimpulse: {
		num: 598,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Eerie Impulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spa: -2,
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	eeriespell: {
		num: 826,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Eerie Spell",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (!target.hp) return;
				let move: Move | ActiveMove | null = target.lastMove;
				if (!move || move.isZ) return;
				if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);

				const ppDeducted = target.deductPP(move.id, 3);
				if (!ppDeducted) return;
				this.add('-activate', target, 'move: Eerie Spell', move.name, ppDeducted);
			},
		},
		target: "normal",
		type: "Psychic",
	},
	eggbomb: {
		num: 121,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Egg Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	electricterrain: {
		num: 604,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Electric Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'electricterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (status.id === 'slp' && target.isGrounded() && !target.isSemiInvulnerable()) {
					if (effect.id === 'yawn' || (effect.effectType === 'Move' && !effect.secondaries)) {
						this.add('-activate', target, 'move: Electric Terrain');
					}
					return false;
				}
			},
			onTryAddVolatile(status, target) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'yawn') {
					this.add('-activate', target, 'move: Electric Terrain');
					return null;
				}
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {
					this.debug('electric terrain boost');
					return this.chainModify([5325, 4096]);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Electric Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Electric Terrain');
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Electric Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Electric",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	electrify: {
		num: 582,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Electrify",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		volatileStatus: 'electrify',
		onTryHit(target) {
			if (!this.queue.willMove(target) && target.activeTurns) return false;
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Electrify');
			},
			onModifyTypePriority: -2,
			onModifyType(move) {
				if (move.id !== 'struggle') {
					this.debug('Electrify making move type electric');
					move.type = 'Electric';
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	electroball: {
		num: 486,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let ratio = Math.floor(pokemon.getStat('spe') / target.getStat('spe'));
			if (!isFinite(ratio)) ratio = 0;
			const bp = [40, 60, 80, 120, 150][Math.min(ratio, 4)];
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Electro Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	electrodrift: {
		num: 879,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Electro Drift",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			if (target.runEffectiveness(move) > 0) {
				// Placeholder
				this.debug(`electro drift super effective buff`);
				return this.chainModify([5461, 4096]);
			}
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	electroweb: {
		num: 527,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Electroweb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Electric",
		contestType: "Beautiful",
	},
	embargo: {
		num: 373,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Embargo",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'embargo',
		condition: {
			duration: 5,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Embargo');
				this.singleEvent('End', pokemon.getItem(), pokemon.itemState, pokemon);
			},
			// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
			onResidualOrder: 21,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Embargo');
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	ember: {
		num: 52,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Ember",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Cute",
	},
	encore: {
		num: 227,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Encore",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'encore',
		condition: {
			duration: 3,
			noCopy: true, // doesn't get copied by Z-Baton Pass
			onStart(target) {
				const noEncore = [
					'assist', 'copycat', 'dynamaxcannon', 'encore', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'sketch', 'sleeptalk', 'struggle', 'transform',
				];
				let move: Move | ActiveMove | null = target.lastMove;
				if (!move || target.volatiles['dynamax']) return false;

				if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);
				const moveIndex = target.moves.indexOf(move.id);
				if (move.isZ || noEncore.includes(move.id) || !target.moveSlots[moveIndex] || target.moveSlots[moveIndex].pp <= 0) {
					// it failed
					return false;
				}
				this.effectState.move = move.id;
				this.add('-start', target, 'Encore');
				if (!this.queue.willMove(target)) {
					this.effectState.duration++;
				}
			},
			onOverrideAction(pokemon, target, move) {
				if (move.id !== this.effectState.move) return this.effectState.move;
			},
			onResidualOrder: 16,
			onResidual(target) {
				if (target.moves.includes(this.effectState.move) &&
					target.moveSlots[target.moves.indexOf(this.effectState.move)].pp <= 0) {
					// early termination if you run out of PP
					target.removeVolatile('encore');
				}
			},
			onEnd(target) {
				this.add('-end', target, 'Encore');
			},
			onDisableMove(pokemon) {
				if (!this.effectState.move || !pokemon.hasMove(this.effectState.move)) {
					return;
				}
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id !== this.effectState.move) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Cute",
	},
	endeavor: {
		num: 283,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon, target) {
			return target.getUndynamaxedHP() - pokemon.hp;
		},
		category: "Physical",
		name: "Endeavor",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryImmunity(target, pokemon) {
			return pokemon.hp < target.hp;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	endure: {
		num: 203,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Endure",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'endure',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Endure');
			},
			onDamagePriority: -10,
			onDamage(damage, target, source, effect) {
				if (effect?.effectType === 'Move' && damage >= target.hp) {
					this.add('-activate', target, 'move: Endure');
					return target.hp - 1;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	energyball: {
		num: 412,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Energy Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Beautiful",
	},
	entrainment: {
		num: 494,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Entrainment",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onTryHit(target, source) {
			if (target === source || target.volatiles['dynamax']) return false;

			const additionalBannedSourceAbilities = [
				// Zen Mode included here for compatability with Gen 5-6
				'flowergift', 'forecast', 'hungerswitch', 'illusion', 'imposter', 'neutralizinggas', 'powerofalchemy', 'receiver', 'trace', 'zenmode',
			];
			if (
				target.ability === source.ability ||
				target.getAbility().isPermanent || target.ability === 'truant' ||
				source.getAbility().isPermanent || additionalBannedSourceAbilities.includes(source.ability)
			) {
				return false;
			}
		},
		onHit(target, source) {
			const oldAbility = target.setAbility(source.ability);
			if (oldAbility) {
				this.add('-ability', target, target.getAbility().name, '[from] move: Entrainment');
				if (!target.isAlly(source)) target.volatileStaleness = 'external';
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	eruption: {
		num: 284,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower * pokemon.hp / pokemon.maxhp;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Eruption",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		contestType: "Beautiful",
	},
	esperwing: {
		num: 840,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Esper Wing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Psychic",
	},
	eternabeam: {
		num: 795,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		isNonstandard: "Past",
		name: "Eternabeam",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
	},
	expandingforce: {
		num: 797,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Expanding Force",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, source) {
			if (this.field.isTerrain('psychicterrain') && source.isGrounded()) {
				this.debug('terrain buff');
				return this.chainModify(1.5);
			}
		},
		onModifyMove(move, source, target) {
			if (this.field.isTerrain('psychicterrain') && source.isGrounded()) {
				move.target = 'allAdjacentFoes';
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
	},
	explosion: {
		num: 153,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		contestType: "Beautiful",
	},
	extrasensory: {
		num: 326,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Extrasensory",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	extremeevoboost: {
		num: 702,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Extreme Evoboost",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "eeviumz",
		boosts: {
			atk: 2,
			def: 2,
			spa: 2,
			spd: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Beautiful",
	},
	extremespeed: {
		num: 245,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Extreme Speed",
		pp: 5,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	facade: {
		num: 263,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Facade",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.status && pokemon.status !== 'slp') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	fairylock: {
		num: 587,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fairy Lock",
		pp: 10,
		priority: 0,
		flags: {mirror: 1, bypasssub: 1},
		pseudoWeather: 'fairylock',
		condition: {
			duration: 2,
			onFieldStart(target) {
				this.add('-fieldactivate', 'move: Fairy Lock');
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	fairywind: {
		num: 584,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Fairy Wind",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
	},
	fakeout: {
		num: 252,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Fake Out",
		pp: 10,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Fake Out only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	faketears: {
		num: 313,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Fake Tears",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		boosts: {
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
	},
	falsesurrender: {
		num: 793,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "False Surrender",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	falseswipe: {
		num: 206,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "False Swipe",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onDamagePriority: -20,
		onDamage(damage, target, source, effect) {
			if (damage >= target.hp) return target.hp - 1;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	featherdance: {
		num: 297,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Feather Dance",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1, dance: 1},
		boosts: {
			atk: -2,
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
	},
	feint: {
		num: 364,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Feint",
		pp: 10,
		priority: 2,
		flags: {mirror: 1},
		breaksProtect: true,
		// Breaking protection implemented in scripts.js
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Clever",
	},
	feintattack: {
		num: 185,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Feint Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	fellstinger: {
		num: 565,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Fell Stinger",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (!target || target.fainted || target.hp <= 0) this.boost({atk: 3}, pokemon, pokemon, move);
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	fierydance: {
		num: 552,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Fiery Dance",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		secondary: {
			chance: 50,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	fierywrath: {
		num: 822,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Fiery Wrath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "allAdjacentFoes",
		type: "Dark",
	},
	filletaway: {
		num: 868,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fillet Away",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onTry(source) {
			if (source.hp <= source.maxhp / 2 || source.maxhp === 1) return false;
		},
		onTryHit(pokemon, target, move) {
			if (!this.boost(move.boosts as SparseBoostsTable)) return null;
			delete move.boosts;
		},
		onHit(pokemon) {
			this.directDamage(pokemon.maxhp / 2);
		},
		boosts: {
			atk: 2,
			spa: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
	},
	finalgambit: {
		num: 515,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			const damage = pokemon.hp;
			pokemon.faint();
			return damage;
		},
		category: "Special",
		name: "Final Gambit",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 180},
		contestType: "Tough",
	},
	fireblast: {
		num: 126,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Fire Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	firefang: {
		num: 424,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Fire Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'brn',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	firelash: {
		num: 680,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Fire Lash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Cute",
	},
	firepledge: {
		num: 519,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['grasspledge', 'waterpledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		name: "Fire Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue.list as MoveAction[]) {
				if (
					!action.move || !action.pokemon?.isActive ||
					action.pokemon.fainted || action.maxMove || action.zmove
				) {
					continue;
				}
				if (action.pokemon.isAlly(source) && ['grasspledge', 'waterpledge'].includes(action.move.id)) {
					this.queue.prioritizeAction(action, move);
					this.add('-waiting', source, action.pokemon);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'waterpledge') {
				move.type = 'Water';
				move.forceSTAB = true;
				move.self = {sideCondition: 'waterpledge'};
			}
			if (move.sourceEffect === 'grasspledge') {
				move.type = 'Fire';
				move.forceSTAB = true;
				move.sideCondition = 'firepledge';
			}
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'Fire Pledge');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(pokemon) {
				if (!pokemon.hasType('Fire')) this.damage(pokemon.baseMaxhp / 8, pokemon);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 8,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'Fire Pledge');
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	firepunch: {
		num: 7,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Fire Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Tough",
	},
	firespin: {
		num: 83,
		accuracy: 85,
		basePower: 35,
		category: "Special",
		name: "Fire Spin",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	firstimpression: {
		num: 660,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "First Impression",
		pp: 10,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("First Impression only works on your first turn out.");
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	fishiousrend: {
		num: 755,
		accuracy: 100,
		basePower: 85,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Fishious Rend damage boost');
				return move.basePower * 2;
			}
			this.debug('Fishious Rend NOT boosted');
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Fishious Rend",
		pp: 10,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
	},
	fissure: {
		num: 90,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		name: "Fissure",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Ground",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	flail: {
		num: 175,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const ratio = Math.max(Math.floor(pokemon.hp * 48 / pokemon.maxhp), 1);
			let bp;
			if (ratio < 2) {
				bp = 200;
			} else if (ratio < 5) {
				bp = 150;
			} else if (ratio < 10) {
				bp = 100;
			} else if (ratio < 17) {
				bp = 80;
			} else if (ratio < 33) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Flail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	flameburst: {
		num: 481,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		isNonstandard: "Past",
		name: "Flame Burst",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target, source, move) {
			for (const ally of target.adjacentAllies()) {
				this.damage(ally.baseMaxhp / 16, ally, source, this.dex.conditions.get('Flame Burst'));
			}
		},
		onAfterSubDamage(damage, target, source, move) {
			for (const ally of target.adjacentAllies()) {
				this.damage(ally.baseMaxhp / 16, ally, source, this.dex.conditions.get('Flame Burst'));
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	flamecharge: {
		num: 488,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Flame Charge",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	flamewheel: {
		num: 172,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Flame Wheel",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	flamethrower: {
		num: 53,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Flamethrower",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	flareblitz: {
		num: 394,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Flare Blitz",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		recoil: [33, 100],
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	flash: {
		num: 148,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Flash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {evasion: 1}},
		contestType: "Beautiful",
	},
	flashcannon: {
		num: 430,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Flash Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
	},
	flatter: {
		num: 260,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Flatter",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		volatileStatus: 'confusion',
		boosts: {
			spa: 1,
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	fleurcannon: {
		num: 705,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Fleur Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
	},
	fling: {
		num: 374,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		name: "Fling",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onPrepareHit(target, source, move) {
			if (source.ignoringItem()) return false;
			const item = source.getItem();
			if (!this.singleEvent('TakeItem', item, source.itemState, source, source, move, item)) return false;
			if (!item.fling) return false;
			move.basePower = item.fling.basePower;
			this.debug('BP: ' + move.basePower);
			if (item.isBerry) {
				move.onHit = function (foe) {
					if (this.singleEvent('Eat', item, null, foe, null, null)) {
						this.runEvent('EatItem', foe, null, null, item);
						if (item.id === 'leppaberry') foe.staleness = 'external';
					}
					if (item.onEat) foe.ateBerry = true;
				};
			} else if (item.fling.effect) {
				move.onHit = item.fling.effect;
			} else {
				if (!move.secondaries) move.secondaries = [];
				if (item.fling.status) {
					move.secondaries.push({status: item.fling.status});
				} else if (item.fling.volatileStatus) {
					move.secondaries.push({volatileStatus: item.fling.volatileStatus});
				}
			}
			source.addVolatile('fling');
		},
		condition: {
			onUpdate(pokemon) {
				const item = pokemon.getItem();
				pokemon.setItem('');
				pokemon.lastItem = item.id;
				pokemon.usedItemThisTurn = true;
				this.add('-enditem', pokemon, item.name, '[from] move: Fling');
				this.runEvent('AfterUseItem', pokemon, null, null, item);
				pokemon.removeVolatile('fling');
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cute",
	},
	flipturn: {
		num: 812,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Flip Turn",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Water",
	},
	floatyfall: {
		num: 731,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		isNonstandard: "LGPE",
		name: "Floaty Fall",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, gravity: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Flying",
		contestType: "Cool",
	},
	floralhealing: {
		num: 666,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Floral Healing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, heal: 1, allyanim: 1},
		onHit(target, source) {
			let success = false;
			if (this.field.isTerrain('grassyterrain')) {
				success = !!this.heal(this.modify(target.baseMaxhp, 0.667));
			} else {
				success = !!this.heal(Math.ceil(target.baseMaxhp * 0.5));
			}
			if (success && !target.isAlly(source)) {
				target.staleness = 'external';
			}
			if (!success) {
				this.add('-fail', target, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	flowershield: {
		num: 579,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Flower Shield",
		pp: 10,
		priority: 0,
		flags: {distance: 1},
		onHitField(t, source, move) {
			const targets: Pokemon[] = [];
			for (const pokemon of this.getAllActive()) {
				if (
					pokemon.hasType('Grass') &&
					(!pokemon.volatiles['maxguard'] ||
					  this.runEvent('TryHit', pokemon, source, move))
				  ) {
					// This move affects every Grass-type Pokemon in play.
					targets.push(pokemon);
				  }
			}
			let success = false;
			for (const target of targets) {
				success = this.boost({def: 1}, target, source, move) || success;
			}
			return success;
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
	},
	flowertrick: {
		num: 870,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Flower Trick",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	fly: {
		num: 19,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Fly",
		pp: 15,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability(target, source, move) {
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Clever",
	},
	flyingpress: {
		num: 560,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Flying Press",
		pp: 10,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, distance: 1, nonsky: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Flying', type);
		},
		priority: 0,
		secondary: null,
		target: "any",
		type: "Fighting",
		zMove: {basePower: 170},
		contestType: "Tough",
	},
	focusblast: {
		num: 411,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		name: "Focus Blast",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	focusenergy: {
		num: 116,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Focus Energy",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'focusenergy',
		condition: {
			onStart(target, source, effect) {
				if (effect?.id === 'zpower') {
					this.add('-start', target, 'move: Focus Energy', '[zeffect]');
				} else if (effect && (['costar', 'imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', target, 'move: Focus Energy', '[silent]');
				} else {
					this.add('-start', target, 'move: Focus Energy');
				}
			},
			onModifyCritRatio(critRatio) {
				return critRatio + 2;
			},
		},
		secondary: null,
		target: "self",
		type:
		 "Normal",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cool",
	},
	focuspunch: {
		num: 264,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Focus Punch",
		pp: 20,
		priority: -3,
		flags: {contact: 1, protect: 1, punch: 1},
		priorityChargeCallback(pokemon) {
			pokemon.addVolatile('focuspunch');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['focuspunch']?.lostFocus) {
				this.add('cant', pokemon, 'Focus Punch', 'Focus Punch');
				return true;
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Focus Punch');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					this.effectState.lostFocus = true;
				}
			},
			onTryAddVolatile(status, pokemon) {
				if (status.id === 'flinch') return null;
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	followme: {
		num: 266,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Follow Me",
		pp: 20,
		priority: 2,
		flags: {},
		volatileStatus: 'followme',
		onTry(source) {
			return this.activePerHalf > 1;
		},
		condition: {
			duration: 1,
			onStart(target, source, effect) {
				if (effect?.id === 'zpower') {
					this.add('-singleturn', target, 'move: Follow Me', '[zeffect]');
				} else {
					this.add('-singleturn', target, 'move: Follow Me');
				}
			},
			onFoeRedirectTargetPriority: 1,
			onFoeRedirectTarget(target, source, source2, move) {
				if (!this.effectState.target.isSkyDropped() && this.validTarget(this.effectState.target, source, move.target)) {
					if (move.smartTarget) move.smartTarget = false;
					this.debug("Follow Me redirected target of move");
					return this.effectState.target;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	forcepalm: {
		num: 395,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Force Palm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	foresight: {
		num: 193,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Foresight",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'foresight',
		onTryHit(target) {
			if (target.volatiles['miracleeye']) return false;
		},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Foresight');
			},
			onNegateImmunity(pokemon, type) {
				if (pokemon.hasType('Ghost') && ['Normal', 'Fighting'].includes(type)) return false;
			},
			onModifyBoost(boosts) {
				if (boosts.evasion && boosts.evasion > 0) {
					boosts.evasion = 0;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'crit2'},
		contestType: "Clever",
	},
	forestscurse: {
		num: 571,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Forest's Curse",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.hasType('Grass')) return false;
			if (!target.addType('Grass')) return false;
			this.add('-start', target, 'typeadd', 'Grass', '[from] move: Forest\'s Curse');
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Clever",
	},
	foulplay: {
		num: 492,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Foul Play",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideOffensivePokemon: 'target',
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	freezedry: {
		num: 573,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Freeze-Dry",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Water') return 1;
		},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	freezeshock: {
		num: 553,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		isNonstandard: "Past",
		name: "Freeze Shock",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	freezingglare: {
		num: 821,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Freezing Glare",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Psychic",
	},
	freezyfrost: {
		num: 739,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Freezy Frost",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onHit() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	frenzyplant: {
		num: 338,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Frenzy Plant",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1, nonsky: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	frostbreath: {
		num: 524,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Frost Breath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	frustration: {
		num: 218,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor(((255 - pokemon.happiness) * 10) / 25) || 1;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Frustration",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	furyattack: {
		num: 31,
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		name: "Fury Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	furycutter: {
		num: 210,
		accuracy: 95,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.volatiles['furycutter'] || move.hit === 1) {
				pokemon.addVolatile('furycutter');
			}
			const bp = this.clampIntRange(move.basePower * pokemon.volatiles['furycutter'].multiplier, 1, 160);
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Fury Cutter",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		condition: {
			duration: 2,
			onStart() {
				this.effectState.multiplier = 1;
			},
			onRestart() {
				if (this.effectState.multiplier < 4) {
					this.effectState.multiplier <<= 1;
				}
				this.effectState.duration = 2;
			},
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	furyswipes: {
		num: 154,
		accuracy: 80,
		basePower: 18,
		category: "Physical",
		name: "Fury Swipes",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		maxMove: {basePower: 100},
		contestType: "Tough",
	},
	fusionbolt: {
		num: 559,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Fusion Bolt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (this.lastSuccessfulMoveThisTurn === 'fusionflare') {
				this.debug('double power');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	fusionflare: {
		num: 558,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Fusion Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onBasePower(basePower, pokemon) {
			if (this.lastSuccessfulMoveThisTurn === 'fusionbolt') {
				this.debug('double power');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	futuresight: {
		num: 248,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Future Sight",
		pp: 10,
		priority: 0,
		flags: {},
		ignoreImmunity: true,
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				duration: 3,
				move: 'futuresight',
				source: source,
				moveData: {
					id: 'futuresight',
					name: "Future Sight",
					accuracy: 100,
					basePower: 120,
					category: "Special",
					priority: 0,
					flags: {},
					ignoreImmunity: false,
					effectType: 'Move',
					isFutureMove: true,
					type: 'Psychic',
				},
			});
			this.add('-start', source, 'move: Future Sight');
			return this.NOT_FAIL;
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	gastroacid: {
		num: 380,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Gastro Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		volatileStatus: 'gastroacid',
		onTryHit(target) {
			if (target.getAbility().isPermanent) {
				return false;
			}
			if (target.hasItem('Ability Shield')) {
				this.add('-block', target, 'item: Ability Shield');
				return null;
			}
		},
		condition: {
			// Ability suppression implemented in Pokemon.ignoringAbility() within sim/pokemon.ts
			onStart(pokemon) {
				if (pokemon.hasItem('Ability Shield')) return false;
				this.add('-endability', pokemon);
				this.singleEvent('End', pokemon.getAbility(), pokemon.abilityState, pokemon, pokemon, 'gastroacid');
			},
			onCopy(pokemon) {
				if (pokemon.getAbility().isPermanent) pokemon.removeVolatile('gastroacid');
			},
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {boost: {spe: 1}},
		contestType: "Tough",
	},
	geargrind: {
		num: 544,
		accuracy: 85,
		basePower: 50,
		category: "Physical",
		isNonstandard: "Past",
		name: "Gear Grind",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Steel",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Clever",
	},
	gearup: {
		num: 674,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Gear Up",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bypasssub: 1},
		onHitSide(side, source, move) {
			const targets = side.allies().filter(target => (
				target.hasAbility(['plus', 'minus']) &&
				(!target.volatiles['maxguard'] || this.runEvent('TryHit', target, source, move))
			));
			if (!targets.length) return false;
			let didSomething = false;
			for (const target of targets) {
				didSomething = this.boost({atk: 1, spa: 1}, target, source, move, false, true) || didSomething;
			}
			return didSomething;
		},
		secondary: null,
		target: "allySide",
		type: "Steel",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	genesissupernova: {
		num: 703,
		accuracy: true,
		basePower: 185,
		category: "Special",
		isNonstandard: "Past",
		name: "Genesis Supernova",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "mewniumz",
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('psychicterrain');
				},
			},
		},
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	geomancy: {
		num: 601,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Geomancy",
		pp: 10,
		priority: 0,
		flags: {charge: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		boosts: {
			spa: 2,
			spd: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Beautiful",
	},
	gigadrain: {
		num: 202,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Giga Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	gigaimpact: {
		num: 416,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Giga Impact",
		pp: 5,
		priority: 0,
		flags: {contact: 1, recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	gigatonhammer: {
		num: 893,
		accuracy: 100,
		basePower: 160,
		category: "Physical",
		name: "Gigaton Hammer",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onDisableMove(pokemon) {
			if (pokemon.lastMove?.id === 'gigatonhammer') pokemon.disableMove('gigatonhammer');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.lastMove?.id === 'gigatonhammer') pokemon.addVolatile('gigatonhammer');
		},
		onAfterMove(pokemon) {
			if (pokemon.removeVolatile('gigatonhammer')) {
				this.add('-hint', "Some effects can force a Pokemon to use Gigaton Hammer again in a row.");
			}
		},
		condition: {},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	gigavolthavoc: {
		num: 646,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Gigavolt Havoc",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "electriumz",
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	glaciallance: {
		num: 824,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Glacial Lance",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ice",
	},
	glaciate: {
		num: 549,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Glaciate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Beautiful",
	},
	glaiverush: {
		num: 862,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Glaive Rush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'glaiverush',
		},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Glaive Rush', '[silent]');
			},
			onAccuracy() {
				return true;
			},
			onSourceModifyDamage() {
				return this.chainModify(2);
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Glaive Rush drawback before attack');
				pokemon.removeVolatile('glaiverush');
			},
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
	},
	glare: {
		num: 137,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Glare",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Tough",
	},
	glitzyglow: {
		num: 736,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Glitzy Glow",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		self: {
			sideCondition: 'lightscreen',
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	gmaxbefuddle: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Befuddle",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Butterfree",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					const result = this.random(3);
					if (result === 0) {
						pokemon.trySetStatus('slp', source);
					} else if (result === 1) {
						pokemon.trySetStatus('par', source);
					} else {
						pokemon.trySetStatus('psn', source);
					}
				}
			},
		},
		target: "adjacentFoe",
		type: "Bug",
		contestType: "Cool",
	},
	gmaxcannonade: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Cannonade",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Blastoise",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxcannonade');
				}
			},
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'G-Max Cannonade');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(target) {
				if (!target.hasType('Water')) this.damage(target.baseMaxhp / 6, target);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 11,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'G-Max Cannonade');
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	gmaxcentiferno: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Centiferno",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Centiskorch",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('partiallytrapped', source, this.dex.getActiveMove('G-Max Centiferno'));
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fire",
		contestType: "Cool",
	},
	gmaxchistrike: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Chi Strike",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Machamp",
		self: {
			onHit(source) {
				for (const pokemon of source.alliesAndSelf()) {
					pokemon.addVolatile('gmaxchistrike');
				}
			},
		},
		condition: {
			noCopy: true,
			onStart(target, source, effect) {
				this.effectState.layers = 1;
				if (!['costar', 'imposter', 'psychup', 'transform'].includes(effect?.id)) {
					this.add('-start', target, 'move: G-Max Chi Strike');
				}
			},
			onRestart(target, source, effect) {
				if (this.effectState.layers >= 3) return false;
				this.effectState.layers++;
				if (!['costar', 'imposter', 'psychup', 'transform'].includes(effect?.id)) {
					this.add('-start', target, 'move: G-Max Chi Strike');
				}
			},
			onModifyCritRatio(critRatio) {
				return critRatio + this.effectState.layers;
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fighting",
		contestType: "Cool",
	},
	gmaxcuddle: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Cuddle",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Eevee",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('attract');
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
		contestType: "Cool",
	},
	gmaxdepletion: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Depletion",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Duraludon",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					let move: Move | ActiveMove | null = pokemon.lastMove;
					if (!move || move.isZ) continue;
					if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);

					const ppDeducted = pokemon.deductPP(move.id, 2);
					if (ppDeducted) {
						this.add("-activate", pokemon, 'move: G-Max Depletion', move.name, ppDeducted);
						// Don't return here because returning early doesn't trigger
						// activation text for the second Pokemon in doubles
					}
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Dragon",
		contestType: "Cool",
	},
	gmaxdrumsolo: {
		num: 1000,
		accuracy: true,
		basePower: 160,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Drum Solo",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Rillaboom",
		ignoreAbility: true,
		secondary: null,
		target: "adjacentFoe",
		type: "Grass",
		contestType: "Cool",
	},
	gmaxfinale: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Finale",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Alcremie",
		self: {
			onHit(target, source, move) {
				for (const pokemon of source.alliesAndSelf()) {
					this.heal(pokemon.maxhp / 6, pokemon, source, move);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fairy",
		contestType: "Cool",
	},
	gmaxfireball: {
		num: 1000,
		accuracy: true,
		basePower: 160,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Fireball",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Cinderace",
		ignoreAbility: true,
		secondary: null,
		target: "adjacentFoe",
		type: "Fire",
		contestType: "Cool",
	},
	gmaxfoamburst: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Foam Burst",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Kingler",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					this.boost({spe: -2}, pokemon);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	gmaxgoldrush: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Gold Rush",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Meowth",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('confusion');
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
		contestType: "Cool",
	},
	gmaxgravitas: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Gravitas",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Orbeetle",
		self: {
			pseudoWeather: 'gravity',
		},
		target: "adjacentFoe",
		type: "Psychic",
		contestType: "Cool",
	},
	gmaxhydrosnipe: {
		num: 1000,
		accuracy: true,
		basePower: 160,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Hydrosnipe",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Inteleon",
		ignoreAbility: true,
		secondary: null,
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	gmaxmalodor: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Malodor",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Garbodor",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.trySetStatus('psn', source);
				}
			},
		},
		target: "adjacentFoe",
		type: "Poison",
		contestType: "Cool",
	},
	gmaxmeltdown: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Meltdown",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Melmetal",
		self: {
			onHit(source, target, effect) {
				for (const pokemon of source.foes()) {
					if (!pokemon.volatiles['dynamax']) pokemon.addVolatile('torment', source, effect);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Steel",
		contestType: "Cool",
	},
	gmaxoneblow: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max One Blow",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Urshifu",
		secondary: null,
		target: "adjacentFoe",
		type: "Dark",
		contestType: "Cool",
	},
	gmaxrapidflow: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Rapid Flow",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Urshifu-Rapid-Strike",
		secondary: null,
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	gmaxreplenish: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Replenish",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Snorlax",
		self: {
			onHit(source) {
				if (this.random(2) === 0) return;
				for (const pokemon of source.alliesAndSelf()) {
					if (pokemon.item) continue;

					if (pokemon.lastItem && this.dex.items.get(pokemon.lastItem).isBerry) {
						const item = pokemon.lastItem;
						pokemon.lastItem = '';
						this.add('-item', pokemon, this.dex.items.get(item), '[from] move: G-Max Replenish');
						pokemon.setItem(item);
					}
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
		contestType: "Cool",
	},
	gmaxresonance: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Resonance",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Lapras",
		self: {
			sideCondition: 'auroraveil',
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Ice",
		contestType: "Cool",
	},
	gmaxsandblast: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Sandblast",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Sandaconda",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('partiallytrapped', source, this.dex.getActiveMove('G-Max Sandblast'));
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Ground",
		contestType: "Cool",
	},
	gmaxsmite: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Smite",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Hatterene",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('confusion', source);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fairy",
		contestType: "Cool",
	},
	gmaxsnooze: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Snooze",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Grimmsnarl",
		onHit(target) {
			if (target.status || !target.runStatusImmunity('slp')) return;
			if (this.random(2) === 0) return;
			target.addVolatile('yawn');
		},
		onAfterSubDamage(damage, target) {
			if (target.status || !target.runStatusImmunity('slp')) return;
			if (this.random(2) === 0) return;
			target.addVolatile('yawn');
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Dark",
		contestType: "Cool",
	},
	gmaxsteelsurge: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Steelsurge",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Copperajah",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxsteelsurge');
				}
			},
		},
		condition: {
			onSideStart(side) {
				this.add('-sidestart', side, 'move: G-Max Steelsurge');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				// Ice Face and Disguise correctly get typed damage from Stealth Rock
				// because Stealth Rock bypasses Substitute.
				// They don't get typed damage from Steelsurge because Steelsurge doesn't,
				// so we're going to test the damage of a Steel-type Stealth Rock instead.
				const steelHazard = this.dex.getActiveMove('Stealth Rock');
				steelHazard.type = 'Steel';
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(steelHazard), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Steel",
		contestType: "Cool",
	},
	gmaxstonesurge: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Stonesurge",
		pp: 5,
		priority: 0,
		flags: {},
		isMax: "Drednaw",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('stealthrock');
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	gmaxstunshock: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Stun Shock",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Toxtricity",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					const result = this.random(2);
					if (result === 0) {
						pokemon.trySetStatus('par', source);
					} else {
						pokemon.trySetStatus('psn', source);
					}
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Electric",
		contestType: "Cool",
	},
	gmaxsweetness: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Sweetness",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Appletun",
		self: {
			onHit(source) {
				for (const ally of source.side.pokemon) {
					ally.cureStatus();
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Grass",
		contestType: "Cool",
	},
	gmaxtartness: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Tartness",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Flapple",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					this.boost({evasion: -1}, pokemon);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Grass",
		contestType: "Cool",
	},
	gmaxterror: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Terror",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Gengar",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.addVolatile('trapped', source, null, 'trapper');
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Ghost",
		contestType: "Cool",
	},
	gmaxvinelash: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Vine Lash",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Venusaur",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxvinelash');
				}
			},
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'G-Max Vine Lash');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(target) {
				if (!target.hasType('Grass')) this.damage(target.baseMaxhp / 6, target);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 11,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'G-Max Vine Lash');
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Grass",
		contestType: "Cool",
	},
	gmaxvolcalith: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Volcalith",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Coalossal",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxvolcalith');
				}
			},
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'G-Max Volcalith');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(target) {
				if (!target.hasType('Rock')) this.damage(target.baseMaxhp / 6, target);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 11,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'G-Max Volcalith');
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Rock",
		contestType: "Cool",
	},
	gmaxvoltcrash: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Volt Crash",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Pikachu",
		self: {
			onHit(source) {
				for (const pokemon of source.foes()) {
					pokemon.trySetStatus('par', source);
				}
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Electric",
		contestType: "Cool",
	},
	gmaxwildfire: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Wildfire",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Charizard",
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxwildfire');
				}
			},
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'G-Max Wildfire');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(target) {
				if (!target.hasType('Fire')) this.damage(target.baseMaxhp / 6, target);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 11,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'G-Max Wildfire');
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fire",
		contestType: "Cool",
	},
	gmaxwindrage: {
		num: 1000,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Gigantamax",
		name: "G-Max Wind Rage",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: "Corviknight",
		self: {
			onHit(source) {
				let success = false;
				const removeTarget = [
					'reflect', 'lightscreen', 'auroraveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'luckyroll', 
					'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'
				];
				const removeAll = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
				for (const targetCondition of removeTarget) {
					if (source.side.foe.removeSideCondition(targetCondition)) {
						if (!removeAll.includes(targetCondition)) continue;
						this.add('-sideend', source.side.foe, this.dex.conditions.get(targetCondition).name, '[from] move: G-Max Wind Rage', '[of] ' + source);
						success = true;
					}
				}
				for (const sideCondition of removeAll) {
					if (source.side.removeSideCondition(sideCondition)) {
						this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: G-Max Wind Rage', '[of] ' + source);
						success = true;
					}
				}
				this.field.clearTerrain();
				return success;
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Flying",
		contestType: "Cool",
	},
	grassknot: {
		num: 447,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			let bp;
			if (targetWeight >= 2000) {
				bp = 120;
			} else if (targetWeight >= 1000) {
				bp = 100;
			} else if (targetWeight >= 500) {
				bp = 80;
			} else if (targetWeight >= 250) {
				bp = 60;
			} else if (targetWeight >= 100) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Grass Knot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryHit(target, source, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', source, 'move: Grass Knot', '[from] Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	grasspledge: {
		num: 520,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['waterpledge', 'firepledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		name: "Grass Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue.list as MoveAction[]) {
				if (
					!action.move || !action.pokemon?.isActive ||
					action.pokemon.fainted || action.maxMove || action.zmove
				) {
					continue;
				}
				if (action.pokemon.isAlly(source) && ['waterpledge', 'firepledge'].includes(action.move.id)) {
					this.queue.prioritizeAction(action, move);
					this.add('-waiting', source, action.pokemon);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'waterpledge') {
				move.type = 'Grass';
				move.forceSTAB = true;
				move.sideCondition = 'grasspledge';
			}
			if (move.sourceEffect === 'firepledge') {
				move.type = 'Fire';
				move.forceSTAB = true;
				move.sideCondition = 'firepledge';
			}
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'Grass Pledge');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 9,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'Grass Pledge');
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(0.25);
			},
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Beautiful",
	},
	grasswhistle: {
		num: 320,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Grass Whistle",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	grassyglide: {
		num: 803,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Grassy Glide",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1},
		onModifyPriority(priority, source, target, move) {
			if (this.field.isTerrain('grassyterrain') && source.isGrounded()) {
				return priority + 1;
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	grassyterrain: {
		num: 580,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Grassy Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'grassyterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				const weakenedMoves = ['earthquake', 'bulldoze', 'magnitude'];
				if (weakenedMoves.includes(move.id) && defender.isGrounded() && !defender.isSemiInvulnerable()) {
					this.debug('move weakened by grassy terrain');
					return this.chainModify(0.5);
				}
				if (move.type === 'Grass' && attacker.isGrounded()) {
					this.debug('grassy terrain boost');
					return this.chainModify([5325, 4096]);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Grassy Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Grassy Terrain');
				}
			},
			onResidualOrder: 5,
			onResidualSubOrder: 2,
			onResidual(pokemon) {
				if (pokemon.isGrounded() && !pokemon.isSemiInvulnerable()) {
					this.heal(pokemon.baseMaxhp / 16, pokemon, pokemon);
				} else {
					this.debug(`Pokemon semi-invuln or not grounded; Grassy Terrain skipped`);
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Grassy Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Grass",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
	},
	gravapple: {
		num: 788,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Grav Apple",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower) {
			if (this.field.getPseudoWeather('gravity')) {
				return this.chainModify(1.5);
			}
		},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Grass",
	},
	gravity: {
		num: 356,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gravity",
		pp: 5,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'gravity',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', '[move] Gravity');
					return 7;
				}
				return 5;
			},
			onFieldStart(target, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-fieldstart', 'move: Gravity', '[persistent]');
				} else {
					this.add('-fieldstart', 'move: Gravity');
				}
				for (const pokemon of this.getAllActive()) {
					let applies = false;
					if (pokemon.removeVolatile('bounce') || pokemon.removeVolatile('fly')) {
						applies = true;
						this.queue.cancelMove(pokemon);
						pokemon.removeVolatile('twoturnmove');
					}
					if (pokemon.volatiles['skydrop']) {
						applies = true;
						this.queue.cancelMove(pokemon);

						if (pokemon.volatiles['skydrop'].source) {
							this.add('-end', pokemon.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
						}
						pokemon.removeVolatile('skydrop');
						pokemon.removeVolatile('twoturnmove');
					}
					if (pokemon.volatiles['magnetrise']) {
						applies = true;
						delete pokemon.volatiles['magnetrise'];
					}
					if (pokemon.volatiles['telekinesis']) {
						applies = true;
						delete pokemon.volatiles['telekinesis'];
					}
					if (applies) this.add('-activate', pokemon, 'move: Gravity');
				}
			},
			onModifyAccuracy(accuracy) {
				if (typeof accuracy !== 'number') return;
				return this.chainModify([6840, 4096]);
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.dex.moves.get(moveSlot.id).flags['gravity']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (move.flags['gravity'] && !move.isZ) {
					this.add('cant', pokemon, 'move: Gravity', move);
					return false;
				}
			},
			onModifyMove(move, pokemon, target) {
				if (move.flags['gravity'] && !move.isZ) {
					this.add('cant', pokemon, 'move: Gravity', move);
					return false;
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 2,
			onFieldEnd() {
				this.add('-fieldend', 'move: Gravity');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	growl: {
		num: 45,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Growl",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	growth: {
		num: 74,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Growth",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onModifyMove(move, pokemon) {
			if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) move.boosts = {atk: 2, spa: 2};
		},
		boosts: {
			atk: 1,
			spa: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Beautiful",
	},
	grudge: {
		num: 288,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Grudge",
		pp: 5,
		priority: 0,
		flags: {bypasssub: 1},
		volatileStatus: 'grudge',
		condition: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Grudge');
			},
			onFaint(target, source, effect) {
				if (!source || source.fainted || !effect) return;
				if (effect.effectType === 'Move' && !effect.isFutureMove && source.lastMove) {
					let move: Move = source.lastMove;
					if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);

					for (const moveSlot of source.moveSlots) {
						if (moveSlot.id === move.id) {
							moveSlot.pp = 0;
							this.add('-activate', source, 'move: Grudge', move.name);
						}
					}
				}
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Grudge before attack');
				pokemon.removeVolatile('grudge');
			},
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		zMove: {effect: 'redirect'},
		contestType: "Tough",
	},
	guardianofalola: {
		num: 698,
		accuracy: true,
		basePower: 0,
		damageCallback(pokemon, target) {
			const hp75 = Math.floor(target.getUndynamaxedHP() * 3 / 4);
			if (
				target.volatiles['protect'] || target.volatiles['banefulbunker'] || target.volatiles['kingsshield'] ||
				target.volatiles['spikyshield'] || target.side.getSideCondition('matblock')
			) {
				this.add('-zbroken', target);
				return this.clampIntRange(Math.ceil(hp75 / 4 - 0.5), 1);
			}
			return this.clampIntRange(hp75, 1);
		},
		category: "Special",
		isNonstandard: "Past",
		name: "Guardian of Alola",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "tapuniumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Tough",
	},
	guardsplit: {
		num: 470,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Guard Split",
		pp: 10,
		priority: 0,
		flags: {protect: 1, allyanim: 1},
		onHit(target, source) {
			const newdef = Math.floor((target.storedStats.def + source.storedStats.def) / 2);
			target.storedStats.def = newdef;
			source.storedStats.def = newdef;
			const newspd = Math.floor((target.storedStats.spd + source.storedStats.spd) / 2);
			target.storedStats.spd = newspd;
			source.storedStats.spd = newspd;
			this.add('-activate', source, 'move: Guard Split', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	guardswap: {
		num: 385,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Guard Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const targetBoosts: SparseBoostsTable = {};
			const sourceBoosts: SparseBoostsTable = {};

			const defSpd: BoostID[] = ['def', 'spd'];
			for (const stat of defSpd) {
				targetBoosts[stat] = target.boosts[stat];
				sourceBoosts[stat] = source.boosts[stat];
			}

			source.setBoost(targetBoosts);
			target.setBoost(sourceBoosts);

			this.add('-swapboost', source, target, 'def, spd', '[from] move: Guard Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	guillotine: {
		num: 12,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		name: "Guillotine",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	gunkshot: {
		num: 441,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Gunk Shot",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	gust: {
		num: 16,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Gust",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1, wind: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Clever",
	},
	gyroball: {
		num: 360,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let power = Math.floor(25 * target.getStat('spe') / pokemon.getStat('spe')) + 1;
			if (!isFinite(power)) power = 1;
			if (power > 150) power = 150;
			this.debug('BP: ' + power);
			return power;
		},
		category: "Physical",
		name: "Gyro Ball",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	hail: {
		num: 258,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Hail",
		pp: 10,
		priority: 0,
		flags: {},
		weather: 'hail',
		secondary: null,
		target: "all",
		type: "Ice",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	hammerarm: {
		num: 359,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Hammer Arm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		self: {
			boosts: {
				spe: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	happyhour: {
		num: 603,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Happy Hour",
		pp: 30,
		priority: 0,
		flags: {},
		onTryHit(target, source) {
			this.add('-activate', target, 'move: Happy Hour');
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Cute",
	},
	harden: {
		num: 106,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Harden",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	haze: {
		num: 114,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Haze",
		pp: 30,
		priority: 0,
		flags: {bypasssub: 1},
		onHitField() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "all",
		type: "Ice",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
	},
	headbutt: {
		num: 29,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Headbutt",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	headcharge: {
		num: 543,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		isNonstandard: "Past",
		name: "Head Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	headlongrush: {
		num: 838,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Headlong Rush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Ground",
	},
	headsmash: {
		num: 457,
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		name: "Head Smash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	healbell: {
		num: 215,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Heal Bell",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, sound: 1, distance: 1, bypasssub: 1},
		onHit(target, source) {
			this.add('-activate', source, 'move: Heal Bell');
			let success = false;
			const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];
			for (const ally of allies) {
				if (ally !== source && ally.hasAbility(['soundproof', 'cacophony'])) continue;
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		target: "allyTeam",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
	},
	healblock: {
		num: 377,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Heal Block",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'healblock',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', '[move] Heal Block');
					return 7;
				}
				return 5;
			},
			onStart(pokemon, source) {
				this.add('-start', pokemon, 'move: Heal Block');
				source.moveThisTurnResult = true;
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.dex.moves.get(moveSlot.id).flags['heal']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (move.flags['heal'] && !move.isZ && !move.isMax) {
					this.add('cant', pokemon, 'move: Heal Block', move);
					return false;
				}
			},
			onModifyMove(move, pokemon, target) {
				if (move.flags['heal'] && !move.isZ && !move.isMax) {
					this.add('cant', pokemon, 'move: Heal Block', move);
					return false;
				}
			},
			onResidualOrder: 20,
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Heal Block');
			},
			onTryHeal(damage, target, source, effect) {
				if ((effect?.id === 'zpower') || this.effectState.isZ) return damage;
				return false;
			},
			onRestart(target, source) {
				this.add('-fail', target, 'move: Heal Block'); // Succeeds to supress downstream messages
				if (!source.moveThisTurnResult) {
					source.moveThisTurnResult = false;
				}
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Psychic",
		zMove: {boost: {spa: 2}},
		contestType: "Clever",
	},
	healingwish: {
		num: 361,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Healing Wish",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTryHit(source) {
			if (!this.canSwitch(source.side)) {
				this.attrLastMove('[still]');
				this.add('-fail', source);
				return this.NOT_FAIL;
			}
		},
		selfdestruct: "ifHit",
		slotCondition: 'healingwish',
		condition: {
			onSwap(target) {
				if (!target.fainted && (target.hp < target.maxhp || target.status)) {
					target.heal(target.maxhp);
					target.clearStatus();
					this.add('-heal', target, target.getHealth, '[from] move: Healing Wish');
					target.side.removeSlotCondition(target, 'healingwish');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		contestType: "Beautiful",
	},
	healorder: {
		num: 456,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Heal Order",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	healpulse: {
		num: 505,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heal Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, reflectable: 1, distance: 1, heal: 1, allyanim: 1},
		onHit(target, source) {
			let success = false;
			if (source.hasAbility('megalauncher')) {
				success = !!this.heal(this.modify(target.baseMaxhp, 0.75));
			} else {
				success = !!this.heal(Math.ceil(target.baseMaxhp * 0.5));
			}
			if (success && !target.isAlly(source)) {
				target.staleness = 'external';
			}
			if (!success) {
				this.add('-fail', target, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "any",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	heartstamp: {
		num: 531,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Heart Stamp",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		contestType: "Cute",
	},
	heartswap: {
		num: 391,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heart Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const targetBoosts: SparseBoostsTable = {};
			const sourceBoosts: SparseBoostsTable = {};

			let i: BoostID;
			for (i in target.boosts) {
				targetBoosts[i] = target.boosts[i];
				sourceBoosts[i] = source.boosts[i];
			}

			target.setBoost(sourceBoosts);
			source.setBoost(targetBoosts);

			this.add('-swapboost', source, target, '[from] move: Heart Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {effect: 'crit2'},
		contestType: "Clever",
	},
	heatcrash: {
		num: 535,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Heat Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	heatwave: {
		num: 257,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "Heat Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "allAdjacentFoes",
		type: "Fire",
		contestType: "Beautiful",
	},
	heavyslam: {
		num: 484,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Heavy Slam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	helpinghand: {
		num: 270,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Helping Hand",
		pp: 20,
		priority: 5,
		flags: {bypasssub: 1},
		volatileStatus: 'helpinghand',
		onTryHit(target) {
			if (!target.newlySwitched && !this.queue.willMove(target)) return false;
		},
		condition: {
			duration: 1,
			onStart(target, source) {
				this.effectState.multiplier = 1.5;
				this.add('-singleturn', target, 'Helping Hand', '[of] ' + source);
			},
			onRestart(target, source) {
				this.effectState.multiplier *= 1.5;
				this.add('-singleturn', target, 'Helping Hand', '[of] ' + source);
			},
			onBasePowerPriority: 10,
			onBasePower(basePower) {
				this.debug('Boosting from Helping Hand: ' + this.effectState.multiplier);
				return this.chainModify(this.effectState.multiplier);
			},
		},
		secondary: null,
		target: "adjacentAlly",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	hex: {
		num: 506,
		accuracy: 100,
		basePower: 65,
		basePowerCallback(pokemon, target, move) {
			if (target.status || target.hasAbility('comatose')) {
				this.debug('BP doubled from status condition');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		name: "Hex",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMove: {basePower: 160},
		contestType: "Clever",
	},
	hiddenpower: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Past",
		name: "Hidden Power",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			move.type = pokemon.hpType || 'Dark';
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Clever",
	},
	hiddenpowerbug: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Bug",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	hiddenpowerdark: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Dark",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	hiddenpowerdragon: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Dragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Clever",
	},
	hiddenpowerelectric: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Electric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	hiddenpowerfighting: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Fighting",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
	},
	hiddenpowerfire: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Fire",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	hiddenpowerflying: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Flying",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Clever",
	},
	hiddenpowerghost: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	hiddenpowergrass: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Grass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	hiddenpowerground: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Ground",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	hiddenpowerice: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Ice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	hiddenpowerpoison: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Poison",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	hiddenpowerpsychic: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Psychic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	hiddenpowerrock: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Clever",
	},
	hiddenpowersteel: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Steel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Clever",
	},
	hiddenpowerwater: {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		realMove: "Hidden Power",
		isNonstandard: "Past",
		name: "Hidden Power Water",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	highhorsepower: {
		num: 667,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		name: "High Horsepower",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	highjumpkick: {
		num: 136,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "High Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	holdback: {
		num: 610,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Hold Back",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onDamagePriority: -20,
		onDamage(damage, target, source, effect) {
			if (damage >= target.hp) return target.hp - 1;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	holdhands: {
		num: 607,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hold Hands",
		pp: 40,
		priority: 0,
		flags: {bypasssub: 1},
		secondary: null,
		target: "adjacentAlly",
		type: "Normal",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Cute",
	},
	honeclaws: {
		num: 468,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hone Claws",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Dark",
		zMove: {boost: {atk: 1}},
		contestType: "Cute",
	},
	hornattack: {
		num: 30,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Horn Attack",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	horndrill: {
		num: 32,
		accuracy: 30,
		basePower: 0,
		category: "Physical",
		name: "Horn Drill",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	hornleech: {
		num: 532,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Horn Leech",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Tough",
	},
	howl: {
		num: 336,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Howl",
		pp: 40,
		priority: 0,
		flags: {snatch: 1, sound: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "allies",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cool",
	},
	hurricane: {
		num: 542,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Hurricane",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1, wind: 1},
		onModifyMove(move, pokemon, target) {
			switch (target?.effectiveWeather()) {
			case 'raindance':
			case 'primordialsea':
				move.accuracy = true;
				break;
			case 'sunnyday':
			case 'desolateland':
				move.accuracy = 50;
				break;
			}
		},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Flying",
		contestType: "Tough",
	},
	hydrocannon: {
		num: 308,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Hydro Cannon",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	hydropump: {
		num: 56,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Hydro Pump",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	hydrovortex: {
		num: 642,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Hydro Vortex",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "wateriumz",
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	hyperbeam: {
		num: 63,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Hyper Beam",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	hyperdrill: {
		num: 887,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Hyper Drill",
		pp: 5,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Clever",
	},
	hyperfang: {
		num: 158,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Past",
		name: "Hyper Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	hyperspacefury: {
		num: 621,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Hyperspace Fury",
		pp: 5,
		priority: 0,
		flags: {mirror: 1, bypasssub: 1},
		breaksProtect: true,
		onTry(source) {
			if (source.species.name === 'Hoopa-Unbound') {
				return;
			}
			this.hint("Only a Pokemon whose form is Hoopa Unbound can use this move.");
			if (source.species.name === 'Hoopa') {
				this.attrLastMove('[still]');
				this.add('-fail', source, 'move: Hyperspace Fury', '[forme]');
				return null;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Hyperspace Fury');
			return null;
		},
		self: {
			boosts: {
				def: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	hyperspacehole: {
		num: 593,
		accuracy: true,
		basePower: 80,
		category: "Special",
		name: "Hyperspace Hole",
		pp: 5,
		priority: 0,
		flags: {mirror: 1, bypasssub: 1},
		breaksProtect: true,
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	hypervoice: {
		num: 304,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Hyper Voice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		contestType: "Cool",
	},
	hypnosis: {
		num: 95,
		accuracy: 60,
		basePower: 0,
		category: "Status",
		name: "Hypnosis",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	iceball: {
		num: 301,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const iceballData = pokemon.volatiles['iceball'];
			if (iceballData?.hitCount) {
				bp *= Math.pow(2, iceballData.contactHitCount);
			}
			if (iceballData && pokemon.status !== 'slp') {
				iceballData.hitCount++;
				iceballData.contactHitCount++;
				if (iceballData.hitCount < 5) {
					iceballData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Ice Ball",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['iceball'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('iceball');
			// @ts-ignore
			// TS thinks pokemon.volatiles['iceball'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['iceball'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const iceballData = source.volatiles["iceball"];
			if (
				iceballData &&
				iceballData.hitCount === 5 &&
				iceballData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
				iceballData.contactHitCount;
			}
		},

		condition: {
			duration: 1,
			onLockMove: 'iceball',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['iceball'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	icebeam: {
		num: 58,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Ice Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	iceburn: {
		num: 554,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		isNonstandard: "Past",
		name: "Ice Burn",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	icefang: {
		num: 423,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Ice Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'frz',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Ice",
		contestType: "Cool",
	},
	icehammer: {
		num: 665,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Ice Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		self: {
			boosts: {
				spe: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Tough",
	},
	icepunch: {
		num: 8,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Ice Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	iceshard: {
		num: 420,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Ice Shard",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	icespinner: {
		num: 861,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Ice Spinner",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit() {
			this.field.clearTerrain();
		},
		onAfterSubDamage() {
			this.field.clearTerrain();
		},
		secondary: null,
		target: "normal",
		type: "Ice",
	},
	iciclecrash: {
		num: 556,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Icicle Crash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
	},
	iciclespear: {
		num: 333,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Icicle Spear",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Ice",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Beautiful",
	},
	icywind: {
		num: 196,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Icy Wind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Beautiful",
	},
	imprison: {
		num: 286,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Imprison",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bypasssub: 1},
		volatileStatus: 'imprison',
		condition: {
			noCopy: true,
			onStart(target) {
				this.add('-start', target, 'move: Imprison');
			},
			onFoeDisableMove(pokemon) {
				for (const moveSlot of this.effectState.source.moveSlots) {
					if (moveSlot.id === 'struggle') continue;
					pokemon.disableMove(moveSlot.id, 'hidden');
				}
				pokemon.maybeDisabled = true;
			},
			onFoeBeforeMovePriority: 4,
			onFoeBeforeMove(attacker, defender, move) {
				if (move.id !== 'struggle' && this.effectState.source.hasMove(move.id) && !move.isZ && !move.isMax) {
					this.add('cant', attacker, 'move: Imprison', move);
					return false;
				}
			},
		},
		secondary: null,
		pressureTarget: "foeSide",
		target: "self",
		type: "Psychic",
		zMove: {boost: {spd: 2}},
		contestType: "Clever",
	},
	incinerate: {
		num: 510,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Incinerate",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(pokemon, source) {
			const item = pokemon.getItem();
			if ((item.isBerry || item.isGem) && pokemon.takeItem(source)) {
				this.add('-enditem', pokemon, item.name, '[from] move: Incinerate');
			}
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		contestType: "Tough",
	},
	infernalparade: {
		num: 844,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			if (target.status || target.hasAbility('comatose')) return move.basePower * 2;
			return move.basePower;
		},
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Infernal Parade",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Ghost",
	},
	inferno: {
		num: 517,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Inferno",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	infernooverdrive: {
		num: 640,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Inferno Overdrive",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "firiumz",
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Cool",
	},
	infestation: {
		num: 611,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Infestation",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	ingrain: {
		num: 275,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ingrain",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		volatileStatus: 'ingrain',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'move: Ingrain');
			},
			onResidualOrder: 7,
			onResidual(pokemon) {
				this.heal(pokemon.baseMaxhp / 16);
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
			onDragOut(pokemon) {
				this.add('-activate', pokemon, 'move: Ingrain');
				return null;
			},
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	instruct: {
		num: 689,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Instruct",
		pp: 15,
		priority: 0,
		flags: {protect: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			if (!target.lastMove || target.volatiles['dynamax']) return false;
			const lastMove = target.lastMove;
			const moveIndex = target.moves.indexOf(lastMove.id);
			const noInstruct = [
				'assist', 'beakblast', 'belch', 'bide', 'celebrate', 'copycat', 'dynamaxcannon', 'focuspunch', 'iceball', 'instruct', 'kingsshield', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'obstruct', 'outrage', 'petaldance', 'rollout', 'shelltrap', 'sketch', 'sleeptalk', 'struggle', 'thrash', 'transform', 'uproar',
			];
			if (
				noInstruct.includes(lastMove.id) || lastMove.isZ || lastMove.isMax ||
				lastMove.flags['charge'] || lastMove.flags['recharge'] ||
				target.volatiles['beakblast'] || target.volatiles['focuspunch'] || target.volatiles['shelltrap'] ||
				(target.moveSlots[moveIndex] && target.moveSlots[moveIndex].pp <= 0)
			) {
				return false;
			}
			this.add('-singleturn', target, 'move: Instruct', '[of] ' + source);
			this.queue.prioritizeAction(this.queue.resolveAction({
				choice: 'move',
				pokemon: target,
				moveid: target.lastMove.id,
				targetLoc: target.lastMoveTargetLoc!,
			})[0] as MoveAction);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	iondeluge: {
		num: 569,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Ion Deluge",
		pp: 25,
		priority: 1,
		flags: {},
		pseudoWeather: 'iondeluge',
		condition: {
			duration: 1,
			onFieldStart(target, source, sourceEffect) {
				this.add('-fieldactivate', 'move: Ion Deluge');
				this.hint(`Normal-type moves become Electric-type after using ${sourceEffect}.`);
			},
			onModifyTypePriority: -2,
			onModifyType(move) {
				if (move.type === 'Normal') {
					move.type = 'Electric';
					this.debug(move.name + "'s type changed to Electric");
				}
			},
		},
		secondary: null,
		target: "all",
		type: "Electric",
		zMove: {boost: {spa: 1}},
		contestType: "Beautiful",
	},
	irondefense: {
		num: 334,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Iron Defense",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	ironhead: {
		num: 442,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Iron Head",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		contestType: "Tough",
	},
	irontail: {
		num: 231,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "Iron Tail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	jawlock: {
		num: 746,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Jaw Lock",
		pp: 10,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		onHit(target, source, move) {
			source.addVolatile('trapped', target, move, 'trapper');
			target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	jetpunch: {
		num: 857,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Jet Punch",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		hasSheerForce: true,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	judgment: {
		num: 449,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Judgment",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			const item = pokemon.getItem();
			if (item.id && item.onPlate && !item.zMove) {
				move.type = item.onPlate;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	jumpkick: {
		num: 26,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	junglehealing: {
		num: 816,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Jungle Healing",
		pp: 10,
		priority: 0,
		flags: {heal: 1, bypasssub: 1, allyanim: 1},
		onHit(pokemon) {
			const success = !!this.heal(this.modify(pokemon.maxhp, 0.25));
			return pokemon.cureStatus() || success;
		},
		secondary: null,
		target: "allies",
		type: "Grass",
	},
	karatechop: {
		num: 2,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		isNonstandard: "Past",
		name: "Karate Chop",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	kinesis: {
		num: 134,
		accuracy: 80,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Kinesis",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {evasion: 1}},
		contestType: "Clever",
	},
	kingsshield: {
		num: 588,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "King's Shield",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'kingsshield',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect'] || move.category === 'Status') {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					this.boost({atk: -1}, source, target, this.dex.getActiveMove("King's Shield"));
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					this.boost({atk: -1}, source, target, this.dex.getActiveMove("King's Shield"));
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	knockoff: {
		num: 282,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Knock Off",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Knock Off', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	kowtowcleave: {
		num: 869,
		accuracy: true,
		basePower: 85,
		category: "Physical",
		name: "Kowtow Cleave",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	landswrath: {
		num: 616,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Land's Wrath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		zMove: {basePower: 185},
		contestType: "Beautiful",
	},
	laserfocus: {
		num: 673,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Laser Focus",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'laserfocus',
		condition: {
			duration: 2,
			onStart(pokemon, source, effect) {
				if (effect && (['costar', 'imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', pokemon, 'move: Laser Focus', '[silent]');
				} else {
					this.add('-start', pokemon, 'move: Laser Focus');
				}
			},
			onRestart(pokemon) {
				this.effectState.duration = 2;
				this.add('-start', pokemon, 'move: Laser Focus');
			},
			onModifyCritRatio(critRatio) {
				return 5;
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Laser Focus', '[silent]');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cool",
	},
	lashout: {
		num: 808,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Lash Out",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source) {
			if (source.statsLoweredThisTurn) {
				this.debug('lashout buff');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	lastresort: {
		num: 387,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Last Resort",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (source.moveSlots.length < 2) return false; // Last Resort fails unless the user knows at least 2 moves
			let hasLastResort = false; // User must actually have Last Resort for it to succeed
			for (const moveSlot of source.moveSlots) {
				if (moveSlot.id === 'lastresort') {
					hasLastResort = true;
					continue;
				}
				if (!moveSlot.used) return false;
			}
			return hasLastResort;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	lastrespects: {
		num: 854,
		accuracy: 100,
		basePower: 50,
		basePowerCallback(pokemon, target, move) {
			return 50 + 50 * pokemon.side.totalFainted;
		},
		category: "Physical",
		name: "Last Respects",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	lavaplume: {
		num: 436,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Lava Plume",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "allAdjacent",
		type: "Fire",
		contestType: "Tough",
	},
	leafage: {
		num: 670,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Leafage",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Tough",
	},
	leafblade: {
		num: 348,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Leaf Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	leafstorm: {
		num: 437,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Leaf Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Beautiful",
	},
	leaftornado: {
		num: 536,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Leaf Tornado",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	leechlife: {
		num: 141,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Leech Life",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	leechseed: {
		num: 73,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Leech Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'leechseed',
		condition: {
			onStart(target) {
				this.add('-start', target, 'move: Leech Seed');
			},
			onResidualOrder: 8,
			onResidual(pokemon) {
				const target = this.getAtSlot(pokemon.volatiles['leechseed'].sourceSlot);
				if (!target || target.fainted || target.hp <= 0) {
					this.debug('Nothing to leech into');
					return;
				}
				const damage = this.damage(pokemon.baseMaxhp / 8, pokemon, target);
				if (damage) {
					this.heal(damage, target, pokemon);
				}
			},
		},
		onTryImmunity(target) {
			return !target.hasType('Grass');
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	leer: {
		num: 43,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Leer",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			def: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cool",
	},
	letssnuggleforever: {
		num: 726,
		accuracy: true,
		basePower: 190,
		category: "Physical",
		isNonstandard: "Past",
		name: "Let's Snuggle Forever",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "mimikiumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Cool",
	},
	lick: {
		num: 122,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Lick",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Ghost",
		contestType: "Cute",
	},
	lifedew: {
		num: 791,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Life Dew",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1, bypasssub: 1},
		heal: [1, 4],
		secondary: null,
		target: "allies",
		type: "Water",
	},
	lightofruin: {
		num: 617,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		isNonstandard: "Past",
		name: "Light of Ruin",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
	},
	lightscreen: {
		num: 113,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Light Screen",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'lightscreen',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('lightclay') || source?.hasAbility('builder')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && this.effectState.target.hasAlly(target) && this.getCategory(move) === 'Special') {
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Light Screen weaken');
						if (this.activePerHalf > 1) return this.chainModify([2732, 4096]);
						return this.chainModify(0.5);
					}
				}
			},
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Light Screen');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 2,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Light Screen');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	lightthatburnsthesky: {
		num: 723,
		accuracy: true,
		basePower: 200,
		category: "Special",
		isNonstandard: "Past",
		name: "Light That Burns the Sky",
		pp: 1,
		priority: 0,
		flags: {},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		isZ: "ultranecroziumz",
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	liquidation: {
		num: 710,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Liquidation",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	lockon: {
		num: 199,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lock-On",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (source.volatiles['lockon']) return false;
		},
		onHit(target, source) {
			source.addVolatile('lockon', target);
			this.add('-activate', source, 'move: Lock-On', '[of] ' + target);
		},
		condition: {
			noCopy: true, // doesn't get copied by Baton Pass
			duration: 2,
			onSourceInvulnerabilityPriority: 1,
			onSourceInvulnerability(target, source, move) {
				if (move && source === this.effectState.target && target === this.effectState.source) return 0;
			},
			onSourceAccuracy(accuracy, target, source, move) {
				if (move && source === this.effectState.target && target === this.effectState.source) return true;
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	lovelykiss: {
		num: 142,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Lovely Kiss",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	lowkick: {
		num: 67,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			let bp;
			if (targetWeight >= 2000) {
				bp = 120;
			} else if (targetWeight >= 1000) {
				bp = 100;
			} else if (targetWeight >= 500) {
				bp = 80;
			} else if (targetWeight >= 250) {
				bp = 60;
			} else if (targetWeight >= 100) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Low Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 160},
		contestType: "Tough",
	},
	lowsweep: {
		num: 490,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Low Sweep",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
	},
	luckychant: {
		num: 381,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Lucky Chant",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'luckychant',
		condition: {
			duration: 5,
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Lucky Chant'); // "The Lucky Chant shielded [side.name]'s team from critical hits!"
			},
			onCriticalHit: false,
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 6,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Lucky Chant'); // "[side.name]'s team's Lucky Chant wore off!"
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMove: {boost: {evasion: 1}},
		contestType: "Cute",
	},
	luminacrash: {
		num: 855,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Lumina Crash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Psychic",
	},
	lunarblessing: {
		num: 849,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Lunar Blessing",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			const success = !!this.heal(this.modify(pokemon.maxhp, 0.25));
			return pokemon.cureStatus() || success;
		},
		secondary: null,
		target: "allies",
		type: "Psychic",
	},
	lunardance: {
		num: 461,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lunar Dance",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1, dance: 1},
		onTryHit(source) {
			if (!this.canSwitch(source.side)) {
				this.attrLastMove('[still]');
				this.add('-fail', source);
				return this.NOT_FAIL;
			}
		},
		selfdestruct: "ifHit",
		slotCondition: 'lunardance',
		condition: {
			onSwap(target) {
				if (
					!target.fainted && (
						target.hp < target.maxhp ||
						target.status ||
						target.moveSlots.some(moveSlot => moveSlot.pp < moveSlot.maxpp)
					)
				) {
					target.heal(target.maxhp);
					target.clearStatus();
					for (const moveSlot of target.moveSlots) {
						moveSlot.pp = moveSlot.maxpp;
					}
					this.add('-heal', target, target.getHealth, '[from] move: Lunar Dance');
					target.side.removeSlotCondition(target, 'lunardance');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		contestType: "Beautiful",
	},
	lunge: {
		num: 679,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Lunge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	lusterpurge: {
		num: 295,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		isNonstandard: "Past",
		name: "Luster Purge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	machpunch: {
		num: 183,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Mach Punch",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	magicalleaf: {
		num: 345,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Magical Leaf",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Beautiful",
	},
	magicaltorque: {
		num: 900,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Magical Torque",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fairy",
	},
	magiccoat: {
		num: 277,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Magic Coat",
		pp: 15,
		priority: 4,
		flags: {},
		volatileStatus: 'magiccoat',
		condition: {
			duration: 1,
			onStart(target, source, effect) {
				this.add('-singleturn', target, 'move: Magic Coat');
				if (effect?.effectType === 'Move') {
					this.effectState.pranksterBoosted = effect.pranksterBoosted;
				}
			},
			onTryHitPriority: 2,
			onTryHit(target, source, move) {
				if (target === source || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				const newMove = this.dex.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = this.effectState.pranksterBoosted;
				this.actions.useMove(newMove, target, source);
				return null;
			},
			onAllyTryHitSide(target, source, move) {
				if (target.isAlly(source) || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				const newMove = this.dex.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = false;
				this.actions.useMove(newMove, this.effectState.target, source);
				return null;
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spd: 2}},
		contestType: "Beautiful",
	},
	magicpowder: {
		num: 750,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Magic Powder",
		pp: 20,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Psychic' || !target.setType('Psychic')) return false;
			this.add('-start', target, 'typechange', 'Psychic');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
	},
	magicroom: {
		num: 478,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magic Room",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'magicroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onFieldStart(target, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-fieldstart', 'move: Magic Room', '[of] ' + source, '[persistent]');
				} else {
					this.add('-fieldstart', 'move: Magic Room', '[of] ' + source);
				}
				for (const mon of this.getAllActive()) {
					this.singleEvent('End', mon.getItem(), mon.itemState, mon);
				}
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('magicroom');
			},
			// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 6,
			onFieldEnd() {
				this.add('-fieldend', 'move: Magic Room', '[of] ' + this.effectState.source);
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	magmastorm: {
		num: 463,
		accuracy: 75,
		basePower: 100,
		category: "Special",
		name: "Magma Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Tough",
	},
	magnetbomb: {
		num: 443,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Magnet Bomb",
		pp: 20,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	magneticflux: {
		num: 602,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magnetic Flux",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, distance: 1, bypasssub: 1},
		onHitSide(side, source, move) {
			const targets = side.allies().filter(ally => (
				ally.hasAbility(['plus', 'minus']) &&
				(!ally.volatiles['maxguard'] || this.runEvent('TryHit', ally, source, move))
			));
			if (!targets.length) return false;

			let didSomething = false;
			for (const target of targets) {
				didSomething = this.boost({def: 1, spd: 1}, target, source, move, false, true) || didSomething;
			}
			return didSomething;
		},
		secondary: null,
		target: "allySide",
		type: "Electric",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	magnetrise: {
		num: 393,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magnet Rise",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, gravity: 1},
		volatileStatus: 'magnetrise',
		onTry(source, target, move) {
			if (target.volatiles['smackdown'] || target.volatiles['ingrain']) return false;

			// Additional Gravity check for Z-move variant
			if (this.field.getPseudoWeather('Gravity')) {
				this.add('cant', source, 'move: Gravity', move);
				return null;
			}
		},
		condition: {
			duration: 5,
			onStart(target) {
				this.add('-start', target, 'Magnet Rise');
			},
			onImmunity(type) {
				if (type === 'Ground') return false;
			},
			onResidualOrder: 18,
			onEnd(target) {
				this.add('-end', target, 'Magnet Rise');
			},
		},
		secondary: null,
		target: "self",
		type: "Electric",
		zMove: {boost: {evasion: 1}},
		contestType: "Clever",
	},
	magnitude: {
		num: 222,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		isNonstandard: "Past",
		name: "Magnitude",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onModifyMove(move, pokemon) {
			const i = this.random(100);
			if (i < 5) {
				move.magnitude = 4;
				move.basePower = 10;
			} else if (i < 15) {
				move.magnitude = 5;
				move.basePower = 30;
			} else if (i < 35) {
				move.magnitude = 6;
				move.basePower = 50;
			} else if (i < 65) {
				move.magnitude = 7;
				move.basePower = 70;
			} else if (i < 85) {
				move.magnitude = 8;
				move.basePower = 90;
			} else if (i < 95) {
				move.magnitude = 9;
				move.basePower = 110;
			} else {
				move.magnitude = 10;
				move.basePower = 150;
			}
		},
		onUseMoveMessage(pokemon, target, move) {
			this.add('-activate', pokemon, 'move: Magnitude', move.magnitude);
		},
		secondary: null,
		target: "allAdjacent",
		type: "Ground",
		zMove: {basePower: 140},
		maxMove: {basePower: 140},
		contestType: "Tough",
	},
	makeitrain: {
		num: 874,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Make It Rain",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -1,
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Steel",
		contestType: "Beautiful",
	},
	maliciousmoonsault: {
		num: 696,
		accuracy: true,
		basePower: 180,
		category: "Physical",
		isNonstandard: "Past",
		name: "Malicious Moonsault",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "inciniumz",
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	matblock: {
		num: 561,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Mat Block",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		stallingMove: true,
		sideCondition: 'matblock',
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Mat Block only works on your first turn out.");
				return false;
			}
			return !!this.queue.willAct();
		},
		condition: {
			duration: 1,
			onSideStart(target, source) {
				this.add('-singleturn', source, 'Mat Block');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move && (move.target === 'self' || move.category === 'Status')) return;
				this.add('-activate', target, 'move: Mat Block', move.name);
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		zMove: {boost: {def: 1}},
		contestType: "Cool",
	},
	maxairstream: {
		num: 766,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Airstream",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.alliesAndSelf()) {
					this.boost({spe: 1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Flying",
		contestType: "Cool",
	},
	maxdarkness: {
		num: 772,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Darkness",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.foes()) {
					this.boost({spd: -1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Dark",
		contestType: "Cool",
	},
	maxflare: {
		num: 757,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Flare",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setWeather('sunnyday');
			},
		},
		target: "adjacentFoe",
		type: "Fire",
		contestType: "Cool",
	},
	maxflutterby: {
		num: 758,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Flutterby",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.foes()) {
					this.boost({spa: -1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Bug",
		contestType: "Cool",
	},
	maxgeyser: {
		num: 765,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Geyser",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setWeather('raindance');
			},
		},
		target: "adjacentFoe",
		type: "Water",
		contestType: "Cool",
	},
	maxguard: {
		num: 743,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Max Guard",
		pp: 10,
		priority: 4,
		flags: {},
		isMax: true,
		stallingMove: true,
		volatileStatus: 'maxguard',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Max Guard');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				const bypassesMaxGuard = [
					'acupressure', 'afteryou', 'allyswitch', 'aromatherapy', 'aromaticmist', 'coaching', 'confide', 'copycat', 'curse', 'decorate', 'doomdesire', 'feint', 'futuresight', 'gmaxoneblow', 'gmaxrapidflow', 'healbell', 'holdhands', 'howl', 'junglehealing', 'lifedew', 'meanlook', 'perishsong', 'playnice', 'powertrick', 'roar', 'roleplay', 'tearfullook',
				];
				if (bypassesMaxGuard.includes(move.id)) return;
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Max Guard');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cool",
	},
	maxhailstorm: {
		num: 763,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Hailstorm",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setWeather('hail');
			},
		},
		target: "adjacentFoe",
		type: "Ice",
		contestType: "Cool",
	},
	maxknuckle: {
		num: 761,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Knuckle",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.alliesAndSelf()) {
					this.boost({atk: 1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Fighting",
		contestType: "Cool",
	},
	maxlightning: {
		num: 759,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Lightning",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setTerrain('electricterrain');
			},
		},
		target: "adjacentFoe",
		type: "Electric",
		contestType: "Cool",
	},
	maxmindstorm: {
		num: 769,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Mindstorm",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setTerrain('psychicterrain');
			},
		},
		target: "adjacentFoe",
		type: "Psychic",
		contestType: "Cool",
	},
	maxooze: {
		num: 764,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Ooze",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.alliesAndSelf()) {
					this.boost({spa: 1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Poison",
		contestType: "Cool",
	},
	maxovergrowth: {
		num: 773,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Overgrowth",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setTerrain('grassyterrain');
			},
		},
		target: "adjacentFoe",
		type: "Grass",
		contestType: "Cool",
	},
	maxphantasm: {
		num: 762,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Phantasm",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.foes()) {
					this.boost({def: -1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Ghost",
		contestType: "Cool",
	},
	maxquake: {
		num: 771,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Quake",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.alliesAndSelf()) {
					this.boost({spd: 1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Ground",
		contestType: "Cool",
	},
	maxrockfall: {
		num: 770,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Rockfall",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setWeather('sandstorm');
			},
		},
		target: "adjacentFoe",
		type: "Rock",
		contestType: "Cool",
	},
	maxstarfall: {
		num: 767,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Starfall",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				this.field.setTerrain('mistyterrain');
			},
		},
		target: "adjacentFoe",
		type: "Fairy",
		contestType: "Cool",
	},
	maxsteelspike: {
		num: 774,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Steelspike",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.alliesAndSelf()) {
					this.boost({def: 1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Steel",
		contestType: "Cool",
	},
	maxstrike: {
		num: 760,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Strike",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.foes()) {
					this.boost({spe: -1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Normal",
		contestType: "Cool",
	},
	maxwyrmwind: {
		num: 768,
		accuracy: true,
		basePower: 10,
		category: "Physical",
		isNonstandard: "Past",
		name: "Max Wyrmwind",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		self: {
			onHit(source) {
				if (!source.volatiles['dynamax']) return;
				for (const pokemon of source.foes()) {
					this.boost({atk: -1}, pokemon);
				}
			},
		},
		target: "adjacentFoe",
		type: "Dragon",
		contestType: "Cool",
	},
	meanlook: {
		num: 212,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mean Look",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	meditate: {
		num: 96,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Meditate",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {atk: 1}},
		contestType: "Beautiful",
	},
	mefirst: {
		num: 382,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Me First",
		pp: 20,
		priority: 0,
		flags: {protect: 1, bypasssub: 1},
		onTryHit(target, pokemon) {
			const action = this.queue.willMove(target);
			if (!action) return false;

			const noMeFirst = [
				'beakblast', 'chatter', 'counter', 'covet', 'focuspunch', 'mefirst', 'metalburst', 'mirrorcoat', 'shelltrap', 'struggle', 'thief',
			];
			const move = this.dex.getActiveMove(action.move.id);
			if (action.zmove || move.isZ || move.isMax) return false;
			if (target.volatiles['mustrecharge']) return false;
			if (move.category === 'Status' || noMeFirst.includes(move.id)) return false;

			pokemon.addVolatile('mefirst');
			this.actions.useMove(move, pokemon, target);
			return null;
		},
		condition: {
			duration: 1,
			onBasePowerPriority: 12,
			onBasePower(basePower) {
				return this.chainModify(1.5);
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Normal",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	megadrain: {
		num: 72,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Mega Drain",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {basePower: 120},
		contestType: "Clever",
	},
	megahorn: {
		num: 224,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Megahorn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	megakick: {
		num: 25,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Mega Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	megapunch: {
		num: 5,
		accuracy: 85,
		basePower: 80,
		category: "Physical",
		name: "Mega Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	memento: {
		num: 262,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Memento",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		boosts: {
			atk: -2,
			spa: -2,
		},
		selfdestruct: "ifHit",
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {effect: 'healreplacement'},
		contestType: "Tough",
	},
	menacingmoonrazemaelstrom: {
		num: 725,
		accuracy: true,
		basePower: 200,
		category: "Special",
		isNonstandard: "Past",
		name: "Menacing Moonraze Maelstrom",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "lunaliumz",
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	metalburst: {
		num: 368,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			const lastDamagedBy = pokemon.getLastDamagedBy(true);
			if (lastDamagedBy !== undefined) {
				return (lastDamagedBy.damage * 1.5) || 1;
			}
			return 0;
		},
		category: "Physical",
		name: "Metal Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTry(source) {
			const lastDamagedBy = source.getLastDamagedBy(true);
			if (lastDamagedBy === undefined || !lastDamagedBy.thisTurn) return false;
		},
		onModifyTarget(targetRelayVar, source, target, move) {
			const lastDamagedBy = source.getLastDamagedBy(true);
			if (lastDamagedBy) {
				targetRelayVar.target = this.getAtSlot(lastDamagedBy.slot);
			}
		},
		secondary: null,
		target: "scripted",
		type: "Steel",
		contestType: "Cool",
	},
	metalclaw: {
		num: 232,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Metal Claw",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	metalsound: {
		num: 319,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Metal Sound",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1, allyanim: 1},
		boosts: {
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	meteorassault: {
		num: 794,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		isNonstandard: "Past",
		name: "Meteor Assault",
		pp: 5,
		priority: 0,
		flags: {protect: 1, recharge: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
	},
	meteorbeam: {
		num: 800,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Meteor Beam",
		pp: 10,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({spa: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Rock",
	},
	meteormash: {
		num: 309,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Meteor Mash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 20,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	metronome: {
		num: 118,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Metronome",
		pp: 10,
		priority: 0,
		flags: {},
		noMetronome: [
			"After You", "Apple Acid", "Armor Cannon", "Assist", "Astral Barrage", "Aura Wheel", "Baneful Bunker", "Beak Blast", "Behemoth Bash", "Behemoth Blade", "Belch", "Bestow", "Blazing Torque", "Body Press", "Branch Poke", "Breaking Swipe", "Celebrate", "Chatter", "Chilling Water", "Chilly Reception", "Clangorous Soul", "Collision Course", "Combat Torque", "Comeuppance", "Copycat", "Counter", "Covet", "Crafty Shield", "Decorate", "Destiny Bond", "Detect", "Diamond Storm", "Doodle", "Double Iron Bash", "Double Shock", "Dragon Ascent", "Dragon Energy", "Drum Beating", "Dynamax Cannon", "Electro Drift", "Endure", "Eternabeam", "False Surrender", "Feint", "Fiery Wrath", "Fillet Away", "Fleur Cannon", "Focus Punch", "Follow Me", "Freeze Shock", "Freezing Glare", "Glacial Lance", "Grav Apple", "Helping Hand", "Hold Hands", "Hyper Drill", "Hyperspace Fury", "Hyperspace Hole", "Ice Burn", "Instruct", "Jet Punch", "Jungle Healing", "King's Shield", "Life Dew", "Light of Ruin", "Magical Torque", "Make It Rain", "Mat Block", "Me First", "Meteor Assault", "Metronome", "Mimic", "Mind Blown", "Mirror Coat", "Mirror Move", "Moongeist Beam", "Nature Power", "Nature's Madness", "Noxious Torque", "Obstruct", "Order Up", "Origin Pulse", "Overdrive", "Photon Geyser", "Plasma Fists", "Population Bomb", "Pounce", "Power Shift", "Precipice Blades", "Protect", "Pyro Ball", "Quash", "Quick Guard", "Rage Fist", "Rage Powder", "Raging Bull", "Raging Fury", "Relic Song", "Revival Blessing", "Ruination", "Salt Cure", "Secret Sword", "Shed Tail", "Shell Trap", "Silk Trap", "Sketch", "Sleep Talk", "Snap Trap", "Snarl", "Snatch", "Snore", "Snowscape", "Spectral Thief", "Spicy Extract", "Spiky Shield", "Spirit Break", "Spotlight", "Springtide Storm", "Steam Eruption", "Steel Beam", "Strange Steam", "Struggle", "Sunsteel Strike", "Surging Strikes", "Switcheroo", "Techno Blast", "Thief", "Thousand Arrows", "Thousand Waves", "Thunder Cage", "Thunderous Kick", "Tidy Up", "Trailblaze", "Transform", "Trick", "Twin Beam", "V-create", "Wicked Blow", "Wicked Torque", "Wide Guard",
		],
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				!effect.noMetronome!.includes(move.name)
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cute",
	},
	milkdrink: {
		num: 208,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Milk Drink",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	mimic: {
		num: 102,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mimic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const disallowedMoves = [
				'behemothbash', 'behemothblade', 'chatter', 'dynamaxcannon', 'mimic', 'sketch', 'struggle', 'transform',
			];
			const move = target.lastMove;
			if (source.transformed || !move || disallowedMoves.includes(move.id) || source.moves.includes(move.id)) {
				return false;
			}
			if (move.isZ || move.isMax) return false;
			const mimicIndex = source.moves.indexOf('mimic');
			if (mimicIndex < 0) return false;

			source.moveSlots[mimicIndex] = {
				move: move.name,
				id: move.id,
				pp: move.pp,
				maxpp: move.pp,
				target: move.target,
				disabled: false,
				used: false,
				virtual: true,
			};
			this.add('-start', source, 'Mimic', move.name);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cute",
	},
	mindblown: {
		num: 720,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		isNonstandard: "Past",
		name: "Mind Blown",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		mindBlownRecoil: true,
		onAfterMove(pokemon, target, move) {
			if (move.mindBlownRecoil && !move.multihit) {
				const hpBeforeRecoil = pokemon.hp;
				this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get('Mind Blown'), true);
				if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {
					this.runEvent('EmergencyExit', pokemon, pokemon);
				}
			}
		},
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		contestType: "Cool",
	},
	mindreader: {
		num: 170,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Mind Reader",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source) {
			if (source.volatiles['lockon']) return false;
		},
		onHit(target, source) {
			source.addVolatile('lockon', target);
			this.add('-activate', source, 'move: Mind Reader', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	minimize: {
		num: 107,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Minimize",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'minimize',
		condition: {
			noCopy: true,
			onRestart: () => null,
			onSourceModifyDamage(damage, source, target, move) {
				const boostedMoves = [
					'stomp', 'steamroller', 'bodyslam', 'flyingpress', 'dragonrush', 'heatcrash', 'heavyslam', 'maliciousmoonsault',
				];
				if (boostedMoves.includes(move.id)) {
					return this.chainModify(2);
				}
			},
			onAccuracy(accuracy, target, source, move) {
				const boostedMoves = [
					'stomp', 'steamroller', 'bodyslam', 'flyingpress', 'dragonrush', 'heatcrash', 'heavyslam', 'maliciousmoonsault',
				];
				if (boostedMoves.includes(move.id)) {
					return true;
				}
				return accuracy;
			},
		},
		boosts: {
			evasion: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	miracleeye: {
		num: 357,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Miracle Eye",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'miracleeye',
		onTryHit(target) {
			if (target.volatiles['foresight']) return false;
		},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Miracle Eye');
			},
			onNegateImmunity(pokemon, type) {
				if (pokemon.hasType('Dark') && type === 'Psychic') return false;
			},
			onModifyBoost(boosts) {
				if (boosts.evasion && boosts.evasion > 0) {
					boosts.evasion = 0;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	mirrorcoat: {
		num: 243,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			if (!pokemon.volatiles['mirrorcoat']) return 0;
			return pokemon.volatiles['mirrorcoat'].damage || 1;
		},
		category: "Special",
		name: "Mirror Coat",
		pp: 20,
		priority: -5,
		flags: {protect: 1},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('mirrorcoat');
		},
		onTry(source) {
			if (!source.volatiles['mirrorcoat']) return false;
			if (source.volatiles['mirrorcoat'].slot === null) return false;
		},
		condition: {
			duration: 1,
			noCopy: true,
			onStart(target, source, move) {
				this.effectState.slot = null;
				this.effectState.damage = 0;
			},
			onRedirectTargetPriority: -1,
			onRedirectTarget(target, source, source2, move) {
				if (move.id !== 'mirrorcoat') return;
				if (source !== this.effectState.target || !this.effectState.slot) return;
				return this.getAtSlot(this.effectState.slot);
			},
			onDamagingHit(damage, target, source, move) {
				if (!source.isAlly(target) && this.getCategory(move) === 'Special') {
					this.effectState.slot = source.getSlot();
					this.effectState.damage = 2 * damage;
				}
			},
		},
		secondary: null,
		target: "scripted",
		type: "Psychic",
		contestType: "Beautiful",
	},
	mirrormove: {
		num: 119,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Mirror Move",
		pp: 20,
		priority: 0,
		flags: {},
		onTryHit(target, pokemon) {
			const move = target.lastMove;
			if (!move?.flags['mirror'] || move.isZ || move.isMax) {
				return false;
			}
			this.actions.useMove(move.id, pokemon, target);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		zMove: {boost: {atk: 2}},
		contestType: "Clever",
	},
	mirrorshot: {
		num: 429,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Mirror Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
	},
	mist: {
		num: 54,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mist",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'mist',
		condition: {
			duration: 5,
			onBoost(boost, target, source, effect) {
				if (effect.effectType === 'Move' && effect.infiltrates && !target.isAlly(source)) return;
				if (source && target !== source) {
					let showMsg = false;
					let i: BoostID;
					for (i in boost) {
						if (boost[i]! < 0) {
							delete boost[i];
							showMsg = true;
						}
					}
					if (showMsg && !(effect as ActiveMove).secondaries) {
						this.add('-activate', target, 'move: Mist');
					}
				}
			},
			onSideStart(side) {
				this.add('-sidestart', side, 'Mist');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 4,
			onSideEnd(side) {
				this.add('-sideend', side, 'Mist');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Ice",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
	},
	mistball: {
		num: 296,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		isNonstandard: "Past",
		name: "Mist Ball",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	mistyexplosion: {
		num: 802,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Misty Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		onBasePower(basePower, source) {
			if (this.field.isTerrain('mistyterrain') && source.isGrounded()) {
				this.debug('misty terrain boost');
				return this.chainModify(1.5);
			}
		},
		secondary: null,
		target: "allAdjacent",
		type: "Fairy",
	},
	mistyterrain: {
		num: 581,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Misty Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'mistyterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (effect && ((effect as Move).status || effect.id === 'yawn')) {
					this.add('-activate', target, 'move: Misty Terrain');
				}
				return false;
			},
			onTryAddVolatile(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'confusion') {
					if (effect.effectType === 'Move' && !effect.secondaries) this.add('-activate', target, 'move: Misty Terrain');
					return null;
				}
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Dragon' && defender.isGrounded() && !defender.isSemiInvulnerable()) {
					this.debug('misty terrain weaken');
					return this.chainModify(0.5);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Misty Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Misty Terrain');
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'Misty Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Fairy",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	moonblast: {
		num: 585,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Moonblast",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
	},
	moongeistbeam: {
		num: 714,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Moongeist Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	moonlight: {
		num: 236,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Moonlight",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				factor = 0.667;
				break;
			case 'raindance':
			case 'primordialsea':
			case 'sandstorm':
			case 'hail':
			case 'snow':
				factor = 0.25;
				break;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	morningsun: {
		num: 234,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Morning Sun",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				factor = 0.667;
				break;
			case 'raindance':
			case 'primordialsea':
			case 'sandstorm':
			case 'hail':
			case 'snow':
				factor = 0.25;
				break;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	mortalspin: {
		num: 866,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Mortal Spin",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Mortal Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Mortal Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Mortal Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Mortal Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			status: 'psn',
		},
		target: "allAdjacentFoes",
		type: "Poison",
	},
	mountaingale: {
		num: 836,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Mountain Gale",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ice",
	},
	mudbomb: {
		num: 426,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Mud Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Ground",
		contestType: "Cute",
	},
	mudshot: {
		num: 341,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Mud Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	mudslap: {
		num: 189,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Mud-Slap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Ground",
		contestType: "Cute",
	},
	mudsport: {
		num: 300,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Mud Sport",
		pp: 15,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'mudsport',
		condition: {
			duration: 5,
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Mud Sport', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Electric') {
					this.debug('mud sport weaken');
					return this.chainModify([1352, 4096]);
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Mud Sport');
			},
		},
		secondary: null,
		target: "all",
		type: "Ground",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	muddywater: {
		num: 330,
		accuracy: 85,
		basePower: 90,
		category: "Special",
		name: "Muddy Water",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Tough",
	},
	multiattack: {
		num: 718,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		isNonstandard: "Past",
		name: "Multi-Attack",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			move.type = this.runEvent('Memory', pokemon, null, move, 'Normal');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 185},
		maxMove: {basePower: 95},
		contestType: "Tough",
	},
	mysticalfire: {
		num: 595,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Mystical Fire",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	mysticalpower: {
		num: 832,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Mystical Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Psychic",
	},
	nastyplot: {
		num: 417,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nasty Plot",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 2,
		},
		secondary: null,
		target: "self",
		type: "Dark",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	naturalgift: {
		num: 363,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		isNonstandard: "Past",
		name: "Natural Gift",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			const item = pokemon.getItem();
			if (!item.naturalGift) return;
			move.type = item.naturalGift.type;
		},
		onPrepareHit(target, pokemon, move) {
			if (pokemon.ignoringItem()) return false;
			const item = pokemon.getItem();
			if (!item.naturalGift) return false;
			move.basePower = item.naturalGift.basePower;
			this.debug('BP: ' + move.basePower);
			pokemon.setItem('');
			pokemon.lastItem = item.id;
			pokemon.usedItemThisTurn = true;
			this.runEvent('AfterUseItem', pokemon, null, null, item);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Clever",
	},
	naturepower: {
		num: 267,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Nature Power",
		pp: 20,
		priority: 0,
		flags: {},
		onTryHit(target, pokemon) {
			let move = 'triattack';
			if (this.field.isTerrain('electricterrain')) {
				move = 'thunderbolt';
			} else if (this.field.isTerrain('grassyterrain')) {
				move = 'energyball';
			} else if (this.field.isTerrain('mistyterrain')) {
				move = 'moonblast';
			} else if (this.field.isTerrain('psychicterrain')) {
				move = 'psychic';
			} else if (this.field.isTerrain('plasticterrain')) {
				move = 'recycleray';
			} else if (this.field.isTerrain('volcanicterrain')) {
				move = 'lavasplash';
			}
			const fullMove = this.dex.getActiveMove(move);
			fullMove.flags = {...fullMove.flags, naturePower: 1};
			this.actions.useMove(move, pokemon, target);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	naturesmadness: {
		num: 717,
		accuracy: 90,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 2), 1);
		},
		category: "Special",
		isNonstandard: "Past",
		name: "Nature's Madness",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Tough",
	},
	needlearm: {
		num: 302,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Needle Arm",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	neverendingnightmare: {
		num: 636,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Never-Ending Nightmare",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "ghostiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	nightdaze: {
		num: 539,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Night Daze",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	nightmare: {
		num: 171,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Nightmare",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'nightmare',
		condition: {
			noCopy: true,
			onStart(pokemon) {
				if (pokemon.status !== 'slp' && !pokemon.hasAbility('comatose') &&
				!pokemon.hasAbility('lethargic') && !pokemon.hasAbility('boardpowerz')) {
					return false;
				}
				this.add('-start', pokemon, 'Nightmare');
			},
			onResidualOrder: 11,
			onResidual(pokemon) {
				this.damage(pokemon.baseMaxhp / 4);
			},
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	nightshade: {
		num: 101,
		accuracy: 100,
		basePower: 0,
		damage: 'level',
		category: "Special",
		name: "Night Shade",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	nightslash: {
		num: 400,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Night Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	nobleroar: {
		num: 568,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Noble Roar",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		boosts: {
			atk: -1,
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	noretreat: {
		num: 748,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "No Retreat",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'noretreat',
		onTry(source, target, move) {
			if (source.volatiles['noretreat']) return false;
			if (source.volatiles['trapped']) {
				delete move.volatileStatus;
			}
		},
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'move: No Retreat');
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
		},
		boosts: {
			atk: 1,
			def: 1,
			spa: 1,
			spd: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Fighting",
	},
	noxioustorque: {
		num: 898,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Noxious Torque",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
	},
	nuzzle: {
		num: 609,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Nuzzle",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cute",
	},
	oblivionwing: {
		num: 613,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		isNonstandard: "Past",
		name: "Oblivion Wing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1, heal: 1},
		drain: [3, 4],
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	obstruct: {
		num: 792,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Obstruct",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'obstruct',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect'] || move.category === 'Status') {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					this.boost({def: -2}, source, target, this.dex.getActiveMove("Obstruct"));
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					this.boost({def: -2}, source, target, this.dex.getActiveMove("Obstruct"));
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Dark",
	},
	oceanicoperetta: {
		num: 697,
		accuracy: true,
		basePower: 195,
		category: "Special",
		isNonstandard: "Past",
		name: "Oceanic Operetta",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "primariumz",
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	octazooka: {
		num: 190,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		isNonstandard: "Past",
		name: "Octazooka",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	octolock: {
		num: 753,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Octolock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryImmunity(target) {
			return this.dex.getImmunity('trapped', target);
		},
		volatileStatus: 'octolock',
		condition: {
			onStart(pokemon, source) {
				this.add('-start', pokemon, 'move: Octolock', '[of] ' + source);
			},
			onResidualOrder: 14,
			onResidual(pokemon) {
				const source = this.effectState.source;
				if (source && (!source.isActive || source.hp <= 0 || !source.activeTurns)) {
					delete pokemon.volatiles['octolock'];
					this.add('-end', pokemon, 'Octolock', '[partiallytrapped]', '[silent]');
					return;
				}
				this.boost({def: -1, spd: -1}, pokemon, source, this.dex.getActiveMove('octolock'));
			},
			onTrapPokemon(pokemon) {
				if (this.effectState.source && this.effectState.source.isActive) pokemon.tryTrap();
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
	},
	odorsleuth: {
		num: 316,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Odor Sleuth",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		volatileStatus: 'foresight',
		onTryHit(target) {
			if (target.volatiles['miracleeye']) return false;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
	},
	ominouswind: {
		num: 466,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Past",
		name: "Ominous Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Ghost",
		contestType: "Beautiful",
	},
	orderup: {
		num: 856,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Order Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1},
		onUseMoveMessage(source, target, move) {
			move.orderUpBoost = true;
		},
		onAfterMove(pokemon, target, move) {
			if (!pokemon.volatiles['commanded'] || !move.orderUpBoost) return;
			const tatsugiri = pokemon.volatiles['commanded'].source;
			if (tatsugiri.baseSpecies.baseSpecies !== 'Tatsugiri') return; // Should never happen
			switch (tatsugiri.baseSpecies.forme) {
			case 'Droopy':
				this.boost({def: 1}, pokemon, pokemon);
				break;
			case 'Stretchy':
				this.boost({spe: 1}, pokemon, pokemon);
				break;
			default:
				this.boost({atk: 1}, pokemon, pokemon);
				break;
			}
		},
		secondary: null,
		hasSheerForce: true,
		target: "normal",
		type: "Dragon",
	},
	originpulse: {
		num: 618,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Origin Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1},
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Beautiful",
	},
	outrage: {
		num: 200,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Outrage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Dragon",
		contestType: "Cool",
	},
	overdrive: {
		num: 786,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Overdrive",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
	},
	overheat: {
		num: 315,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Overheat",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	painsplit: {
		num: 220,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pain Split",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onHit(target, pokemon) {
			const targetHP = target.getUndynamaxedHP();
			const averagehp = Math.floor((targetHP + pokemon.hp) / 2) || 1;
			const targetChange = targetHP - averagehp;
			target.sethp(target.hp - targetChange);
			this.add('-sethp', target, target.getHealth, '[from] move: Pain Split', '[silent]');
			pokemon.sethp(averagehp);
			this.add('-sethp', pokemon, pokemon.getHealth, '[from] move: Pain Split');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	paleowave: {
		num: 0,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		isNonstandard: "CAP",
		name: "Paleo Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Beautiful",
	},
	paraboliccharge: {
		num: 570,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Parabolic Charge",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "allAdjacent",
		type: "Electric",
		contestType: "Clever",
	},
	partingshot: {
		num: 575,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Parting Shot",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		onHit(target, source, move) {
			const success = this.boost({atk: -1, spa: -1}, target, source);
			if (!success && !target.hasAbility('mirrorarmor')) {
				delete move.selfSwitch;
			}
		},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {effect: 'healreplacement'},
		contestType: "Cool",
	},
	payback: {
		num: 371,
		accuracy: 100,
		basePower: 50,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		category: "Physical",
		name: "Payback",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	payday: {
		num: 6,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Pay Day",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Clever",
	},
	peck: {
		num: 64,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		name: "Peck",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	perishsong: {
		num: 195,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Perish Song",
		pp: 5,
		priority: 0,
		flags: {sound: 1, distance: 1, bypasssub: 1},
		onHitField(target, source, move) {
			let result = false;
			let message = false;
			for (const pokemon of this.getAllActive()) {
				if (this.runEvent('Invulnerability', pokemon, source, move) === false) {
					this.add('-miss', source, pokemon);
					result = true;
				} else if (this.runEvent('TryHit', pokemon, source, move) === null) {
					result = true;
				} else if (!pokemon.volatiles['perishsong']) {
					pokemon.addVolatile('perishsong');
					this.add('-start', pokemon, 'perish3', '[silent]');
					result = true;
					message = true;
				}
			}
			if (!result) return false;
			if (message) this.add('-fieldactivate', 'move: Perish Song');
		},
		condition: {
			duration: 4,
			onEnd(target) {
				this.add('-start', target, 'perish0');
				target.faint();
			},
			onResidualOrder: 24,
			onResidual(pokemon) {
				const duration = pokemon.volatiles['perishsong'].duration;
				this.add('-start', pokemon, 'perish' + duration);
			},
		},
		secondary: null,
		target: "all",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	petalblizzard: {
		num: 572,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Petal Blizzard",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Grass",
		contestType: "Beautiful",
	},
	petaldance: {
		num: 80,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Petal Dance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Grass",
		contestType: "Beautiful",
	},
	phantomforce: {
		num: 566,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Phantom Force",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	photongeyser: {
		num: 722,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Photon Geyser",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	pikapapow: {
		num: 732,
		accuracy: true,
		basePower: 0,
		basePowerCallback(pokemon) {
			const bp = Math.floor((pokemon.happiness * 10) / 25) || 1;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		isNonstandard: "LGPE",
		name: "Pika Papow",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cute",
	},
	pinmissile: {
		num: 42,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		name: "Pin Missile",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Bug",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	plasmafists: {
		num: 721,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Plasma Fists",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		pseudoWeather: 'iondeluge',
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	playnice: {
		num: 589,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Play Nice",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1, bypasssub: 1},
		boosts: {
			atk: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	playrough: {
		num: 583,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Play Rough",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		contestType: "Cute",
	},
	pluck: {
		num: 365,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Pluck",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		onHit(target, source) {
			const item = target.getItem();
			if (source.hp && item.isBerry && target.takeItem(source)) {
				this.add('-enditem', target, item.name, '[from] stealeat', '[move] Pluck', '[of] ' + source);
				if (this.singleEvent('Eat', item, null, source, null, null)) {
					this.runEvent('EatItem', source, null, null, item);
					if (item.id === 'leppaberry') target.staleness = 'external';
				}
				if (item.onEat) source.ateBerry = true;
			}
		},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cute",
	},
	poisonfang: {
		num: 305,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Poison Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			status: 'tox',
		},
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	poisongas: {
		num: 139,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Poison Gas",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	poisonjab: {
		num: 398,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Poison Jab",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	poisonpowder: {
		num: 77,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Poison Powder",
		pp: 35,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	poisonsting: {
		num: 40,
		accuracy: 100,
		basePower: 15,
		category: "Physical",
		name: "Poison Sting",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	poisontail: {
		num: 342,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Poison Tail",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	pollenpuff: {
		num: 676,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Pollen Puff",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1, allyanim: 1},
		onTryHit(target, source, move) {
			if (source.isAlly(target)) {
				move.basePower = 0;
				move.infiltrates = true;
			}
		},
		onHit(target, source) {
			if (source.isAlly(target)) {
				if (!this.heal(Math.floor(target.baseMaxhp * 0.5))) {
					this.add('-immune', target);
					return this.NOT_FAIL;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	poltergeist: {
		num: 809,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Poltergeist",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTry(source, target) {
			return !!target.item;
		},
		onTryHit(target, source, move) {
			this.add('-activate', target, 'move: Poltergeist', this.dex.items.get(target.item).name);
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	populationbomb: {
		num: 860,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Population Bomb",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		multihit: 10,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Normal",
	},
	pounce: {
		num: 884,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Pounce",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	pound: {
		num: 1,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Pound",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	powder: {
		num: 600,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Powder",
		pp: 20,
		priority: 1,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'powder',
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Powder');
			},
			onTryMovePriority: -1,
			onTryMove(pokemon, target, move) {
				if (move.type === 'Fire') {
					this.add('-activate', pokemon, 'move: Powder');
					this.damage(this.clampIntRange(Math.round(pokemon.maxhp / 4), 1));
					this.attrLastMove('[still]');
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMove: {boost: {spd: 2}},
		contestType: "Clever",
	},
	powdersnow: {
		num: 181,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Powder Snow",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Beautiful",
	},
	powergem: {
		num: 408,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Power Gem",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Beautiful",
	},
	powershift: {
		num: 829,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Power Shift",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'powershift',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Power Shift');
				[pokemon.storedStats.atk, pokemon.storedStats.spa,
					pokemon.storedStats.def, pokemon.storedStats.spd] =
				[pokemon.storedStats.def, pokemon.storedStats.spd,
					pokemon.storedStats.atk, pokemon.storedStats.spa];
			},
			onCopy(pokemon) {
				[pokemon.storedStats.atk, pokemon.storedStats.spa,
					pokemon.storedStats.def, pokemon.storedStats.spd] =
				[pokemon.storedStats.def, pokemon.storedStats.spd,
					pokemon.storedStats.atk, pokemon.storedStats.spa];
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Power Shift');
				[pokemon.storedStats.atk, pokemon.storedStats.spa,
					pokemon.storedStats.def, pokemon.storedStats.spd] =
				[pokemon.storedStats.def, pokemon.storedStats.spd,
					pokemon.storedStats.atk, pokemon.storedStats.spa];
			},
			onRestart(pokemon) {
				pokemon.removeVolatile('Power Shift');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
	},
	powersplit: {
		num: 471,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Split",
		pp: 10,
		priority: 0,
		flags: {protect: 1, allyanim: 1},
		onHit(target, source) {
			const newatk = Math.floor((target.storedStats.atk + source.storedStats.atk) / 2);
			target.storedStats.atk = newatk;
			source.storedStats.atk = newatk;
			const newspa = Math.floor((target.storedStats.spa + source.storedStats.spa) / 2);
			target.storedStats.spa = newspa;
			source.storedStats.spa = newspa;
			this.add('-activate', source, 'move: Power Split', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	powerswap: {
		num: 384,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const targetBoosts: SparseBoostsTable = {};
			const sourceBoosts: SparseBoostsTable = {};

			const atkSpa: BoostID[] = ['atk', 'spa'];
			for (const stat of atkSpa) {
				targetBoosts[stat] = target.boosts[stat];
				sourceBoosts[stat] = source.boosts[stat];
			}

			source.setBoost(targetBoosts);
			target.setBoost(sourceBoosts);

			this.add('-swapboost', source, target, 'atk, spa', '[from] move: Power Swap');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	powertrick: {
		num: 379,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Trick",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'powertrick',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Power Trick');
				const newatk = pokemon.storedStats.def;
				const newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onCopy(pokemon) {
				const newatk = pokemon.storedStats.def;
				const newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Power Trick');
				const newatk = pokemon.storedStats.def;
				const newdef = pokemon.storedStats.atk;
				pokemon.storedStats.atk = newatk;
				pokemon.storedStats.def = newdef;
			},
			onRestart(pokemon) {
				pokemon.removeVolatile('Power Trick');
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
	},
	powertrip: {
		num: 681,
		accuracy: 100,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower + 20 * pokemon.positiveBoosts();
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Power Trip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Clever",
	},
	poweruppunch: {
		num: 612,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		isNonstandard: "Past",
		name: "Power-Up Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	powerwhip: {
		num: 438,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Power Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Tough",
	},
	precipiceblades: {
		num: 619,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Precipice Blades",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		target: "allAdjacentFoes",
		type: "Ground",
		contestType: "Cool",
	},
	present: {
		num: 217,
		accuracy: 90,
		basePower: 0,
		category: "Physical",
		name: "Present",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			const rand = this.random(10);
			if (rand < 2) {
				move.heal = [1, 4];
				move.infiltrates = true;
			} else if (rand < 6) {
				move.basePower = 40;
			} else if (rand < 9) {
				move.basePower = 80;
			} else {
				move.basePower = 120;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	prismaticlaser: {
		num: 711,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		isNonstandard: "Past",
		name: "Prismatic Laser",
		pp: 10,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	protect: {
		num: 182,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Protect",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	psybeam: {
		num: 60,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Psybeam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Psychic",
		contestType: "Beautiful",
	},
	psychup: {
		num: 244,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Psych Up",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			let i: BoostID;
			for (i in target.boosts) {
				source.boosts[i] = target.boosts[i];
			}
			const volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];
			for (const volatile of volatilesToCopy) {
				if (target.volatiles[volatile]) {
					source.addVolatile(volatile);
					if (volatile === 'gmaxchistrike') source.volatiles[volatile].layers = target.volatiles[volatile].layers;
				} else {
					source.removeVolatile(volatile);
				}
			}
			this.add('-copyboost', source, target, '[from] move: Psych Up');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Clever",
	},
	psychic: {
		num: 94,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Psychic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	psychicfangs: {
		num: 706,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Psychic Fangs",
		pp: 10,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	psychicterrain: {
		num: 678,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Psychic Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'psychicterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onTryHitPriority: 4,
			onTryHit(target, source, effect) {
				if (effect && (effect.priority <= 0.1 || effect.target === 'self')) {
					return;
				}
				if (target.isSemiInvulnerable() || target.isAlly(source)) return;
				if (!target.isGrounded()) {
					const baseMove = this.dex.moves.get(effect.id);
					if (baseMove.priority > 0) {
						this.hint("Psychic Terrain doesn't affect Pokémon immune to Ground.");
					}
					return;
				}
				this.add('-activate', target, 'move: Psychic Terrain');
				return null;
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Psychic' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {
					this.debug('psychic terrain boost');
					return this.chainModify([5325, 4096]);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Psychic Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Psychic Terrain');
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Psychic Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	psychoboost: {
		num: 354,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		isNonstandard: "Past",
		name: "Psycho Boost",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	psychocut: {
		num: 427,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Psycho Cut",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	psychoshift: {
		num: 375,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Psycho Shift",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(target, source, move) {
			if (!source.status) return false;
			move.status = source.status;
		},
		self: {
			onHit(pokemon) {
				pokemon.cureStatus();
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spa: 2}},
		contestType: "Clever",
	},
	psyshieldbash: {
		num: 828,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Psyshield Bash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		target: "normal",
		type: "Psychic",
	},
	psyshock: {
		num: 473,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		overrideDefensiveStat: 'def',
		name: "Psyshock",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Beautiful",
	},
	psystrike: {
		num: 540,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		overrideDefensiveStat: 'def',
		name: "Psystrike",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	psywave: {
		num: 149,
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon) {
			return (this.random(50, 151) * pokemon.level) / 100;
		},
		category: "Special",
		isNonstandard: "Past",
		name: "Psywave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	pulverizingpancake: {
		num: 701,
		accuracy: true,
		basePower: 210,
		category: "Physical",
		isNonstandard: "Past",
		name: "Pulverizing Pancake",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "snorliumz",
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	punishment: {
		num: 386,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let power = 60 + 20 * target.positiveBoosts();
			if (power > 200) power = 200;
			this.debug('BP: ' + power);
			return power;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Punishment",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	purify: {
		num: 685,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Purify",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, heal: 1},
		onHit(target, source) {
			if (!target.cureStatus()) {
				this.add('-fail', source);
				this.attrLastMove('[still]');
				return this.NOT_FAIL;
			}
			this.heal(Math.ceil(source.maxhp * 0.5), source);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Beautiful",
	},
	pursuit: {
		num: 228,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Pursuit damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Pursuit",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	pyroball: {
		num: 780,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Pyro Ball",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, bullet: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
	},
	quash: {
		num: 511,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Quash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			if (this.activePerHalf === 1) return false; // fails in singles
			const action = this.queue.willMove(target);
			if (!action) return false;

			action.order = 201;
			this.add('-activate', target, 'move: Quash');
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	quickattack: {
		num: 98,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Quick Attack",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	quickguard: {
		num: 501,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Quick Guard",
		pp: 15,
		priority: 3,
		flags: {snatch: 1},
		sideCondition: 'quickguard',
		onTry() {
			return !!this.queue.willAct();
		},
		onHitSide(side, source) {
			source.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onSideStart(target, source) {
				this.add('-singleturn', source, 'Quick Guard');
			},
			onTryHitPriority: 4,
			onTryHit(target, source, move) {
				// Quick Guard blocks moves with positive priority, even those given increased priority by Prankster or Gale Wings.
				// (e.g. it blocks 0 priority moves boosted by Prankster or Gale Wings; Quick Claw/Custap Berry do not count)
				if (move.priority <= 0.1) return;
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Quick Guard');
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		zMove: {boost: {def: 1}},
		contestType: "Cool",
	},
	quiverdance: {
		num: 483,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Quiver Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			spa: 1,
			spd: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	rage: {
		num: 99,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		isNonstandard: "Past",
		name: "Rage",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'rage',
		},
		condition: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Rage');
			},
			onHit(target, source, move) {
				if (target !== source && move.category !== 'Status') {
					this.boost({atk: 1});
				}
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Rage before attack');
				pokemon.removeVolatile('rage');
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	ragefist: {
		num: 889,
		accuracy: 100,
		basePower: 50,
		basePowerCallback(pokemon) {
			return Math.min(350, 50 + 50 * pokemon.timesAttacked);
		},
		category: "Physical",
		name: "Rage Fist",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	ragepowder: {
		num: 476,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rage Powder",
		pp: 20,
		priority: 2,
		flags: {powder: 1},
		volatileStatus: 'ragepowder',
		onTry(source) {
			return this.activePerHalf > 1;
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Rage Powder');
			},
			onFoeRedirectTargetPriority: 1,
			onFoeRedirectTarget(target, source, source2, move) {
				const ragePowderUser = this.effectState.target;
				if (ragePowderUser.isSkyDropped()) return;

				if (source.runStatusImmunity('powder') && this.validTarget(ragePowderUser, source, move.target)) {
					if (move.smartTarget) move.smartTarget = false;
					this.debug("Rage Powder redirected target of move");
					return ragePowderUser;
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	ragingbull: {
		num: 873,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Raging Bull",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		onModifyType(move, pokemon) {
			switch (pokemon.species.name) {
			case 'Tauros-Paldea':
				move.type = 'Fighting';
				break;
			case 'Tauros-Paldea-Fire':
				move.type = 'Fire';
				break;
			case 'Tauros-Paldea-Water':
				move.type = 'Water';
				break;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
	},
	ragingfury: {
		num: 833,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Raging Fury",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove']?.duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Fire",
	},
	raindance: {
		num: 240,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rain Dance",
		pp: 5,
		priority: 0,
		flags: {},
		weather: 'RainDance',
		secondary: null,
		target: "all",
		type: "Water",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	rapidspin: {
		num: 229,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Rapid Spin",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	razorleaf: {
		num: 75,
		accuracy: 95,
		basePower: 55,
		category: "Physical",
		name: "Razor Leaf",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		contestType: "Cool",
	},
	razorshell: {
		num: 534,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Razor Shell",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	razorwind: {
		num: 13,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		isNonstandard: "Past",
		name: "Razor Wind",
		pp: 10,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		critRatio: 2,
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		contestType: "Cool",
	},
	recover: {
		num: 105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Recover",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	recycle: {
		num: 278,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Recycle",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onHit(pokemon) {
			if (pokemon.item || !pokemon.lastItem) return false;
			const item = pokemon.lastItem;
			pokemon.lastItem = '';
			this.add('-item', pokemon, this.dex.items.get(item), '[from] move: Recycle');
			pokemon.setItem(item);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	reflect: {
		num: 115,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reflect",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'reflect',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('lightclay') || source?.hasAbility('builder')) {
					return 8;
				}
				return 5;
			},
			onAnyModifyDamage(damage, source, target, move) {
				if (target !== source && this.effectState.target.hasAlly(target) && this.getCategory(move) === 'Physical') {
					if (!target.getMoveHitData(move).crit && !move.infiltrates) {
						this.debug('Reflect weaken');
						if (this.activePerHalf > 1) return this.chainModify([2732, 4096]);
						return this.chainModify(0.5);
					}
				}
			},
			onSideStart(side) {
				this.add('-sidestart', side, 'Reflect');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 1,
			onSideEnd(side) {
				this.add('-sideend', side, 'Reflect');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	reflecttype: {
		num: 513,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reflect Type",
		pp: 15,
		priority: 0,
		flags: {protect: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			if (source.species && (source.species.num === 493 || source.species.num === 773)) return false;
			if (source.terastallized) return false;
			const oldApparentType = source.apparentType;
			let newBaseTypes = target.getTypes(true).filter(type => type !== '???');
			if (!newBaseTypes.length) {
				if (target.addedType) {
					newBaseTypes = ['Normal'];
				} else {
					return false;
				}
			}
			this.add('-start', source, 'typechange', '[from] move: Reflect Type', '[of] ' + target);
			source.setType(newBaseTypes);
			source.addedType = target.addedType;
			source.knownType = target.isAlly(source) && target.knownType;
			if (!source.knownType) source.apparentType = oldApparentType;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	refresh: {
		num: 287,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Refresh",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status)) return false;
			pokemon.cureStatus();
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Cute",
	},
	relicsong: {
		num: 547,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Relic Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 10,
			status: 'slp',
		},
		onHit(target, pokemon, move) {
			if (pokemon.baseSpecies.baseSpecies === 'Meloetta' && !pokemon.transformed) {
				move.willChangeForme = true;
			}
		},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (move.willChangeForme) {
				const meloettaForme = pokemon.species.id === 'meloettapirouette' ? '' : '-Pirouette';
				pokemon.formeChange('Meloetta' + meloettaForme, this.effect, false, '[msg]');
			}
		},
		target: "allAdjacentFoes",
		type: "Normal",
		contestType: "Beautiful",
	},
	rest: {
		num: 156,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rest",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTry(source) {
			if (source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz')) return false;

			if (source.hp === source.maxhp) {
				this.add('-fail', source, 'heal');
				return null;
			}
			if (source.hasAbility(['insomnia', 'vitalspirit'])) {
				this.add('-fail', source, '[from] ability: ' + source.getAbility().name, '[of] ' + source);
				return null;
			}
		},
		onHit(target, source, move) {
			const result = target.setStatus('slp', source, move);
			if (!result) return result;
			target.statusState.time = 3;
			target.statusState.startTime = 3;
			this.heal(target.maxhp); // Aesthetic only as the healing happens after you fall asleep in-game
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	retaliate: {
		num: 514,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Retaliate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.side.faintedLastTurn) {
				this.debug('Boosted for a faint last turn');
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	return: {
		num: 216,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Return",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	revelationdance: {
		num: 686,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Revelation Dance",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		onModifyType(move, pokemon) {
			let type = pokemon.getTypes()[0];
			if (type === "Bird") type = "???";
			move.type = type;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	revenge: {
		num: 279,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			const damagedByTarget = pokemon.attackedBy.some(
				p => p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('BP doubled for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Revenge",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	reversal: {
		num: 179,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const ratio = Math.max(Math.floor(pokemon.hp * 48 / pokemon.maxhp), 1);
			let bp;
			if (ratio < 2) {
				bp = 200;
			} else if (ratio < 5) {
				bp = 150;
			} else if (ratio < 10) {
				bp = 100;
			} else if (ratio < 17) {
				bp = 80;
			} else if (ratio < 33) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Reversal",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 160},
		contestType: "Cool",
	},
	revivalblessing: {
		num: 863,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Revival Blessing",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {},
		onTryHit(source) {
			if (!source.side.pokemon.filter(ally => ally.fainted).length) {
				return false;
			}
		},
		slotCondition: 'revivalblessing',
		// No this not a real switchout move
		// This is needed to trigger a switch protocol to choose a fainted party member
		// Feel free to refactor
		selfSwitch: true,
		condition: {
			duration: 1,
			// reviving implemented in side.ts, kind of
		},
		secondary: null,
		target: "self",
		type: "Normal",
	},
	risingvoltage: {
		num: 804,
		accuracy: 100,
		basePower: 70,
		basePowerCallback(source, target, move) {
			if (this.field.isTerrain('electricterrain') && target.isGrounded()) {
				if (!source.isAlly(target)) this.hint(`${move.name}'s BP doubled on grounded target.`);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		name: "Rising Voltage",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		maxMove: {basePower: 140},
	},
	roar: {
		num: 46,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Roar",
		pp: 20,
		priority: -6,
		flags: {reflectable: 1, mirror: 1, sound: 1, bypasssub: 1, allyanim: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cool",
	},
	roaroftime: {
		num: 459,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Roar of Time",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Beautiful",
	},
	rockblast: {
		num: 350,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Rock Blast",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Rock",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Tough",
	},
	rockclimb: {
		num: 431,
		accuracy: 85,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Rock Climb",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	rockpolish: {
		num: 397,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rock Polish",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Rock",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	rockslide: {
		num: 157,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Rock Slide",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "allAdjacentFoes",
		type: "Rock",
		contestType: "Tough",
	},
	rocksmash: {
		num: 249,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Rock Smash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	rockthrow: {
		num: 88,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Rock Throw",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	rocktomb: {
		num: 317,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Rock Tomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Clever",
	},
	rockwrecker: {
		num: 439,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		isNonstandard: "Past",
		name: "Rock Wrecker",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	roleplay: {
		num: 272,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Role Play",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		onTryHit(target, source) {
			if (target.ability === source.ability) return false;

			const additionalBannedTargetAbilities = [
				// Zen Mode included here for compatability with Gen 5-6
				'flowergift', 'forecast', 'hungerswitch', 'illusion', 'imposter', 'neutralizinggas', 'powerofalchemy', 'receiver', 'trace', 'wonderguard', 'zenmode',
			];

			if (target.getAbility().isPermanent || additionalBannedTargetAbilities.includes(target.ability) ||
				source.getAbility().isPermanent) {
				return false;
			}
		},
		onHit(target, source) {
			const oldAbility = source.setAbility(target.ability);
			if (oldAbility) {
				this.add('-ability', source, source.getAbility().name, '[from] move: Role Play', '[of] ' + target);
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Cute",
	},
	rollingkick: {
		num: 27,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Rolling Kick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	rollout: {
		num: 205,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const rolloutData = pokemon.volatiles['rollout'];
			if (rolloutData?.hitCount) {
				bp *= Math.pow(2, rolloutData.contactHitCount);
			}
			if (rolloutData && pokemon.status !== 'slp') {
				rolloutData.hitCount++;
				rolloutData.contactHitCount++;
				if (rolloutData.hitCount < 5) {
					rolloutData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		name: "Rollout",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['rollout'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('rollout');
			// @ts-ignore
			// TS thinks pokemon.volatiles['rollout'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['rollout'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const rolloutData = source.volatiles["rollout"];
			if (
				rolloutData &&
				rolloutData.hitCount === 5 &&
				rolloutData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
					rolloutData.contactHitCount;
			}
		},
		condition: {
			duration: 1,
			onLockMove: 'rollout',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rollout'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cute",
	},
	roost: {
		num: 355,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Roost",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		self: {
			volatileStatus: 'roost',
		},
		condition: {
			duration: 1,
			onResidualOrder: 25,
			onStart(target) {
				if (!target.terastallized) {
					this.add('-singleturn', target, 'move: Roost');
				} else if (target.terastallized === "Flying") {
					this.add('-hint', "If a Flying Terastallized Pokemon uses Roost, it remains Flying-type.");
				}
			},
			onTypePriority: -1,
			onType(types, pokemon) {
				this.effectState.typeWas = types;
				return types.filter(type => type !== 'Flying');
			},
		},
		secondary: null,
		target: "self",
		type: "Flying",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	rototiller: {
		num: 563,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Rototiller",
		pp: 10,
		priority: 0,
		flags: {distance: 1, nonsky: 1},
		onHitField(target, source) {
			const targets: Pokemon[] = [];
			let anyAirborne = false;
			for (const pokemon of this.getAllActive()) {
				if (!pokemon.runImmunity('Ground')) {
					this.add('-immune', pokemon);
					anyAirborne = true;
					continue;
				}
				if (pokemon.hasType('Grass')) {
					// This move affects every grounded Grass-type Pokemon in play.
					targets.push(pokemon);
				}
			}
			if (!targets.length && !anyAirborne) return false; // Fails when there are no grounded Grass types or airborne Pokemon
			for (const pokemon of targets) {
				this.boost({atk: 1, spa: 1}, pokemon, source);
			}
		},
		secondary: null,
		target: "all",
		type: "Ground",
		zMove: {boost: {atk: 1}},
		contestType: "Tough",
	},
	round: {
		num: 496,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(target, source, move) {
			if (move.sourceEffect === 'round') {
				this.debug('BP doubled');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		name: "Round",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		onTry(source, target, move) {
			for (const action of this.queue.list as MoveAction[]) {
				if (!action.pokemon || !action.move || action.maxMove || action.zmove) continue;
				if (action.move.id === 'round') {
					this.queue.prioritizeAction(action, move);
					return;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	ruination: {
		num: 877,
		accuracy: 90,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 2), 1);
		},
		category: "Special",
		name: "Ruination",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	sacredfire: {
		num: 221,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Sacred Fire",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 50,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	sacredsword: {
		num: 533,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sacred Sword",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		ignoreEvasion: true,
		ignoreDefensive: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	safeguard: {
		num: 219,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Safeguard",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'safeguard',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', '[move] Safeguard');
					return 7;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (!effect || !source) return;
				if (effect.id === 'yawn') return;
				if (effect.effectType === 'Move' && effect.infiltrates && !target.isAlly(source)) return;
				if (target !== source) {
					this.debug('interrupting setStatus');
					if (effect.name === 'Synchronize' || (effect.effectType === 'Move' && !effect.secondaries)) {
						this.add('-activate', target, 'move: Safeguard');
					}
					return null;
				}
			},
			onTryAddVolatile(status, target, source, effect) {
				if (!effect || !source) return;
				if (effect.effectType === 'Move' && effect.infiltrates && !target.isAlly(source)) return;
				if ((status.id === 'confusion' || status.id === 'yawn') && target !== source) {
					if (effect.effectType === 'Move' && !effect.secondaries) this.add('-activate', target, 'move: Safeguard');
					return null;
				}
			},
			onSideStart(side, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-sidestart', side, 'Safeguard', '[persistent]');
				} else {
					this.add('-sidestart', side, 'Safeguard');
				}
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideEnd(side) {
				this.add('-sideend', side, 'Safeguard');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	saltcure: {
		num: 864,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Salt Cure",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Salt Cure');
			},
			onResidualOrder: 13,
			onResidual(pokemon) {
				this.damage(pokemon.baseMaxhp / (pokemon.hasType(['Water', 'Steel']) ? 4 : 8));
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Salt Cure');
			},
		},
		secondary: {
			chance: 100,
			volatileStatus: 'saltcure',
		},
		target: "normal",
		type: "Rock",
	},
	sandattack: {
		num: 28,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Sand Attack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		zMove: {boost: {evasion: 1}},
		contestType: "Cute",
	},
	sandsearstorm: {
		num: 848,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Sandsear Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "allAdjacentFoes",
		type: "Ground",
	},
	sandstorm: {
		num: 201,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sandstorm",
		pp: 10,
		priority: 0,
		flags: {wind: 1},
		weather: 'Sandstorm',
		secondary: null,
		target: "all",
		type: "Rock",
		zMove: {boost: {spe: 1}},
		contestType: "Tough",
	},
	sandtomb: {
		num: 328,
		accuracy: 85,
		basePower: 35,
		category: "Physical",
		name: "Sand Tomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	sappyseed: {
		num: 738,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		isNonstandard: "LGPE",
		name: "Sappy Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		onHit(target, source) {
			if (target.hasType('Grass')) return null;
			target.addVolatile('leechseed', source);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	savagespinout: {
		num: 634,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Savage Spin-Out",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "buginiumz",
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	scald: {
		num: 503,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Scald",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	scaleshot: {
		num: 799,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Scale Shot",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		selfBoost: {
			boosts: {
				def: -1,
				spe: 1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
	},
	scaryface: {
		num: 184,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Scary Face",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Tough",
	},
	scorchingsands: {
		num: 815,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Scorching Sands",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Ground",
	},
	scratch: {
		num: 10,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Scratch",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	screech: {
		num: 103,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Screech",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1, allyanim: 1},
		boosts: {
			def: -2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
	},
	searingshot: {
		num: 545,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		isNonstandard: "Past",
		name: "Searing Shot",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "allAdjacent",
		type: "Fire",
		contestType: "Cool",
	},
	searingsunrazesmash: {
		num: 724,
		accuracy: true,
		basePower: 200,
		category: "Physical",
		isNonstandard: "Past",
		name: "Searing Sunraze Smash",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "solganiumz",
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	secretpower: {
		num: 290,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		isNonstandard: "Past",
		name: "Secret Power",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (this.field.isTerrain('')) return;
			move.secondaries = [];
			if (this.field.isTerrain('electricterrain')) {
				move.secondaries.push({
					chance: 30,
					status: 'par',
				});
			} else if (this.field.isTerrain('grassyterrain')) {
				move.secondaries.push({
					chance: 30,
					status: 'slp',
				});
			} else if (this.field.isTerrain('mistyterrain')) {
				move.secondaries.push({
					chance: 30,
					boosts: {
						spa: -1,
					},
				});
			} else if (this.field.isTerrain('psychicterrain')) {
				move.secondaries.push({
					chance: 30,
					boosts: {
						spe: -1,
					},
				});
			}
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Normal",
		contestType: "Clever",
	},
	secretsword: {
		num: 548,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		isNonstandard: "Past",
		overrideDefensiveStat: 'def',
		name: "Secret Sword",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Beautiful",
	},
	seedbomb: {
		num: 402,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Seed Bomb",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Tough",
	},
	seedflare: {
		num: 465,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		isNonstandard: "Past",
		name: "Seed Flare",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Beautiful",
	},
	seismictoss: {
		num: 69,
		accuracy: 100,
		basePower: 0,
		damage: 'level',
		category: "Physical",
		name: "Seismic Toss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		maxMove: {basePower: 75},
		contestType: "Tough",
	},
	selfdestruct: {
		num: 120,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Self-Destruct",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		contestType: "Beautiful",
	},
	shadowball: {
		num: 247,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Shadow Ball",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	shadowbone: {
		num: 708,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		isNonstandard: "Past",
		name: "Shadow Bone",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	shadowclaw: {
		num: 421,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Shadow Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	shadowforce: {
		num: 467,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Shadow Force",
		pp: 5,
		priority: 0,
		flags: {contact: 1, charge: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	shadowpunch: {
		num: 325,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Shadow Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	shadowsneak: {
		num: 425,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Shadow Sneak",
		pp: 30,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	shadowstrike: {
		num: 0,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		isNonstandard: "CAP",
		name: "Shadow Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	sharpen: {
		num: 159,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Sharpen",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cute",
	},
	shatteredpsyche: {
		num: 648,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Shattered Psyche",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "psychiumz",
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	shedtail: {
		num: 880,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shed Tail",
		pp: 10,
		priority: 0,
		flags: {},
		volatileStatus: 'substitute',
		onTryHit(source) {
			if (!this.canSwitch(source.side)) {
				this.add('-fail', source);
				return this.NOT_FAIL;
			}
			if (source.volatiles['substitute']) {
				this.add('-fail', source, 'move: Shed Tail');
				return this.NOT_FAIL;
			}
			if (source.hp <= Math.ceil(source.maxhp / 2)) {
				this.add('-fail', source, 'move: Shed Tail', '[weak]');
				return this.NOT_FAIL;
			}
		},
		onHit(target) {
			this.directDamage(Math.ceil(target.maxhp / 2));
		},
		self: {
			onHit(source) {
				source.skipBeforeSwitchOutEventFlag = true;
			},
		},
		selfSwitch: 'shedtail',
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
	},
	sheercold: {
		num: 329,
		accuracy: 30,
		basePower: 0,
		category: "Special",
		name: "Sheer Cold",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		ohko: 'Ice',
		target: "normal",
		type: "Ice",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Beautiful",
	},
	shellsidearm: {
		num: 801,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Shell Side Arm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onPrepareHit(target, source, move) {
			if (!source.isAlly(target)) {
				this.attrLastMove('[anim] Shell Side Arm ' + move.category);
			}
		},
		onModifyMove(move, pokemon, target) {
			if (!target) return;
			const atk = pokemon.getStat('atk', false, true);
			const spa = pokemon.getStat('spa', false, true);
			const def = target.getStat('def', false, true);
			const spd = target.getStat('spd', false, true);
			const physical = Math.floor(Math.floor(Math.floor(Math.floor(2 * pokemon.level / 5 + 2) * 90 * atk) / def) / 50);
			const special = Math.floor(Math.floor(Math.floor(Math.floor(2 * pokemon.level / 5 + 2) * 90 * spa) / spd) / 50);
			if (physical > special || (physical === special && this.random(2) === 0)) {
				move.category = 'Physical';
				move.flags.contact = 1;
			}
		},
		onHit(target, source, move) {
			// Shell Side Arm normally reveals its category via animation on cart, but doesn't play either custom animation against allies
			if (!source.isAlly(target)) this.hint(move.category + " Shell Side Arm");
		},
		onAfterSubDamage(damage, target, source, move) {
			if (!source.isAlly(target)) this.hint(move.category + " Shell Side Arm");
		},
		secondary: {
			chance: 20,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
	},
	shellsmash: {
		num: 504,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shell Smash",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: -1,
			spd: -1,
			atk: 2,
			spa: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	shelltrap: {
		num: 704,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		isNonstandard: "Past",
		name: "Shell Trap",
		pp: 5,
		priority: -3,
		flags: {protect: 1},
		priorityChargeCallback(pokemon) {
			pokemon.addVolatile('shelltrap');
		},
		onTryMove(pokemon) {
			if (!pokemon.volatiles['shelltrap']?.gotHit) {
				this.attrLastMove('[still]');
				this.add('cant', pokemon, 'Shell Trap', 'Shell Trap');
				return null;
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Shell Trap');
			},
			onHit(pokemon, source, move) {
				if (!pokemon.isAlly(source) && move.category === 'Physical') {
					this.effectState.gotHit = true;
					const action = this.queue.willMove(pokemon);
					if (action) {
						this.queue.prioritizeAction(action);
					}
				}
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		contestType: "Tough",
	},
	shelter: {
		num: 842,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Shelter",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		secondary: null,
		target: "self",
		type: "Steel",
	},
	shiftgear: {
		num: 508,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shift Gear",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
			atk: 1,
		},
		secondary: null,
		volatileStatus: 'shiftgear',
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	shockwave: {
		num: 351,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Shock Wave",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	shoreup: {
		num: 659,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shore Up",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather('sandstorm')) {
				factor = 0.667;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Ground",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	signalbeam: {
		num: 324,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		isNonstandard: "Past",
		name: "Signal Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Bug",
		contestType: "Beautiful",
	},
	silktrap: {
		num: 852,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Silk Trap",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'silktrap',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect'] || move.category === 'Status') {
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					this.boost({spe: -1}, source, target, this.dex.getActiveMove("Silk Trap"));
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					this.boost({spe: -1}, source, target, this.dex.getActiveMove("Silk Trap"));
				}
			},
		},
		target: "self",
		type: "Bug",
	},
	silverwind: {
		num: 318,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Past",
		name: "Silver Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Bug",
		contestType: "Beautiful",
	},
	simplebeam: {
		num: 493,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Simple Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'simple' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('simple');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Simple', '[from] move: Simple Beam');
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
	},
	sing: {
		num: 47,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		name: "Sing",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Cute",
	},
	sinisterarrowraid: {
		num: 695,
		accuracy: true,
		basePower: 180,
		category: "Physical",
		isNonstandard: "Past",
		name: "Sinister Arrow Raid",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "decidiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	sizzlyslide: {
		num: 735,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "LGPE",
		name: "Sizzly Slide",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, defrost: 1},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	sketch: {
		num: 166,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Sketch",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const disallowedMoves = ['chatter', 'sketch', 'struggle'];
			const move = target.lastMove;
			if (source.transformed || !move || source.moves.includes(move.id)) return false;
			if (disallowedMoves.includes(move.id) || move.isZ || move.isMax) return false;
			const sketchIndex = source.moves.indexOf('sketch');
			if (sketchIndex < 0) return false;
			const sketchedMove = {
				move: move.name,
				id: move.id,
				pp: move.pp,
				maxpp: move.pp,
				target: move.target,
				disabled: false,
				used: false,
			};
			source.moveSlots[sketchIndex] = sketchedMove;
			source.baseMoveSlots[sketchIndex] = sketchedMove;
			this.add('-activate', source, 'move: Sketch', move.name);
		},
		noSketch: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Clever",
	},
	skillswap: {
		num: 285,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Skill Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		onTryHit(target, source) {
			const additionalBannedAbilities = ['hungerswitch', 'illusion', 'neutralizinggas', 'wonderguard'];
			const targetAbility = target.getAbility();
			const sourceAbility = source.getAbility();
			// TODO: research in what order these should be checked
			if (
				target.volatiles['dynamax'] ||
				targetAbility.isPermanent || sourceAbility.isPermanent ||
				additionalBannedAbilities.includes(target.ability) || additionalBannedAbilities.includes(source.ability)
			) {
				return false;
			}
			const sourceCanBeSet = this.runEvent('SetAbility', source, source, this.effect, targetAbility);
			if (!sourceCanBeSet) return sourceCanBeSet;
			const targetCanBeSet = this.runEvent('SetAbility', target, source, this.effect, sourceAbility);
			if (!targetCanBeSet) return targetCanBeSet;
		},
		onHit(target, source, move) {
			const targetAbility = target.getAbility();
			const sourceAbility = source.getAbility();
			if (target.isAlly(source)) {
				this.add('-activate', source, 'move: Skill Swap', '', '', '[of] ' + target);
			} else {
				this.add('-activate', source, 'move: Skill Swap', targetAbility, sourceAbility, '[of] ' + target);
			}
			this.singleEvent('End', sourceAbility, source.abilityState, source);
			this.singleEvent('End', targetAbility, target.abilityState, target);
			source.ability = targetAbility.id;
			target.ability = sourceAbility.id;
			source.abilityState = {id: this.toID(source.ability), target: source};
			target.abilityState = {id: this.toID(target.ability), target: target};
			if (!target.isAlly(source)) target.volatileStaleness = 'external';
			this.singleEvent('Start', targetAbility, source.abilityState, source);
			this.singleEvent('Start', sourceAbility, target.abilityState, target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	skittersmack: {
		num: 806,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Skitter Smack",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Bug",
	},
	skullbash: {
		num: 130,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		isNonstandard: "Past",
		name: "Skull Bash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({def: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	skyattack: {
		num: 143,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Sky Attack",
		pp: 5,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1, distance: 1},
		critRatio: 2,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	skydrop: {
		num: 507,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Sky Drop",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onModifyMove(move, source) {
			if (!source.volatiles['skydrop']) {
				move.accuracy = true;
				delete move.flags['contact'];
			}
		},
		onMoveFail(target, source) {
			if (source.volatiles['twoturnmove'] && source.volatiles['twoturnmove'].duration === 1) {
				source.removeVolatile('skydrop');
				source.removeVolatile('twoturnmove');
				if (target === this.effectState.target) {
					this.add('-end', target, 'Sky Drop', '[interrupt]');
				}
			}
		},
		onTry(source, target) {
			return !target.fainted;
		},
		onTryHit(target, source, move) {
			if (source.removeVolatile(move.id)) {
				if (target !== source.volatiles['twoturnmove'].source) return false;

				if (target.hasType('Flying')) {
					this.add('-immune', target);
					return null;
				}
			} else {
				if (target.volatiles['substitute'] || target.isAlly(source)) {
					return false;
				}
				if (target.getWeight() >= 2000) {
					this.add('-fail', target, 'move: Sky Drop', '[heavy]');
					return null;
				}

				this.add('-prepare', source, move.name, target);
				source.addVolatile('twoturnmove', target);
				return null;
			}
		},
		onHit(target, source) {
			if (target.hp) this.add('-end', target, 'Sky Drop');
		},
		condition: {
			duration: 2,
			onAnyDragOut(pokemon) {
				if (pokemon === this.effectState.target || pokemon === this.effectState.source) return false;
			},
			onFoeTrapPokemonPriority: -15,
			onFoeTrapPokemon(defender) {
				if (defender !== this.effectState.source) return;
				defender.trapped = true;
			},
			onFoeBeforeMovePriority: 12,
			onFoeBeforeMove(attacker, defender, move) {
				if (attacker === this.effectState.source) {
					attacker.activeMoveActions--;
					this.debug('Sky drop nullifying.');
					return null;
				}
			},
			onRedirectTargetPriority: 99,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectState.target) return;
				if (this.effectState.source.fainted) return;
				return this.effectState.source;
			},
			onAnyInvulnerability(target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onAnyBasePower(basePower, target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				if (move.id === 'gust' || move.id === 'twister') {
					this.debug('BP doubled on midair target');
					return this.chainModify(2);
				}
			},
			onFaint(target) {
				if (target.volatiles['skydrop'] && target.volatiles['twoturnmove'].source) {
					this.add('-end', target.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
				}
			},
		},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Tough",
	},
	skyuppercut: {
		num: 327,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		isNonstandard: "Past",
		name: "Sky Uppercut",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	slackoff: {
		num: 303,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Slack Off",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	slam: {
		num: 21,
		accuracy: 75,
		basePower: 80,
		category: "Physical",
		name: "Slam",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	slash: {
		num: 163,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Slash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	sleeppowder: {
		num: 79,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Sleep Powder",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	sleeptalk: {
		num: 214,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sleep Talk",
		pp: 10,
		priority: 0,
		flags: {},
		sleepUsable: true,
		onTry(source) {
			return source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz') || source.hasAbility('lethargic');
		},
		onHit(pokemon) {
			const noSleepTalk = [
				'assist', 'beakblast', 'belch', 'bide', 'celebrate', 'chatter', 'copycat', 'dynamaxcannon', 'focuspunch', 'mefirst', 'metronome', 'mimic', 'mirrormove', 'naturepower', 'shelltrap', 'sketch', 'sleeptalk', 'uproar',
			];
			const moves = [];
			for (const moveSlot of pokemon.moveSlots) {
				const moveid = moveSlot.id;
				if (!moveid) continue;
				const move = this.dex.moves.get(moveid);
				if (noSleepTalk.includes(moveid) || move.flags['charge'] || (move.isZ && move.basePower !== 1) || move.isMax) {
					continue;
				}
				moves.push(moveid);
			}
			let randomMove = '';
			if (moves.length) randomMove = this.sample(moves);
			if (!randomMove) {
				return false;
			}
			this.actions.useMove(randomMove, pokemon);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'crit2'},
		contestType: "Cute",
	},
	sludge: {
		num: 124,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Sludge",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	sludgebomb: {
		num: 188,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Sludge Bomb",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	sludgewave: {
		num: 482,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Sludge Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "allAdjacent",
		type: "Poison",
		contestType: "Tough",
	},
	smackdown: {
		num: 479,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Smack Down",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		volatileStatus: 'smackdown',
		condition: {
			noCopy: true,
			onStart(pokemon) {
				let applies = false;
				if (pokemon.hasType('Flying') || pokemon.hasAbility('levitate')) applies = true;
				if (pokemon.hasItem('ironball') || pokemon.volatiles['ingrain'] ||
					this.field.getPseudoWeather('gravity')) applies = false;
				if (pokemon.removeVolatile('fly') || pokemon.removeVolatile('bounce')) {
					applies = true;
					this.queue.cancelMove(pokemon);
					pokemon.removeVolatile('twoturnmove');
				}
				if (pokemon.volatiles['magnetrise']) {
					applies = true;
					delete pokemon.volatiles['magnetrise'];
				}
				if (pokemon.volatiles['telekinesis']) {
					applies = true;
					delete pokemon.volatiles['telekinesis'];
				}
				if (!applies) return false;
				this.add('-start', pokemon, 'Smack Down');
			},
			onRestart(pokemon) {
				if (pokemon.removeVolatile('fly') || pokemon.removeVolatile('bounce')) {
					this.queue.cancelMove(pokemon);
					pokemon.removeVolatile('twoturnmove');
					this.add('-start', pokemon, 'Smack Down');
				}
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	smartstrike: {
		num: 684,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Smart Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	smellingsalts: {
		num: 265,
		accuracy: 100,
		basePower: 70,
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'par') {
				this.debug('BP doubled on paralyzed target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Smelling Salts",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.status === 'par') target.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	smog: {
		num: 123,
		accuracy: 70,
		basePower: 30,
		category: "Special",
		name: "Smog",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	smokescreen: {
		num: 108,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Smokescreen",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {evasion: 1}},
		contestType: "Clever",
	},
	snaptrap: {
		num: 779,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		isNonstandard: "Past",
		name: "Snap Trap",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	snarl: {
		num: 555,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Snarl",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Dark",
		contestType: "Tough",
	},
	snatch: {
		num: 289,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Snatch",
		pp: 10,
		priority: 4,
		flags: {bypasssub: 1},
		volatileStatus: 'snatch',
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'Snatch');
			},
			onAnyPrepareHitPriority: -1,
			onAnyPrepareHit(source, target, move) {
				const snatchUser = this.effectState.source;
				if (snatchUser.isSkyDropped()) return;
				if (!move || move.isZ || move.isMax || !move.flags['snatch'] || move.sourceEffect === 'snatch') {
					return;
				}
				snatchUser.removeVolatile('snatch');
				this.add('-activate', snatchUser, 'move: Snatch', '[of] ' + source);
				this.actions.useMove(move.id, snatchUser);
				return null;
			},
		},
		secondary: null,
		pressureTarget: "foeSide",
		target: "self",
		type: "Dark",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	snipeshot: {
		num: 745,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Snipe Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		tracksTarget: true,
		secondary: null,
		target: "normal",
		type: "Water",
	},
	snore: {
		num: 173,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Snore",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		sleepUsable: true,
		onTry(source) {
			return source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz') || source.hasAbility('lethargic');
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	snowscape: {
		num: 883,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Snowscape",
		pp: 10,
		priority: 0,
		flags: {},
		weather: 'snow',
		secondary: null,
		target: "all",
		type: "Ice",
	},
	soak: {
		num: 487,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Soak",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Water' || !target.setType('Water')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Water');
		},
		secondary: null,
		target: "normal",
		type: "Water",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
	},
	softboiled: {
		num: 135,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Soft-Boiled",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	solarbeam: {
		num: 76,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Solar Beam",
		pp: 10,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (['sunnyday', 'desolateland'].includes(attacker.effectiveWeather())) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			const weakWeathers = ['raindance', 'primordialsea', 'sandstorm', 'hail', 'snow'];
			if (weakWeathers.includes(pokemon.effectiveWeather())) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	solarblade: {
		num: 669,
		accuracy: 100,
		basePower: 125,
		category: "Physical",
		name: "Solar Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, slicing: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (['sunnyday', 'desolateland'].includes(attacker.effectiveWeather())) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			const weakWeathers = ['raindance', 'primordialsea', 'sandstorm', 'hail', 'snow'];
			if (weakWeathers.includes(pokemon.effectiveWeather())) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	sonicboom: {
		num: 49,
		accuracy: 90,
		basePower: 0,
		damage: 20,
		category: "Special",
		isNonstandard: "Past",
		name: "Sonic Boom",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	soulstealing7starstrike: {
		num: 699,
		accuracy: true,
		basePower: 195,
		category: "Physical",
		isNonstandard: "Past",
		name: "Soul-Stealing 7-Star Strike",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		isZ: "marshadiumz",
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	spacialrend: {
		num: 460,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Spacial Rend",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Beautiful",
	},
	spark: {
		num: 209,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Spark",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	sparklingaria: {
		num: 664,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Past",
		name: "Sparkling Aria",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			dustproof: true,
			chance: 100,
			volatileStatus: 'sparklingaria',
		},
		onAfterMove(source, target, move) {
			for (const pokemon of this.getAllActive()) {
				if (pokemon !== source && pokemon.removeVolatile('sparklingaria') && pokemon.status === 'brn' && !source.fainted) {
					pokemon.cureStatus();
				}
			}
		},
		target: "allAdjacent",
		type: "Water",
		contestType: "Tough",
	},
	sparklyswirl: {
		num: 740,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Sparkly Swirl",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		self: {
			onHit(pokemon, source, move) {
				this.add('-activate', source, 'move: Aromatherapy');
				for (const ally of source.side.pokemon) {
					if (ally !== source && (ally.volatiles['substitute'] && !move.infiltrates)) {
						continue;
					}
					ally.cureStatus();
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Clever",
	},
	spectralthief: {
		num: 712,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Spectral Thief",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bypasssub: 1},
		stealsBoosts: true,
		// Boost stealing implemented in scripts.js
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	speedswap: {
		num: 683,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Speed Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			const targetSpe = target.storedStats.spe;
			target.storedStats.spe = source.storedStats.spe;
			source.storedStats.spe = targetSpe;
			this.add('-activate', source, 'move: Speed Swap', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	spicyextract: {
		num: 858,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spicy Extract",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			atk: 2,
			def: -2,
		},
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	spiderweb: {
		num: 169,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Spider Web",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	spikecannon: {
		num: 131,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		isNonstandard: "Past",
		name: "Spike Cannon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		maxMove: {basePower: 120},
		contestType: "Cool",
	},
	spikes: {
		num: 191,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spikes",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'spikes',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'Spikes');
				this.effectState.layers = 1;
			},
			onSideRestart(side) {
				if (this.effectState.layers >= 3) return false;
				this.add('-sidestart', side, 'Spikes');
				this.effectState.layers++;
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded() || pokemon.hasItem('heavydutyboots')) return;
				const damageAmounts = [0, 3, 4, 6]; // 1/8, 1/6, 1/4
				this.damage(damageAmounts[this.effectState.layers] * pokemon.maxhp / 24);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Ground",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	spikyshield: {
		num: 596,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spiky Shield",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'spikyshield',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					this.damage(source.baseMaxhp / 8, source, target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					this.damage(source.baseMaxhp / 8, source, target);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	spinout: {
		num: 859,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Spin Out",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	spiritbreak: {
		num: 789,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Spirit Break",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Fairy",
	},
	spiritshackle: {
		num: 662,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Spirit Shackle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		target: "normal",
		type: "Ghost",
		contestType: "Tough",
	},
	spitup: {
		num: 255,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			if (!pokemon.volatiles['stockpile']?.layers) return false;
			return pokemon.volatiles['stockpile'].layers * 100;
		},
		category: "Special",
		name: "Spit Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onTry(source) {
			return !!source.volatiles['stockpile'];
		},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('stockpile');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	spite: {
		num: 180,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Spite",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		onHit(target) {
			let move: Move | ActiveMove | null = target.lastMove;
			if (!move || move.isZ) return false;
			if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);

			const ppDeducted = target.deductPP(move.id, 4);
			if (!ppDeducted) return false;
			this.add("-activate", target, 'move: Spite', move.name, ppDeducted);
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMove: {effect: 'heal'},
		contestType: "Tough",
	},
	splash: {
		num: 150,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Splash",
		pp: 40,
		priority: 0,
		flags: {gravity: 1},
		onTry(source, target, move) {
			// Additional Gravity check for Z-move variant
			if (this.field.getPseudoWeather('Gravity')) {
				this.add('cant', source, 'move: Gravity', move);
				return null;
			}
		},
		onTryHit(target, source) {
			this.add('-nothing');
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 3}},
		contestType: "Cute",
	},
	splinteredstormshards: {
		num: 727,
		accuracy: true,
		basePower: 190,
		category: "Physical",
		isNonstandard: "Past",
		name: "Splintered Stormshards",
		pp: 1,
		priority: 0,
		flags: {},
		onHit() {
			this.field.clearTerrain();
		},
		onAfterSubDamage() {
			this.field.clearTerrain();
		},
		isZ: "lycaniumz",
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	splishysplash: {
		num: 730,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "LGPE",
		name: "Splishy Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Cool",
	},
	spore: {
		num: 147,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Spore",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	spotlight: {
		num: 671,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Spotlight",
		pp: 15,
		priority: 3,
		flags: {protect: 1, reflectable: 1, allyanim: 1},
		volatileStatus: 'spotlight',
		onTryHit(target) {
			if (this.activePerHalf === 1) return false;
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Spotlight');
			},
			onFoeRedirectTargetPriority: 2,
			onFoeRedirectTarget(target, source, source2, move) {
				if (this.validTarget(this.effectState.target, source, move.target)) {
					this.debug("Spotlight redirected target of move");
					return this.effectState.target;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	springtidestorm: {
		num: 831,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Springtide Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 30,
			boosts: {
				atk: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Fairy",
	},
	stealthrock: {
		num: 446,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stealth Rock",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'stealthrock',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Stealth Rock');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('stealthrock')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Rock",
		zMove: {boost: {def: 1}},
		contestType: "Cool",
	},
	steameruption: {
		num: 592,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "Steam Eruption",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	steamroller: {
		num: 537,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		isNonstandard: "Past",
		name: "Steamroller",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Bug",
		contestType: "Tough",
	},
	steelbeam: {
		num: 796,
		accuracy: 95,
		basePower: 140,
		category: "Special",
		name: "Steel Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		mindBlownRecoil: true,
		onAfterMove(pokemon, target, move) {
			if (move.mindBlownRecoil && !move.multihit) {
				const hpBeforeRecoil = pokemon.hp;
				this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get('Steel Beam'), true);
				if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {
					this.runEvent('EmergencyExit', pokemon, pokemon);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	steelroller: {
		num: 798,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		name: "Steel Roller",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry() {
			return !this.field.isTerrain('');
		},
		onHit() {
			this.field.clearTerrain();
		},
		onAfterSubDamage() {
			this.field.clearTerrain();
		},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	steelwing: {
		num: 211,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Steel Wing",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	stickyweb: {
		num: 564,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sticky Web",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'stickyweb',
		condition: {
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Sticky Web');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded() || pokemon.hasItem('heavydutyboots')) return;
				this.add('-activate', pokemon, 'move: Sticky Web');
				this.boost({spe: -1}, pokemon, this.effectState.source, this.dex.getActiveMove('stickyweb'));
			},
		},
		secondary: null,
		pressureTarget: "self",
		target: "foeSide",
		type: "Bug",
		zMove: {boost: {spe: 1}},
		contestType: "Tough",
	},
	stockpile: {
		num: 254,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stockpile",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		onTry(source) {
			if (source.volatiles['stockpile'] && source.volatiles['stockpile'].layers >= 3) return false;
		},
		volatileStatus: 'stockpile',
		condition: {
			noCopy: true,
			onStart(target) {
				this.effectState.layers = 1;
				this.effectState.def = 0;
				this.effectState.spd = 0;
				this.add('-start', target, 'stockpile' + this.effectState.layers);
				const [curDef, curSpD] = [target.boosts.def, target.boosts.spd];
				this.boost({def: 1, spd: 1}, target, target);
				if (curDef !== target.boosts.def) this.effectState.def--;
				if (curSpD !== target.boosts.spd) this.effectState.spd--;
			},
			onRestart(target) {
				if (this.effectState.layers >= 3) return false;
				this.effectState.layers++;
				this.add('-start', target, 'stockpile' + this.effectState.layers);
				const curDef = target.boosts.def;
				const curSpD = target.boosts.spd;
				this.boost({def: 1, spd: 1}, target, target);
				if (curDef !== target.boosts.def) this.effectState.def--;
				if (curSpD !== target.boosts.spd) this.effectState.spd--;
			},
			onEnd(target) {
				if (this.effectState.def || this.effectState.spd) {
					const boosts: SparseBoostsTable = {};
					if (this.effectState.def) boosts.def = this.effectState.def;
					if (this.effectState.spd) boosts.spd = this.effectState.spd;
					this.boost(boosts, target, target);
				}
				this.add('-end', target, 'Stockpile');
				if (this.effectState.def !== this.effectState.layers * -1 || this.effectState.spd !== this.effectState.layers * -1) {
					this.hint("In Gen 7, Stockpile keeps track of how many times it successfully altered each stat individually.");
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Tough",
	},
	stokedsparksurfer: {
		num: 700,
		accuracy: true,
		basePower: 175,
		category: "Special",
		isNonstandard: "Past",
		name: "Stoked Sparksurfer",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "aloraichiumz",
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	stomp: {
		num: 23,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Stomp",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	stompingtantrum: {
		num: 707,
		accuracy: 100,
		basePower: 75,
		basePowerCallback(pokemon, target, move) {
			if (pokemon.moveLastTurnResult === false) {
				this.debug('doubling Stomping Tantrum BP due to previous move failure');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "Stomping Tantrum",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Tough",
	},
	stoneaxe: {
		num: 830,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Stone Axe",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('stealthrock');
				}
			},
		},
		secondary: {}, // allows sheer force to trigger
		target: "normal",
		type: "Rock",
	},
	stoneedge: {
		num: 444,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Stone Edge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	storedpower: {
		num: 500,
		accuracy: 100,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower + 20 * pokemon.positiveBoosts();
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Stored Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Clever",
	},
	stormthrow: {
		num: 480,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Past",
		name: "Storm Throw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	strangesteam: {
		num: 790,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		isNonstandard: "Past",
		name: "Strange Steam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fairy",
	},
	strength: {
		num: 70,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Strength",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	strengthsap: {
		num: 668,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Strength Sap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, heal: 1},
		onHit(target, source) {
			if (target.boosts.atk === -6) return false;
			const atk = target.getStat('atk', false, true);
			const success = this.boost({atk: -1}, target, source, null, false, true);
			return !!(this.heal(atk, source, target) || success);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	stringshot: {
		num: 81,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "String Shot",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			spe: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Bug",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	struggle: {
		num: 165,
		accuracy: true,
		basePower: 50,
		category: "Physical",
		name: "Struggle",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {contact: 1, protect: 1},
		noSketch: true,
		onModifyMove(move, pokemon, target) {
			move.type = '???';
			this.add('-activate', pokemon, 'move: Struggle');
		},
		struggleRecoil: true,
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		contestType: "Tough",
	},
	strugglebug: {
		num: 522,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Struggle Bug",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Bug",
		contestType: "Cute",
	},
	stuffcheeks: {
		num: 747,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stuff Cheeks",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onDisableMove(pokemon) {
			if (!pokemon.getItem().isBerry) pokemon.disableMove('stuffcheeks');
		},
		onTry(source) {
			return source.getItem().isBerry;
		},
		onHit(pokemon) {
			if (!this.boost({def: 2})) return null;
			pokemon.eatItem(true);
		},
		secondary: null,
		target: "self",
		type: "Normal",
	},
	stunspore: {
		num: 78,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Stun Spore",
		pp: 30,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	submission: {
		num: 66,
		accuracy: 80,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Past",
		name: "Submission",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	substitute: {
		num: 164,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Substitute",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		volatileStatus: 'substitute',
		onTryHit(source) {
			if (source.volatiles['substitute']) {
				this.add('-fail', source, 'move: Substitute');
				return this.NOT_FAIL;
			}
			if (source.hp <= source.maxhp / 4 || source.maxhp === 1) { // Shedinja clause
				this.add('-fail', source, 'move: Substitute', '[weak]');
				return this.NOT_FAIL;
			}
		},
		onHit(target) {
			this.directDamage(target.maxhp / 4);
		},
		condition: {
			onStart(target, source, effect) {
				if (effect?.id === 'shedtail') {
					this.add('-start', target, 'Substitute', '[from] move: Shed Tail');
				} else {
					this.add('-start', target, 'Substitute');
				}
				this.effectState.hp = Math.floor(target.maxhp / 4);
				if (target.volatiles['partiallytrapped']) {
					this.add('-end', target, target.volatiles['partiallytrapped'].sourceEffect, '[partiallytrapped]', '[silent]');
					delete target.volatiles['partiallytrapped'];
				}
			},
			onTryPrimaryHitPriority: -1,
			onTryPrimaryHit(target, source, move) {
				if (target === source || move.flags['bypasssub'] || move.infiltrates) {
					return;
				}
				let damage = this.actions.getDamage(source, target, move);
				if (!damage && damage !== 0) {
					this.add('-fail', source);
					this.attrLastMove('[still]');
					return null;
				}
				damage = this.runEvent('SubDamage', target, source, move, damage);
				if (!damage) {
					return damage;
				}
				if (damage > target.volatiles['substitute'].hp) {
					damage = target.volatiles['substitute'].hp as number;
				}
				target.volatiles['substitute'].hp -= damage;
				source.lastDamage = damage;
				if (target.volatiles['substitute'].hp <= 0) {
					if (move.ohko) this.add('-ohko');
					target.removeVolatile('substitute');
				} else {
					this.add('-activate', target, 'move: Substitute', '[damage]');
				}
				if (move.recoil) {
					this.damage(this.actions.calcRecoilDamage(damage, move), source, target, 'recoil');
				}
				if (move.drain) {
					this.heal(Math.ceil(damage * move.drain[0] / move.drain[1]), source, target, 'drain');
				}
				this.singleEvent('AfterSubDamage', move, null, target, source, move, damage);
				this.runEvent('AfterSubDamage', target, source, move, damage);
				return this.HIT_SUBSTITUTE;
			},
			onEnd(target) {
				this.add('-end', target, 'Substitute');
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	subzeroslammer: {
		num: 650,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Subzero Slammer",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "iciumz",
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Cool",
	},
	suckerpunch: {
		num: 389,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Sucker Punch",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source, target) {
			const action = this.queue.willMove(target);
			const move = action?.choice === 'move' ? action.move : null;
			if (!move || (move.category === 'Status' && move.id !== 'mefirst') || target.volatiles['mustrecharge']) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	sunnyday: {
		num: 241,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sunny Day",
		pp: 5,
		priority: 0,
		flags: {},
		weather: 'sunnyday',
		secondary: null,
		target: "all",
		type: "Fire",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	sunsteelstrike: {
		num: 713,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		isNonstandard: "Past",
		name: "Sunsteel Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	superfang: {
		num: 162,
		accuracy: 90,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(target.getUndynamaxedHP() / 2, 1);
		},
		category: "Physical",
		name: "Super Fang",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	superpower: {
		num: 276,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Superpower",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				atk: -1,
				def: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	supersonic: {
		num: 48,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		name: "Supersonic",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	supersonicskystrike: {
		num: 626,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Supersonic Skystrike",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "flyiniumz",
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Cool",
	},
	surf: {
		num: 57,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Surf",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		contestType: "Beautiful",
	},
	surgingstrikes: {
		num: 818,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Surging Strikes",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		willCrit: true,
		multihit: 3,
		secondary: null,
		target: "normal",
		type: "Water",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
	},
	swagger: {
		num: 207,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Swagger",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		volatileStatus: 'confusion',
		boosts: {
			atk: 2,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	swallow: {
		num: 256,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Swallow",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTry(source) {
			return !!source.volatiles['stockpile'];
		},
		onHit(pokemon) {
			const healAmount = [0.25, 0.5, 1];
			const success = !!this.heal(this.modify(pokemon.maxhp, healAmount[(pokemon.volatiles['stockpile'].layers - 1)]));
			if (!success) this.add('-fail', pokemon, 'heal');
			pokemon.removeVolatile('stockpile');
			return success || this.NOT_FAIL;
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
	},
	sweetkiss: {
		num: 186,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Sweet Kiss",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
	},
	sweetscent: {
		num: 230,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Sweet Scent",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			evasion: -2,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMove: {boost: {accuracy: 1}},
		contestType: "Cute",
	},
	swift: {
		num: 129,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Swift",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		contestType: "Cool",
	},
	switcheroo: {
		num: 415,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Switcheroo",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onTryImmunity(target) {
			return !target.hasAbility('stickyhold');
		},
		onHit(target, source, move) {
			const yourItem = target.takeItem(source);
			const myItem = source.takeItem();
			if (target.item || source.item || (!yourItem && !myItem)) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			if (
				(myItem && !this.singleEvent('TakeItem', myItem, source.itemState, target, source, move, myItem)) ||
				(yourItem && !this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem))
			) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			this.add('-activate', source, 'move: Trick', '[of] ' + target);
			if (myItem) {
				target.setItem(myItem);
				this.add('-item', target, myItem, '[from] move: Switcheroo');
			} else {
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Switcheroo');
			}
			if (yourItem) {
				source.setItem(yourItem);
				this.add('-item', source, yourItem, '[from] move: Switcheroo');
			} else {
				this.add('-enditem', source, myItem, '[silent]', '[from] move: Switcheroo');
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	swordsdance: {
		num: 14,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Swords Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	synchronoise: {
		num: 485,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		isNonstandard: "Past",
		name: "Synchronoise",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryImmunity(target, source) {
			return target.hasType(source.getTypes());
		},
		secondary: null,
		target: "allAdjacent",
		type: "Psychic",
		contestType: "Clever",
	},
	synthesis: {
		num: 235,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Synthesis",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				factor = 0.667;
				break;
			case 'raindance':
			case 'primordialsea':
			case 'sandstorm':
			case 'hail':
			case 'snow':
				factor = 0.25;
				break;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
	},
	tackle: {
		num: 33,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Tackle",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	tailglow: {
		num: 294,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Tail Glow",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 3,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
	},
	tailslap: {
		num: 541,
		accuracy: 85,
		basePower: 25,
		category: "Physical",
		name: "Tail Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 140},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	tailwhip: {
		num: 39,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Tail Whip",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		boosts: {
			def: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cute",
	},
	tailwind: {
		num: 366,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tailwind",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, wind: 1},
		sideCondition: 'tailwind',
		condition: {
			duration: 4,
			durationCallback(target, source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', '[move] Tailwind');
					return 6;
				}
				return 4;
			},
			onSideStart(side, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-sidestart', side, 'move: Tailwind', '[persistent]');
				} else {
					this.add('-sidestart', side, 'move: Tailwind');
				}
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(2);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 5,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Tailwind');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Flying",
		zMove: {effect: 'crit2'},
		contestType: "Cool",
	},
	takedown: {
		num: 36,
		accuracy: 85,
		basePower: 90,
		category: "Physical",
		name: "Take Down",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	takeheart: {
		num: 850,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Take Heart",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		onHit(pokemon) {
			const success = !!this.boost({spa: 1, spd: 1});
			return pokemon.cureStatus() || success;
		},
		secondary: null,
		target: "self",
		type: "Psychic",
	},
	tarshot: {
		num: 749,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Tar Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'tarshot',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Tar Shot');
			},
			onEffectivenessPriority: -2,
			onEffectiveness(typeMod, target, type, move) {
				if (move.type !== 'Fire') return;
				if (!target) return;
				if (type !== target.getTypes()[0]) return;
				return typeMod + 1;
			},
		},
		boosts: {
			spe: -1,
		},
		secondary: null,
		target: "normal",
		type: "Rock",
	},
	taunt: {
		num: 269,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Taunt",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'taunt',
		condition: {
			duration: 3,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'move: Taunt');
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'move: Taunt');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					const move = this.dex.moves.get(moveSlot.id);
					if (move.category === 'Status' && move.id !== 'mefirst') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && !move.isMax && move.category === 'Status' && move.id !== 'mefirst') {
					this.add('cant', attacker, 'move: Taunt', move);
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
	},
	tearfullook: {
		num: 715,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tearful Look",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		boosts: {
			atk: -1,
			spa: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	teatime: {
		num: 752,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Teatime",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1},
		onHitField(target, source, move) {
			const targets: Pokemon[] = [];
			for (const pokemon of this.getAllActive()) {
				if (this.runEvent('Invulnerability', pokemon, source, move) === false) {
					this.add('-miss', source, pokemon);
				} else if (this.runEvent('TryHit', pokemon, source, move) && pokemon.getItem().isBerry) {
					targets.push(pokemon);
				}
			}
			this.add('-fieldactivate', 'move: Teatime');
			if (!targets.length) {
				this.add('-fail', source, 'move: Teatime');
				this.attrLastMove('[still]');
				return this.NOT_FAIL;
			}
			for (const pokemon of targets) {
				pokemon.eatItem(true);
			}
		},
		secondary: null,
		target: "all",
		type: "Normal",
	},
	technoblast: {
		num: 546,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		isNonstandard: "Past",
		name: "Techno Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			if (pokemon.ignoringItem()) return;
			move.type = this.runEvent('Drive', pokemon, null, move, 'Normal');
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	tectonicrage: {
		num: 630,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Tectonic Rage",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "groundiumz",
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Cool",
	},
	teeterdance: {
		num: 298,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Teeter Dance",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
	},
	telekinesis: {
		num: 477,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Telekinesis",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, gravity: 1, allyanim: 1},
		volatileStatus: 'telekinesis',
		onTry(source, target, move) {
			// Additional Gravity check for Z-move variant
			if (this.field.getPseudoWeather('Gravity')) {
				this.attrLastMove('[still]');
				this.add('cant', source, 'move: Gravity', move);
				return null;
			}
		},
		condition: {
			duration: 3,
			onStart(target) {
				if (['Diglett', 'Dugtrio', 'Palossand', 'Sandygast'].includes(target.baseSpecies.baseSpecies) ||
						target.baseSpecies.name === 'Gengar-Mega') {
					this.add('-immune', target);
					return null;
				}
				if (target.volatiles['smackdown'] || target.volatiles['ingrain']) return false;
				this.add('-start', target, 'Telekinesis');
			},
			onAccuracyPriority: -1,
			onAccuracy(accuracy, target, source, move) {
				if (move && !move.ohko) return true;
			},
			onImmunity(type) {
				if (type === 'Ground') return false;
			},
			onUpdate(pokemon) {
				if (pokemon.baseSpecies.name === 'Gengar-Mega') {
					delete pokemon.volatiles['telekinesis'];
					this.add('-end', pokemon, 'Telekinesis', '[silent]');
				}
			},
			onResidualOrder: 19,
			onEnd(target) {
				this.add('-end', target, 'Telekinesis');
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Clever",
	},
	teleport: {
		num: 100,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Teleport",
		pp: 20,
		priority: -6,
		flags: {},
		onTry(source) {
			return !!this.canSwitch(source.side);
		},
		selfSwitch: true,
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'heal'},
		contestType: "Cool",
	},
	terablast: {
		num: 851,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Tera Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon, target) {
			if (pokemon.terastallized) {
				move.type = pokemon.teraType;
			}
		},
		onModifyMove(move, pokemon) {
			if (pokemon.terastallized && pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) {
				move.category = 'Physical';
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
	},
	terrainpulse: {
		num: 805,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Terrain Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		onModifyType(move, pokemon) {
			if (!pokemon.isGrounded()) return;
			switch (this.field.terrain) {
			case 'electricterrain':
				move.type = 'Electric';
				break;
			case 'grassyterrain':
				move.type = 'Grass';
				break;
			case 'mistyterrain':
				move.type = 'Fairy';
				break;
			case 'psychicterrain':
				move.type = 'Psychic';
				break;
			}
		},
		onModifyMove(move, pokemon) {
			if (this.field.terrain && pokemon.isGrounded()) {
				move.basePower *= 2;
				this.debug('BP doubled in Terrain');
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
	},
	thief: {
		num: 168,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Thief",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Thief', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Tough",
	},
	thousandarrows: {
		num: 614,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Thousand Arrows",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onEffectiveness(typeMod, target, type, move) {
			if (move.type !== 'Ground') return;
			if (!target) return; // avoid crashing when called from a chat plugin
			// ignore effectiveness if the target is Flying type and immune to Ground
			if (!target.runImmunity('Ground')) {
				if (target.hasType('Flying')) return 0;
			}
		},
		volatileStatus: 'smackdown',
		ignoreImmunity: {'Ground': true},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		zMove: {basePower: 180},
		contestType: "Beautiful",
	},
	thousandwaves: {
		num: 615,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Past",
		name: "Thousand Waves",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onHit(target, source, move) {
			if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		contestType: "Tough",
	},
	thrash: {
		num: 37,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Thrash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		contestType: "Tough",
	},
	throatchop: {
		num: 675,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Throat Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		condition: {
			duration: 2,
			onStart(target) {
				this.add('-start', target, 'Throat Chop', '[silent]');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.dex.moves.get(moveSlot.id).flags['sound']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (!move.isZ && !move.isMax && move.flags['sound']) {
					this.add('cant', pokemon, 'move: Throat Chop');
					return false;
				}
			},
			onModifyMove(move, pokemon, target) {
				if (!move.isZ && !move.isMax && move.flags['sound']) {
					this.add('cant', pokemon, 'move: Throat Chop');
					return false;
				}
			},
			onResidualOrder: 22,
			onEnd(target) {
				this.add('-end', target, 'Throat Chop', '[silent]');
			},
		},
		secondary: {
			chance: 100,
			onHit(target) {
				target.addVolatile('throatchop');
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	thunder: {
		num: 87,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Thunder",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			switch (target?.effectiveWeather()) {
			case 'raindance':
			case 'primordialsea':
				move.accuracy = true;
				break;
			case 'sunnyday':
			case 'desolateland':
				move.accuracy = 50;
				break;
			}
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	thunderbolt: {
		num: 85,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Thunderbolt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	thundercage: {
		num: 819,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Thunder Cage",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Electric",
	},
	thunderfang: {
		num: 422,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Thunder Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'par',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	thunderouskick: {
		num: 823,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Thunderous Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fighting",
	},
	thunderpunch: {
		num: 9,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Thunder Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	thundershock: {
		num: 84,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Thunder Shock",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	thunderwave: {
		num: 86,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Thunder Wave",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'par',
		ignoreImmunity: false,
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {boost: {spd: 1}},
		contestType: "Cool",
	},
	tickle: {
		num: 321,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Tickle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		boosts: {
			atk: -1,
			def: -1,
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	tidyup: {
		num: 882,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tidy Up",
		pp: 10,
		priority: 0,
		flags: {},
		onHit(pokemon) {
			let success = false;
			for (const active of this.getAllActive()) {
				if (active.removeVolatile('substitute')) success = true;
			}
			const removeAll = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			const sides = [pokemon.side, ...pokemon.side.foeSidesWithConditions()];
			for (const side of sides) {
				for (const sideCondition of removeAll) {
					if (side.removeSideCondition(sideCondition)) {
						this.add('-sideend', side, this.dex.conditions.get(sideCondition).name);
						success = true;
					}
				}
			}
			if (success) this.add('-activate', pokemon, 'move: Tidy Up');
			return !!this.boost({atk: 1, spe: 1}, pokemon, pokemon, null, false, true) || success;
		},
		secondary: null,
		target: "self",
		type: "Normal",
	},
	topsyturvy: {
		num: 576,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Topsy-Turvy",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			let success = false;
			let i: BoostID;
			for (i in target.boosts) {
				if (target.boosts[i] === 0) continue;
				target.boosts[i] = -target.boosts[i];
				success = true;
			}
			if (!success) return false;
			this.add('-invertboost', target, '[from] move: Topsy-Turvy');
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
	},
	torchsong: {
		num: 871,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Torch Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
	},
	torment: {
		num: 259,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Torment",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'torment',
		condition: {
			noCopy: true,
			onStart(pokemon, source, effect) {
				if (pokemon.volatiles['dynamax']) {
					delete pokemon.volatiles['torment'];
					return false;
				}
				if (effect?.id === 'gmaxmeltdown') this.effectState.duration = 3;
				this.add('-start', pokemon, 'Torment');
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Torment');
			},
			onDisableMove(pokemon) {
				if (pokemon.lastMove && pokemon.lastMove.id !== 'struggle') pokemon.disableMove(pokemon.lastMove.id);
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	toxic: {
		num: 92,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Toxic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		// No Guard-like effect for Poison-type users implemented in Scripts#tryMoveHit
		status: 'tox',
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	toxicspikes: {
		num: 390,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Toxic Spikes",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'toxicspikes',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Toxic Spikes');
				this.effectState.layers = 1;
			},
			onSideRestart(side) {
				if (this.effectState.layers >= 2) return false;
				this.add('-sidestart', side, 'move: Toxic Spikes');
				this.effectState.layers++;
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Poison')) {
					this.add('-sideend', pokemon.side, 'move: Toxic Spikes', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('toxicspikes');
				} else if (pokemon.hasType('Steel') || pokemon.hasItem('heavydutyboots')) {
					return;
				} else if (this.effectState.layers >= 2) {
					pokemon.trySetStatus('tox', pokemon.side.foe.active[0]);
				} else {
					pokemon.trySetStatus('psn', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	toxicthread: {
		num: 672,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Toxic Thread",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'psn',
		boosts: {
			spe: -1,
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {boost: {spe: 1}},
		contestType: "Tough",
	},
	trailblaze: {
		num: 885,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Trailblaze",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	transform: {
		num: 144,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Transform",
		pp: 10,
		priority: 0,
		flags: {allyanim: 1},
		onHit(target, pokemon) {
			if (!pokemon.transformInto(target)) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Clever",
	},
	triattack: {
		num: 161,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Tri Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('brn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('frz', source);
				}
			},
		},
		target: "normal",
		type: "Normal",
		contestType: "Beautiful",
	},
	trick: {
		num: 271,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Trick",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onTryImmunity(target) {
			return !target.hasAbility('stickyhold');
		},
		onHit(target, source, move) {
			const yourItem = target.takeItem(source);
			const myItem = source.takeItem();
			if (target.item || source.item || (!yourItem && !myItem)) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			if (
				(myItem && !this.singleEvent('TakeItem', myItem, source.itemState, target, source, move, myItem)) ||
				(yourItem && !this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem))
			) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			this.add('-activate', source, 'move: Trick', '[of] ' + target);
			if (myItem) {
				target.setItem(myItem);
				this.add('-item', target, myItem, '[from] move: Trick');
			} else {
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Trick');
			}
			if (yourItem) {
				source.setItem(yourItem);
				this.add('-item', source, yourItem, '[from] move: Trick');
			} else {
				this.add('-enditem', source, myItem, '[silent]', '[from] move: Trick');
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spe: 2}},
		contestType: "Clever",
	},
	trickortreat: {
		num: 567,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Trick-or-Treat",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.hasType('Ghost')) return false;
			if (!target.addType('Ghost')) return false;
			this.add('-start', target, 'typeadd', 'Ghost', '[from] move: Trick-or-Treat');

			if (target.side.active.length === 2 && target.position === 1) {
				// Curse Glitch
				const action = this.queue.willMove(target);
				if (action && action.move.id === 'curse') {
					action.targetLoc = -1;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Cute",
	},
	trickroom: {
		num: 433,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Trick Room",
		pp: 5,
		priority: -7,
		flags: {mirror: 1},
		pseudoWeather: 'trickroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onFieldStart(target, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-fieldstart', 'move: Trick Room', '[of] ' + source, '[persistent]');
				} else {
					this.add('-fieldstart', 'move: Trick Room', '[of] ' + source);
				}
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('trickroom');
			},
			// Speed modification is changed in Pokemon.getActionSpeed() in sim/pokemon.js
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 1,
			onFieldEnd() {
				this.add('-fieldend', 'move: Trick Room');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMove: {boost: {accuracy: 1}},
		contestType: "Clever",
	},
	triplearrows: {
		num: 843,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Triple Arrows",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		secondaries: [
			{
				chance: 50,
				boosts: {
					def: -1,
				},
			}, {
				chance: 30,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Fighting",
	},
	tripleaxel: {
		num: 813,
		accuracy: 90,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			return 20 * move.hit;
		},
		category: "Physical",
		name: "Triple Axel",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 3,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Ice",
		zMove: {basePower: 120},
		maxMove: {basePower: 140},
	},
	tripledive: {
		num: 865,
		accuracy: 95,
		basePower: 30,
		category: "Physical",
		name: "Triple Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 3,
		secondary: null,
		target: "normal",
		type: "Water",
	},
	triplekick: {
		num: 167,
		accuracy: 90,
		basePower: 10,
		basePowerCallback(pokemon, target, move) {
			return 10 * move.hit;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Triple Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 3,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 120},
		maxMove: {basePower: 80},
		contestType: "Cool",
	},
	tropkick: {
		num: 688,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Trop Kick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Cute",
	},
	trumpcard: {
		num: 376,
		accuracy: true,
		basePower: 0,
		basePowerCallback(source, target, move) {
			const callerMoveId = move.sourceEffect || move.id;
			const moveSlot = callerMoveId === 'instruct' ? source.getMoveData(move.id) : source.getMoveData(callerMoveId);
			let bp;
			if (!moveSlot) {
				bp = 40;
			} else {
				switch (moveSlot.pp) {
				case 0:
					bp = 200;
					break;
				case 1:
					bp = 80;
					break;
				case 2:
					bp = 60;
					break;
				case 3:
					bp = 50;
					break;
				default:
					bp = 40;
					break;
				}
			}

			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		isNonstandard: "Past",
		name: "Trump Card",
		pp: 5,
		noPPBoosts: true,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cool",
	},
	twinbeam: {
		num: 888,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Twin Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Cool",
	},
	twineedle: {
		num: 41,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		isNonstandard: "Past",
		name: "Twineedle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: {
			chance: 20,
			status: 'psn',
		},
		target: "normal",
		type: "Bug",
		maxMove: {basePower: 100},
		contestType: "Cool",
	},
	twinkletackle: {
		num: 656,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		isNonstandard: "Past",
		name: "Twinkle Tackle",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "fairiumz",
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Cool",
	},
	twister: {
		num: 239,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Twister",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "allAdjacentFoes",
		type: "Dragon",
		contestType: "Cool",
	},
	uturn: {
		num: 369,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "U-turn",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cute",
	},
	uproar: {
		num: 253,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Uproar",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		self: {
			volatileStatus: 'uproar',
		},
		onTryHit(target) {
			const activeTeam = target.side.activeTeam();
			const foeActiveTeam = target.side.foe.activeTeam();
			for (const [i, allyActive] of activeTeam.entries()) {
				if (allyActive && allyActive.status === 'slp') allyActive.cureStatus();
				const foeActive = foeActiveTeam[i];
				if (foeActive && foeActive.status === 'slp') foeActive.cureStatus();
			}
		},
		condition: {
			duration: 3,
			onStart(target) {
				this.add('-start', target, 'Uproar');
			},
			onResidual(target) {
				if (target.volatiles['throatchop']) {
					target.removeVolatile('uproar');
					return;
				}
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['uproar'];
				}
				this.add('-start', target, 'Uproar', '[upkeep]');
			},
			onResidualOrder: 28,
			onResidualSubOrder: 1,
			onEnd(target) {
				this.add('-end', target, 'Uproar');
			},
			onLockMove: 'uproar',
			onAnySetStatus(status, pokemon) {
				if (status.id === 'slp') {
					if (pokemon === this.effectState.target) {
						this.add('-fail', pokemon, 'slp', '[from] Uproar', '[msg]');
					} else {
						this.add('-fail', pokemon, 'slp', '[from] Uproar');
					}
					return null;
				}
			},
		},
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		contestType: "Cute",
	},
	vacuumwave: {
		num: 410,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Vacuum Wave",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	vcreate: {
		num: 557,
		accuracy: 95,
		basePower: 180,
		category: "Physical",
		name: "V-create",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -1,
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMove: {basePower: 220},
		contestType: "Cool",
	},
	veeveevolley: {
		num: 741,
		accuracy: true,
		basePower: 0,
		basePowerCallback(pokemon) {
			const bp = Math.floor((pokemon.happiness * 10) / 25) || 1;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		isNonstandard: "LGPE",
		name: "Veevee Volley",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cute",
	},
	venomdrench: {
		num: 599,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Venom Drench",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			if (target.status === 'psn' || target.status === 'tox') {
				return !!this.boost({atk: -1, spa: -1, spe: -1}, target, source, move);
			}
			return false;
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
	},
	venoshock: {
		num: 474,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Venoshock",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Beautiful",
	},
	victorydance: {
		num: 837,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Unobtainable",
		name: "Victory Dance",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 1,
			def: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Fighting",
	},
	vinewhip: {
		num: 22,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Vine Whip",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
	},
	visegrip: {
		num: 11,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Vise Grip",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	vitalthrow: {
		num: 233,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		isNonstandard: "Past",
		name: "Vital Throw",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	voltswitch: {
		num: 521,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Volt Switch",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	volttackle: {
		num: 344,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Volt Tackle",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	wakeupslap: {
		num: 358,
		accuracy: 100,
		basePower: 70,
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'slp' || target.hasAbility('comatose')) {
				this.debug('BP doubled on sleeping target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		isNonstandard: "Past",
		name: "Wake-Up Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.status === 'slp') target.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
	},
	waterfall: {
		num: 127,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Waterfall",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Water",
		contestType: "Tough",
	},
	watergun: {
		num: 55,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Water Gun",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cute",
	},
	waterpledge: {
		num: 518,
		accuracy: 100,
		basePower: 80,
		basePowerCallback(target, source, move) {
			if (['firepledge', 'grasspledge'].includes(move.sourceEffect)) {
				this.add('-combine');
				return 150;
			}
			return 80;
		},
		category: "Special",
		name: "Water Pledge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		onPrepareHit(target, source, move) {
			for (const action of this.queue) {
				if (action.choice !== 'move') continue;
				const otherMove = action.move;
				const otherMoveUser = action.pokemon;
				if (
					!otherMove || !action.pokemon || !otherMoveUser.isActive ||
					otherMoveUser.fainted || action.maxMove || action.zmove
				) {
					continue;
				}
				if (otherMoveUser.isAlly(source) && ['firepledge', 'grasspledge'].includes(otherMove.id)) {
					this.queue.prioritizeAction(action, move);
					this.add('-waiting', source, otherMoveUser);
					return null;
				}
			}
		},
		onModifyMove(move) {
			if (move.sourceEffect === 'grasspledge') {
				move.type = 'Grass';
				move.forceSTAB = true;
				move.sideCondition = 'grasspledge';
			}
			if (move.sourceEffect === 'firepledge') {
				move.type = 'Water';
				move.forceSTAB = true;
				move.self = {sideCondition: 'waterpledge'};
			}
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'Water Pledge');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 7,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'Water Pledge');
			},
			onModifyMove(move, pokemon) {
				if (move.secondaries && move.id !== 'secretpower') {
					this.debug('doubling secondary chance');
					for (const secondary of move.secondaries) {
						if (pokemon.hasAbility('serenegrace') && secondary.volatileStatus === 'flinch') continue;
						if (secondary.chance) secondary.chance *= 2;
					}
					if (move.self?.chance) move.self.chance *= 2;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	waterpulse: {
		num: 352,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Water Pulse",
		pp: 20,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Water",
		contestType: "Beautiful",
	},
	watershuriken: {
		num: 594,
		accuracy: 100,
		basePower: 15,
		basePowerCallback(pokemon, target, move) {
			if (pokemon.species.name === 'Greninja-Ash' && pokemon.hasAbility('battlebond') &&
				!pokemon.transformed) {
				return move.basePower + 5;
			}
			return move.basePower;
		},
		category: "Special",
		name: "Water Shuriken",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
	},
	watersport: {
		num: 346,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Water Sport",
		pp: 15,
		priority: 0,
		flags: {nonsky: 1},
		pseudoWeather: 'watersport',
		condition: {
			duration: 5,
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Water Sport', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Fire') {
					this.debug('water sport weaken');
					return this.chainModify([1352, 4096]);
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 3,
			onFieldEnd() {
				this.add('-fieldend', 'move: Water Sport');
			},
		},
		secondary: null,
		target: "all",
		type: "Water",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	waterspout: {
		num: 323,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower * pokemon.hp / pokemon.maxhp;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Water Spout",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		contestType: "Beautiful",
	},
	wavecrash: {
		num: 834,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Wave Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Water",
	},
	weatherball: {
		num: 311,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Weather Ball",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.type = 'Fire';
				break;
			case 'raindance':
			case 'primordialsea':
				move.type = 'Water';
				break;
			case 'sandstorm':
				move.type = 'Rock';
				break;
			case 'hail':
			case 'snow':
				move.type = 'Ice';
				break;
			}
		},
		onModifyMove(move, pokemon) {
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.basePower *= 2;
				break;
			case 'raindance':
			case 'primordialsea':
				move.basePower *= 2;
				break;
			case 'sandstorm':
				move.basePower *= 2;
				break;
			case 'hail':
			case 'snow':
				move.basePower *= 2;
				break;
			}
			this.debug('BP: ' + move.basePower);
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Beautiful",
	},
	whirlpool: {
		num: 250,
		accuracy: 85,
		basePower: 35,
		category: "Special",
		name: "Whirlpool",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Beautiful",
	},
	whirlwind: {
		num: 18,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Whirlwind",
		pp: 20,
		priority: -6,
		flags: {reflectable: 1, mirror: 1, bypasssub: 1, allyanim: 1, wind: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	wickedblow: {
		num: 817,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Wicked Blow",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	wickedtorque: {
		num: 897,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Unobtainable",
		name: "Wicked Torque",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: {
			chance: 10,
			status: 'slp',
		},
		target: "normal",
		type: "Dark",
	},
	wideguard: {
		num: 469,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wide Guard",
		pp: 10,
		priority: 3,
		flags: {snatch: 1},
		sideCondition: 'wideguard',
		onTry() {
			return !!this.queue.willAct();
		},
		onHitSide(side, source) {
			source.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onSideStart(target, source) {
				this.add('-singleturn', source, 'Wide Guard');
			},
			onTryHitPriority: 4,
			onTryHit(target, source, move) {
				// Wide Guard blocks all spread moves
				if (move?.target !== 'allAdjacent' && move.target !== 'allAdjacentFoes') {
					return;
				}
				if (move.isZ || move.isMax) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				this.add('-activate', target, 'move: Wide Guard');
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				return this.NOT_FAIL;
			},
		},
		secondary: null,
		target: "allySide",
		type: "Rock",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
	},
	wildboltstorm: {
		num: 847,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		isNonstandard: "Unobtainable",
		name: "Wildbolt Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 20,
			status: 'par',
		},
		target: "allAdjacentFoes",
		type: "Electric",
	},
	wildcharge: {
		num: 528,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Wild Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Tough",
	},
	willowisp: {
		num: 261,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Will-O-Wisp",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'brn',
		secondary: null,
		target: "normal",
		type: "Fire",
		zMove: {boost: {atk: 1}},
		contestType: "Beautiful",
	},
	wingattack: {
		num: 17,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Wing Attack",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Flying",
		contestType: "Cool",
	},
	wish: {
		num: 273,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wish",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		slotCondition: 'Wish',
		condition: {
			duration: 2,
			onStart(pokemon, source) {
				this.effectState.hp = source.maxhp / 2;
			},
			onResidualOrder: 4,
			onEnd(target) {
				if (target && !target.fainted) {
					const damage = this.heal(this.effectState.hp, target, target);
					if (damage) {
						this.add('-heal', target, target.getHealth, '[from] move: Wish', '[wisher] ' + this.effectState.source.name);
					}
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
	},
	withdraw: {
		num: 110,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Withdraw",
		pp: 40,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMove: {boost: {def: 1}},
		contestType: "Cute",
	},
	wonderroom: {
		num: 472,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wonder Room",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'wonderroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onModifyMove(move, source, target) {
				// This code is for moves that use defensive stats as the attacking stat; see below for most of the implementation
				if (!move.overrideOffensiveStat) return;
				const statAndBoosts = move.overrideOffensiveStat;
				if (!['def', 'spd'].includes(statAndBoosts)) return;
				move.overrideOffensiveStat = statAndBoosts === 'def' ? 'spd' : 'def';
				this.hint(`${move.name} uses ${statAndBoosts === 'def' ? '' : 'Sp. '}Def boosts when Wonder Room is active.`);
			},
			onFieldStart(field, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-fieldstart', 'move: Wonder Room', '[of] ' + source, '[persistent]');
				} else {
					this.add('-fieldstart', 'move: Wonder Room', '[of] ' + source);
				}
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('wonderroom');
			},
			// Swapping defenses partially implemented in sim/pokemon.js:Pokemon#calculateStat and Pokemon#getStat
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 5,
			onFieldEnd() {
				this.add('-fieldend', 'move: Wonder Room');
			},
		},
		secondary: null,
		target: "all",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},
	woodhammer: {
		num: 452,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Wood Hammer",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Tough",
	},
	workup: {
		num: 526,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Work Up",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			spa: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Tough",
	},
	worryseed: {
		num: 388,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Worry Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onTryImmunity(target) {
			// Truant and Insomnia have special treatment; they fail before
			// checking accuracy and will double Stomping Tantrum's BP
			if (target.ability === 'truant' || target.ability === 'insomnia') {
				return false;
			}
		},
		onTryHit(target) {
			if (target.getAbility().isPermanent) {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('insomnia');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Insomnia', '[from] move: Worry Seed');
				if (pokemon.status === 'slp') {
					pokemon.cureStatus();
				}
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
	},
	wrap: {
		num: 35,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Wrap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	wringout: {
		num: 378,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target, move) {
			const hp = target.hp;
			const maxHP = target.maxhp;
			const bp = Math.floor(Math.floor((120 * (100 * Math.floor(hp * 4096 / maxHP)) + 2048 - 1) / 4096) / 100) || 1;
			this.debug('BP for ' + hp + '/' + maxHP + " HP: " + bp);
			return bp;
		},
		category: "Special",
		isNonstandard: "Past",
		name: "Wring Out",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 190},
		maxMove: {basePower: 140},
		contestType: "Tough",
	},
	xscissor: {
		num: 404,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "X-Scissor",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Cool",
	},
	yawn: {
		num: 281,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Yawn",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'yawn',
		onTryHit(target) {
			if (target.status || !target.runStatusImmunity('slp')) {
				return false;
			}
		},
		condition: {
			noCopy: true, // doesn't get copied by Baton Pass
			duration: 2,
			onStart(target, source) {
				this.add('-start', target, 'move: Yawn', '[of] ' + source);
			},
			onResidualOrder: 23,
			onEnd(target) {
				this.add('-end', target, 'move: Yawn', '[silent]');
				target.trySetStatus('slp', this.effectState.source);
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Cute",
	},
	zapcannon: {
		num: 192,
		accuracy: 50,
		basePower: 120,
		category: "Special",
		name: "Zap Cannon",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	zenheadbutt: {
		num: 428,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Zen Headbutt",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	zingzap: {
		num: 716,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Zing Zap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	zippyzap: {
		num: 729,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "LGPE",
		name: "Zippy Zap",
		pp: 10,
		priority: 2,
		flags: {contact: 1, protect: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					evasion: 1,
				},
			},
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	/* Fake Clover Exclusive Move */
	maxmemeitude: {
		accuracy: true,
		basePower: 10,
		category: "Physical",
		name: "Max Memeitude",
		pp: 10,
		priority: 0,
		flags: {},
		isMax: true,
		target: "adjacentFoe",
		type: "???",
		contestType: "Cool",
	},
	/* Clover Exclusive Moves */
	sleazyspores: {
		num: 69056,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sleazy Spores",
		pp: 10,
		priority: 0,
		flags: {reflectable: 1, powder: 1},
		sideCondition: 'sleazyspores',
		condition: {
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Sleazy Spores');
			},
			onSwitchIn(pokemon) {
				if (!pokemon.runStatusImmunity('powder')) return;
				if (pokemon.hasItem('heavydutyboots')) return;
				this.add('-activate', pokemon, 'move: Sleazy Spores');
				this.boost({spe: -1}, pokemon, this.effectState.source, this.dex.getActiveMove('sleazyspores'));
			},
		},
		secondary: null,
		pressureTarget: "self",
		target: "foeSide",
		type: "Grass",
		isNonstandard: "Future",
	},
	slimegulp: {
		num: 69044,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Slime Gulp",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "Poison",
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		isNonstandard: "Future",
	},
	inverseroom: {
		num: 69032,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Inverse Room",
		pp: 15,
		priority: 0,
		target: "all",
		type: "???",
		flags: {mirror: 1},
		pseudoWeather: 'inverseroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onNegateImmunity: false,
			onEffectivenessPriority: 1,
			onEffectiveness(typeMod, target, type, move) {
				// The effectiveness of Freeze Dry on Water isn't reverted
				if (move && move.id === 'freezedry' && type === 'Water') return;
				if (move && move.id === '1000folds' && type === 'Steel') return;
				if (move && move.id === 'airshooter' && type === 'Flying') return;
				if (move && !this.dex.getImmunity(move, type)) return 1;
				return -typeMod;
			},
			onFieldStart(target, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Inverse Room', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Inverse Room');
				}
				this.add('-message', 'The battlefield became upside down!');
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('inverseroom');
			},
			onFieldResidualOrder: 23,
			onFieldEnd() {
				this.add('-fieldend', 'move: Inverse Room');
			},
		},
		isNonstandard: "Future",
	},
	fruitpunch: {
		num: 69031,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Fruit Punch",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Fairy",
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		isNonstandard: "Future",
	},
	dragonfist: {
		num: 69040,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Dragon Fist",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Dragon",
		secondary: {
			chance: 10,
			status: 'par',
		},
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		isNonstandard: "Future",
	},
	lickclean: {
		num: 69045,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Lick Clean",
		pp: 20,
		priority: 0,
		target: "normal",
		type: "Water",
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target, source) {
			const positiveBoosts = target.positiveBoosts();
			const adjustedBoosts: SparseBoostsTable = {};
			for (const statName in target.boosts) {
				const stage = target.boosts[statName as BoostID];
				adjustedBoosts[statName as BoostID] = target.boosts[statName as BoostID];
				if (stage > 0) {
					adjustedBoosts[statName as BoostID] = 0;
				}
			}

			if (positiveBoosts > 0) {
				const factor = 12.5 * Math.pow(2, Math.max(4, positiveBoosts));
				const amount = this.modify(source.maxhp, factor);
				target.setBoost(adjustedBoosts);
				source.heal(amount);
				this.add('-clearpositiveboost', target, source, 'move: Lick Clean');
				this.add('-heal', source, source.getHealth, '[from] move: Lick Clean');
			}
		},
		isNonstandard: "Future",
	},
	speedweed: {
		num: 69041,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Speed Weed",
		pp: 30,
		priority: 1,
		target: "normal",
		type: "Grass",
		flags: {contact: 1, protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	overbite: {
		num: 69036,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Overbite",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Dark",
		onAfterHit(target, source) {
			this.damage(Math.round(source.maxhp / 2), source, source, this.dex.conditions.get('Overbite'), true);
		},
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	"1000folds": {
		num: 69047,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "1000 Folds",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "Steel",
		flags: {contact: 1, mirror: 1, slicing: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return 0;
		},
		breaksProtect: true,
		infiltrates: true,
		onTryHit(pokemon) {
			if (pokemon.runImmunity('Steel')) {
				pokemon.side.removeSideCondition('reflect');
				pokemon.side.removeSideCondition('lightscreen');
				pokemon.side.removeSideCondition('auroraveil');
				pokemon.side.removeSideCondition('mirageveil');
			}
		},
		isNonstandard: "Future",
	},
	warhead: {
		num: 69042,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Warhead",
		pp: 5,
		priority: 0,
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Steel",
		flags: {protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	weirdflex: {
		num: 69043,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Weird Flex",
		pp: 15,
		priority: 4,
		target: "self",
		type: "Fighting",
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			def: 1,
			spe: -2,
		},
		volatileStatus: 'weirdflex',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Weird Flex');
			},
			onDamagePriority: -10,
			onDamage(damage, target, source, effect) {
				if (effect?.effectType === 'Move' && damage >= target.hp) {
					this.add('-activate', target, 'move: Weird Flex');
					return target.hp - 1;
				}
			},
			onFoeRedirectTargetPriority: 1,
			onFoeRedirectTarget(target, source, source2, move) {
				if (!this.effectState.target.isSkyDropped() && this.validTarget(this.effectState.target, source, move.target)) {
					if (move.smartTarget) move.smartTarget = false;
					this.debug("Weird Flex redirected target of move");
					return this.effectState.target;
				}
			},
		},
		isNonstandard: "Future",
	},
	scorchedearth: {
		num: 69046,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Scorched Earth",
		pp: 10,
		priority: 0,
		target: "allAdjacent",
		type: "Ground",
		flags: {protect: 1, mirror: 1},
		onAfterMove(source) {
			if (source.isGrounded()) {
				source.trySetStatus('brn');
			}
		},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		isNonstandard: "Future",
	},
	hulkup: {
		num: 69051,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hulk Up",
		pp: 10,
		priority: 0,
		target: "self",
		type: "Fighting",
		onHit(target) {
			if (target.hp <= target.maxhp / 2) {
				this.boost({
					atk: 2,
					def: 2,
				});
			} else {
				this.boost({
					atk: 1,
					def: 1,
				});
			}
		},
		flags: {snatch: 1},
		isNonstandard: "Future",
	},
	focusmunch: {
		num: 69034,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Focus Munch",
		pp: 10,
		priority: -3,
		target: "self",
		type: "Fighting",
		flags: {},
		beforeTurnCallback(pokemon) {
			pokemon.addVolatile('focusmunch');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['focusmunch'] && pokemon.volatiles['focusmunch'].lostFocus) {
				this.add('cant', pokemon, 'Focus Munch', 'Focus Munch');
				return true;
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Focus Munch');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					pokemon.volatiles['focusmunch'].lostFocus = true;
				}
			},
		},
		heal: [1, 2],
		boosts: {accuracy: 1},
		isNonstandard: "Future",
	},
	mop: {
		num: 69033,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Mop",
		pp: 10,
		priority: 0,
		target: "self",
		type: "Fairy",
		flags: {},
		onHit(pokemon) {
			const sideConditions = [
				'spikes',
				'toxicspikes',
				'stealthrock',
				'stickyweb',
				'sleazyspores',
				'gmaxsteelsurge',
				'shattershard',
				'luckyroll',
				'magictrap',
				'pillowpile',
				'wiretap',
				'mines',
				'brambles',
				'icicles',
				'scrapmetal',
				'legotrap',
				'hotcoals',
				'acidtrap',
				'discombubbles',
			];
			const removedConditions = [];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Mop', '[of] ' + pokemon);
					removedConditions.push(condition);
				}
			}
			if (removedConditions.length > 0) {
				this.boost({accuracy: 1});
			}
		},
		isNonstandard: "Future",
	},
	quicksand: {
		num: 69037,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Quick Sand",
		pp: 20,
		priority: 1,
		target: "normal",
		type: "Ground",
		flags: {protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	thinkfast: {
		num: 69038,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Think Fast",
		pp: 20,
		priority: 1,
		target: "normal",
		type: "Psychic",
		flags: {protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	boltbeam: {
		num: 69048,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Boltbeam",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "Electric",
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		canContinue: true,
		onTryHit(target, source, move) {
			if (move.hit === 2) {
				move.type = 'Ice';
			}
		},
	},
	checkem: {
		num: 69052,
		accuracy: 100,
		basePower: 25,
		category: "Special",
		name: "Check 'Em",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Psychic",
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		isNonstandard: "Future",
	},
	pixiepummel: {
		num: 69039,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Pixie Pummel",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Fairy",
		flags: {contact: 1, protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	gayagenda: {
		num: 69059,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Gay Agenda",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Fairy",
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'gayagenda',
		condition: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart(pokemon, source, effect) {
				if (!(pokemon.gender === 'M' && source.gender === 'M') && !(pokemon.gender === 'F' && source.gender === 'F')) {
					this.debug('incompatible gender');
					return false;
				}
				if (!this.runEvent('Gay Agenda', pokemon, source)) {
					this.debug('Gay Agenda event failed');
					return false;
				}

				if (effect.id === 'destinyknot') {
					this.add('-start', pokemon, 'Gay Agenda', '[from] item: Destiny Knot', '[of] ' + source);
				} else {
					this.add('-start', pokemon, 'Gay Agenda');
				}
			},
			onUpdate(pokemon) {
				if (this.effectState.source && !this.effectState.source.isActive && pokemon.volatiles['gayagenda']) {
					this.debug('Removing Gay Agenda volatile on ' + pokemon);
					pokemon.removeVolatile('gayagenda');
				}
			},
			onBeforeMovePriority: 2,
			onBeforeMove(pokemon, target, move) {
				this.add('-activate', pokemon, 'move: Gay Agenda', '[of] ' + this.effectState.source);
				if (this.randomChance(1, 2)) {
					this.add('cant', pokemon, 'Gay Agenda');
					return false;
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Gay Agenda', '[silent]');
			},
		},
		zMove: {effect: 'clearnegativeboost'},
		isNonstandard: "Future",
	},
	spooperpower: {
		num: 69057,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Spooperpower",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Ghost",
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		isNonstandard: "Future",
	},
	greatrage: {
		num: 69053,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Great Rage",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "Grass",
		flags: {sound: 1, protect: 1, mirror: 1, bypasssub: 1},
		isNonstandard: "Future",
	},
	wowwiener: {
		num: 69054,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Wow Wiener",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Fire",
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		isNonstandard: "Future",
	},
	plunder: {
		num: 69055,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Plunder",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Water",
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Plunder', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Plunder', '[of] ' + target);
		},
		isNonstandard: "Future",
	},
	blobbybop: {
		num: 69060,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Blobby Bop",
		pp: 15,
		priority: 0,
		target: "normal",
		type: "Ice",
		flags: {contact: 1, protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	banhammer: {
		num: 69049,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Ban Hammer",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "Normal",
		flags: {protect: 1, mirror: 1, hammer: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('torment');
				target.addVolatile('taunt');
			}
		},
		isNonstandard: "Future",
	},
	homerunbat: {
		num: 69050,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Homerun Bat",
		pp: 10,
		priority: -6,
		target: "normal",
		type: "Normal",
		flags: {contact: 1, protect: 1},
		forceSwitch: true,
		isNonstandard: "Future",
	},
	elbowdrop: {
		num: 69058,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Elbow Drop",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Ghost",
		flags: {contact: 1, protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	anattack: {
		num: 69022,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "An Attack",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "???",
		zMove: {basePower: 190},
		isNonstandard: "Future",
	},
	chaosdunk: {
		num: 69017,
		accuracy: 100,
		basePower: 110,
		category: "Physical",
		name: "Chaos Dunk",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMove: {basePower: 185},
		isNonstandard: "Future",
	},
	comengo: {
		num: 69002,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Come n' Go",
		pp: 30,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Water",
		zMove: {basePower: 140},
		isNonstandard: "Future",
	},
	dailydose: {
		num: 69018,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Daily Dose",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('psn', source);
				} else if (result === 1) {
					target.trySetStatus('tox', source);
				} else {
					target.trySetStatus('slp', source);
				}
			},
		},
		target: "normal",
		type: "Poison",
		zMove: {basePower: 160},
		isNonstandard: "Future",
	},
	decaydrain: {
		num: 69012,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Decay Drain",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {basePower: 180},
		isNonstandard: "Future",
	},
	dildocannon: {
		num: 69013,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Dildo Cannon",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMove: {basePower: 140},
		isNonstandard: "Future",
	},
	enema: {
		num: 69001,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Enema",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {basePower: 140},
		isNonstandard: "Future",
	},
	erosionwave: {
		num: 69005,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Erosion Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Rock",
		zMove: {basePower: 175},
		isNonstandard: "Future",
	},
	falconpunch: {
		num: 69030,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Falcon Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Flying",
		zMove: {basePower: 180},
		isNonstandard: "Future",
	},
	firebomb: {
		num: 69020,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Fire Bomb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMove: {basePower: 180},
		isNonstandard: "Future",
	},
	fizzbitch: {
		num: 69019,
		accuracy: 80,
		basePower: 150,
		category: "Special",
		name: "Fizzbitch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Grass",
		zMove: {basePower: 200},
		isNonstandard: "Future",
	},
	foryou: {
		num: 69010,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "For You",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 180},
		isNonstandard: "Future",
	},
	futababreak: {
		num: 69015,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Futaba Break",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			if (pokemon.runImmunity('Grass')) {
				pokemon.side.removeSideCondition('reflect');
				pokemon.side.removeSideCondition('lightscreen');
				pokemon.side.removeSideCondition('auroraveil');
				pokemon.side.removeSideCondition('mirageveil');
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {basePower: 170},
		isNonstandard: "Future",
	},
	holyduty: {
		num: 69003,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Holy Duty",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		zMove: {basePower: 200},
		isNonstandard: "Future",
	},
	lactoseshot: {
		num: 69023,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Lactose Shot",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {basePower: 195},
		isNonstandard: "Future",
	},
	meme: {
		num: 69009,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Meme",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "???",
		zMove: {basePower: 120},
		isNonstandard: "Future",
	},
	overenergize: {
		num: 69021,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Overenergize",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {basePower: 200},
		isNonstandard: "Future",
	},
	owtheedge: {
		num: 69014,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Ow The Edge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {basePower: 190},
		isNonstandard: "Future",
	},
	pukeblood: {
		num: 69016,
		accuracy: 95,
		basePower: 130,
		category: "Special",
		name: "Puke Blood",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Bug",
		zMove: {basePower: 190},
		isNonstandard: "Future",
	},
	punchout: {
		num: 69004,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Punch Out",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 140},
		isNonstandard: "Future",
	},
	regenerate: {
		num: 69027,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Regenerate",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status) && pokemon.hp >= pokemon.maxhp) return false;
			pokemon.cureStatus();
		},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	riotshield: {
		num: 69028,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Riot Shield",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1},
		self: {
			sideCondition: 'safeguard',
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	shitpost: {
		num: 69026,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Shitpost",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Ground",
		zMove: {basePower: 190},
		isNonstandard: "Future",
	},
	spookout: {
		num: 69010,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Spook Out",
		pp: 10,
		priority: 3,
		flags: {sound: 1, protect: 1, mirror: 1, bypasssub: 1},
		onTry(pokemon, target) {
			if (!pokemon.hasAbility('numerouno') && pokemon.activeTurns > 1) {
				this.attrLastMove('[still]');
				this.add('-fail', pokemon);
				this.hint("Spook Out only works on your first turn out.");
				return null;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ghost",
		zMove: {basePower: 120},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	stratoblade: {
		num: 69006,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Strato Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Flying",
		zMove: {basePower: 175},
		isNonstandard: "Future",
	},
	supersnore: {
		num: 69007,
		accuracy: 100,
		basePower: 255,
		category: "Physical",
		name: "Super Snore",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		sleepUsable: true,
		onTryHit(target, source) {
			if (source.status !== 'slp' && !source.hasAbility('comatose') && !source.hasAbility('boardpowerz')) return false;
		},
		target: "normal",
		type: "Ice",
		zMove: {basePower: 220},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	swindle: {
		num: 69029,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Swindle",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
			!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-item', source, yourItem, '[from] move: Swindle', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {basePower: 180},
		isNonstandard: "Future",
	},
	toke: {
		num: 69025,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Toke",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: -1,
			spd: -1,
			atk: 2,
			spa: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Fire",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	toxiravage: {
		num: 69008,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Toxiravage",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMove: {basePower: 160},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	trigger: {
		num: 69024,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.volatiles.trigger || move.hit === 1) {
				pokemon.addVolatile('trigger');
			}
			return this.clampIntRange(move.basePower * pokemon.volatiles.trigger.multiplier, 1, 160);
		},
		category: "Special",
		name: "Trigger",

		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		condition: {
			duration: 2,
			onStart() {
				this.effectState.multiplier = 1;
			},
			onRestart() {
				if (this.effectState.multiplier < 4) {
					this.effectState.multiplier <<= 1;
				}
				this.effectState.duration = 2;
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {basePower: 100},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	sudoku: {
		num: 69035,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Sudoku",
		pp: 5,
		priority: 0,
		flags: {},
		selfdestruct: "ifHit",
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'healreplacement'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	slipturn: {
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Slip Turn",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	/* Clover CAP Moves */
	crusadercrash: {
		num: 42001,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Crusader Crash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	moregun: {
		num: 42002,
		accuracy: 100,
		basePower: 16,
		category: "Special",
		name: "More Gun",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 6,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	psychofists: {
		num: 42003,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Psycho Fists",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('psychicterrain');
				},
			},
		},
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	faradaycage: {
		num: 275,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Faraday Cage",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, nonsky: 1},
		volatileStatus: 'faradaycage',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'move: Faraday Cage');
			},
			onResidualOrder: 7,
			onResidual(pokemon) {
				this.heal(pokemon.baseMaxhp / 8);
			},
			onTrapPokemon(pokemon) {
				pokemon.tryTrap();
			},
			// groundedness implemented in battle.engine.js:BattlePokemon#isGrounded
			onDragOut(pokemon) {
				this.add('-activate', pokemon, 'move: Faraday Cage');
				return null;
			},
		},
		secondary: null,
		target: "self",
		type: "Electric",
		isNonstandard: "Future",
	},
	dragonburst: {
		num: 42005,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const ratio = pokemon.hp * 48 / pokemon.maxhp;
			if (ratio < 2) {
				return 200;
			}
			if (ratio < 5) {
				return 150;
			}
			if (ratio < 10) {
				return 120;
			}
			if (ratio < 17) {
				return 100;
			}
			if (ratio < 33) {
				return 90;
			}
			return 60;
		},
		category: "Special",
		name: "Dragon Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cute",
	},
	rockclock: {
		num: 42006,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		isNonstandard: "Future",
		name: "Rock Clock",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, punch: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Rock",
		contestType: "Tough",
	},
	awaken: {
		num: 42007,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Future",
		name: "Awaken",
		pp: 10,
		priority: 0,
		flags: {charge: 1, nonsky: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		boosts: {
			atk: 2,
			def: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Fighting",
		zMove: {boost: {atk: 1, def: 1, spa: 1, spd: 1, spe: 1}},
		contestType: "Smart",
	},
	voltaiccyclone: {
		num: 42008,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		isNonstandard: "Future",
		name: "Voltaic Cyclone",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'sleazyspores', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'sleazyspores', 'luckyroll'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		target: "allAdjacent",
		type: "Electric",
		contestType: "Cool",
	},
	boilover: {
		num: 42009,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Boil Over",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.type = 'Water';
				break;
			case 'raindance':
			case 'primordialsea':
				move.type = 'Fire';
				break;
			}
		},
		onModifyMove(move, pokemon) {
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.basePower *= 2;
				break;
			case 'raindance':
			case 'primordialsea':
				move.basePower *= 2;
				break;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {basePower: 200},
		maxMove: {basePower: 149},
		contestType: "Beautiful",
	},
	soulcrusher: {
		num: 42010,
		accuracy: 100,
		basePower: 10,
		category: "Special",
		isNonstandard: "Future",
		name: "Soul Crusher",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 1],
		/* lol */
		onBasePower(basePower, pokemon, target) {
			if (target.hp * 2 <= target.maxhp) {
				return this.chainModify(999);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Tough",
	},
	trickstab: {
		num: 42013,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Future",
		name: "Trick Stab",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		beforeMoveCallback(source, target, move) {
			if (source.illusion) move.willCrit = true;
		},
		onHit(target, source) {
			this.singleEvent('End', this.dex.abilities.get('Illusion'), source.abilityState, source);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cute",
	},
	tombstoner: {
		num: 42015,
		accuracy: 100,
		basePower: 300,
		category: "Physical",
		isNonstandard: "Future",
		name: "Tombstoner",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			move.basePower = Math.max(move.basePower * pokemon.hp / pokemon.maxhp, 100);
		},
		selfdestruct: "always",
		overrideOffensiveStat: "def",
		secondary: null,
		target: "allAdjacent",
		type: "Rock",
	},
	fruitjuice: {
		num: 42016,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			if (!pokemon.volatiles['stockpile'] || !pokemon.volatiles['stockpile'].layers) return false;
			return pokemon.volatiles['stockpile'].layers * 120;
		},
		category: "Special",
		isNonstandard: "Future",
		name: "Fruit Juice",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('stockpile');
		},
		secondary: {
			chance: 100,
			boosts: {
				spd: -2,
			},
		},
		target: "normal",
		type: "Fairy",
	},
	phantomfang: {
		num: 42017,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		isNonstandard: "Future",
		name: "Phantom Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'curse',
		},
		self: {
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Ghost",
	},
	phasethrough: {
		num: 42018,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Phase Through",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	coldcutter: {
		num: 42019,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		isNonstandard: "Future",
		name: "Cold Cutter",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		target: "normal",
		type: "Ice",
	},
	shadowscales: {
		num: 42020,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		isNonstandard: "Future",
		name: "Shadow Scales",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfBoost: {
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ghost",
	},
	clobber: {
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Clobber",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	wingsofcorrection: {
		accuracy: true,
		basePower: 150,
		category: "Special",
		isNonstandard: "Future",
		name: "Wings Of Correction",
		pp: 5,
		priority: -6,
		flags: {protect: 1, mirror: 1, bypasssub: 1},
		forceSwitch: true,
		onHit(target, source, move) {
			let success = false;
			const removeAll = [
				'reflect', 'lightscreen', 'auroraveil', 'mirageveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'sleazyspores', 'shattershard', 'fragments', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const sideCondition of removeAll) {
				if (target.side.removeSideCondition(sideCondition)) {
					if (!removeAll.includes(sideCondition)) continue;
					this.add('-sideend', target.side, this.dex.conditions.get(sideCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}

				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: Defog', '[of] ' + source);
					success = true;
				}
			}

			this.field.clearTerrain();
			this.field.clearWeather();
			return success;
		},
		secondary: null,
		target: "normal",
		type: "Flying",
	},
	brutalpunishment: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Future",
		name: "Brutal Punishment",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
					spa: 1,
				},
			},
		},
		onTry(source) {
			if (source.species.baseSpecies === 'Disbeary') {
				return;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Brutal Punishment');
			this.hint("Only a Pokemon whose form is Disbeary or Disbeary-Ebil can use this move.");
			return null;
		},
		onModifyType(move, pokemon) {
			if (pokemon.species.name === 'Disbeary-Ebil') {
				move.type = 'Dark';
			} else {
				move.type = 'Fairy';
			}
		},
		target: "normal",
		type: "Fairy",
	},
	cloudbreaker: {
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Cloud Breaker",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit() {
			this.field.clearWeather();
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Beautiful",
	},
	gazerbeam: {
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Gazer Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return 1;
		},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
	},
	memejr: {
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Meme Jr.",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source) {
				const boosts: StatsExceptHPTable = {
					atk: source.boosts.atk,
					def: source.boosts.def,
					spa: source.boosts.spa,
					spd: source.boosts.spd,
					spe: source.boosts.spe,
				};
				let minBoost = Infinity;
				let minBoosts: StatIDExceptHP[] = [];
				Object.entries(boosts).forEach(([statName, boostValue]) => {
					if (boostValue < minBoost) {
						minBoost = boostValue;
						minBoosts = [statName as StatIDExceptHP];
					} else if (boostValue === minBoost) {
						minBoosts.push(statName as StatIDExceptHP);
					}
				});
				if (minBoosts.length) {
					const randomStat = this.sample(minBoosts);
					const boost: SparseBoostsTable = {};
					boost[randomStat] = 1;
					this.boost(boost, source);
				} else {
					return false;
				}
			},
		},
		target: "normal",
		type: "???",
		contestType: "Cute",
	},
	shinestrike: {
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		isNonstandard: "Future",
		name: "Shine Strike",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return 0;
		},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	petrify: {
		isNonstandard: "Future",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Petrify",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Rock",
	},
	starseedblast: {
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Starseed Blast",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	brandingblade: {
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Branding Blade",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1, slicing: 1},
		onHit(target) {
			if (target.getAbility().isPermanent) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (target.getAbility().isPermanent) return;
			target.addVolatile('gastroacid');
		},
		secondary: null,
		recoil: [33, 100],
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	mudmaelstrom: {
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Mud Maelstrom",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ground",
		isNonstandard: "Future",
	},
	finalhour: {
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "Final Hour",
		pp: 5,
		priority: 0,
		flags: {},
		ignoreImmunity: true,
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				duration: 4,
				move: 'finalhour',
				source: source,
				moveData: {
					id: 'finalhour',
					name: "Final Hour",
					accuracy: 100,
					basePower: 200,
					category: "Special",
					priority: 0,
					flags: {},
					ignoreImmunity: false,
					effectType: 'Move',
					isFutureMove: true,
					type: 'Dark',
				},
			});
			this.add('-start', source, 'move: Final Hour');
			return this.NOT_FAIL;
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	turnabout: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Turnabout",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		volatileStatus: 'endure',
		onAfterMove(target, source) {
			const sourceSide = source.side;
			const targetSide = source.side.foe;
			const sideConditions = [
				'mist', 'lightscreen', 'reflect', 'spikes', 'safeguard', 'tailwind', 'toxicspikes', 'stealthrock', 'waterpledge', 'firepledge', 'grasspledge', 'stickyweb', 'auroraveil', 'mirageveil', 'gmaxsteelsurge', 'gmaxcannonade', 'gmaxvinelash', 'gmaxwildfire', 'sleazyspores', 'shattershard', 'luckyroll',
			];
			let success = false;
			for (const id of sideConditions) {
				const effectName = this.dex.conditions.get(id).name;
				if (sourceSide.sideConditions[id] && targetSide.sideConditions[id]) {
					[sourceSide.sideConditions[id], targetSide.sideConditions[id]] = [
						targetSide.sideConditions[id], sourceSide.sideConditions[id],
					];
					this.add('-sideend', sourceSide, effectName, '[silent]');
					this.add('-sideend', targetSide, effectName, '[silent]');
				} else if (sourceSide.sideConditions[id] && !targetSide.sideConditions[id]) {
					targetSide.sideConditions[id] = sourceSide.sideConditions[id];
					delete sourceSide.sideConditions[id];
					this.add('-sideend', sourceSide, effectName, '[silent]');
				} else if (targetSide.sideConditions[id] && !sourceSide.sideConditions[id]) {
					sourceSide.sideConditions[id] = targetSide.sideConditions[id];
					delete targetSide.sideConditions[id];
					this.add('-sideend', targetSide, effectName, '[silent]');
				} else {
					continue;
				}
				let sourceLayers = sourceSide.sideConditions[id] ? (sourceSide.sideConditions[id].layers || 1) : 0;
				let targetLayers = targetSide.sideConditions[id] ? (targetSide.sideConditions[id].layers || 1) : 0;
				for (; sourceLayers > 0; sourceLayers--) {
					this.add('-sidestart', sourceSide, effectName, '[silent]');
				}
				for (; targetLayers > 0; targetLayers--) {
					this.add('-sidestart', targetSide, effectName, '[silent]');
				}
				success = true;
			}
			if (!success) return false;
			this.add('-activate', source, 'move: Turnabout');
		},
		onHit(target, source) {
			const targetBoosts: SparseBoostsTable = {};
			const sourceBoosts: SparseBoostsTable = {};

			let i: BoostID;
			for (i in target.boosts) {
				targetBoosts[i] = target.boosts[i];
				sourceBoosts[i] = source.boosts[i];
			}

			target.setBoost(sourceBoosts);
			source.setBoost(targetBoosts);

			this.add('-swapboost', source, target, '[from] move: Turnabout');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Endure');
			},
			onDamagePriority: -10,
			onDamage(damage, target, source, effect) {
				if (effect?.effectType === 'Move' && damage >= target.hp) {
					this.add('-activate', target, 'move: Endure');
					return target.hp - 1;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	meddymeds: {
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Meddy Meds",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onTryHit(target, source, move) {
			if (source.side === target.side) {
				move.basePower = 0;
				move.infiltrates = true;
			}
		},
		onHit(target, source) {
			if (source.side === target.side) {
				if (!this.heal(Math.floor(target.baseMaxhp * 0.75))) {
					this.add('-immune', target);
				}
			}
		},
		secondary: null,
		self: {
			sideCondition: 'lightscreen',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	badeggs: {
		accuracy: 90,
		basePower: 20,
		basePowerCallback(pokemon, target, move) {
			return 20 * move.hit;
		},
		category: "Physical",
		name: "Bad Eggs",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 3,
		multiaccuracy: true,
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	backdraft: {
		num: 366,
		accuracy: true,
		basePower: 65,
		category: "Special",
		name: "Backdraft",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			sideCondition: 'backdraft',
		},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	/* :^) */
	skullcannon: {
		accuracy: 100,
		basePower: 150,
		category: "Special",
		isNonstandard: "Future",
		name: "Skull Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
			boosts: {
				atk: -1,
				def: -1,
				spa: -1,
				spd: -1,
				spe: -1,
			},
		},
		onDamagePriority: -20,
		onDamage(damage, target, source, effect) {
			if (damage >= target.hp) return target.hp - 1;
		},
		noSketch: true,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	dustcannon: {
		accuracy: 100,
		basePower: 150,
		category: "Special",
		isNonstandard: "Future",
		name: "Dust Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Skull Cannon only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
			boosts: {
				atk: -1,
				def: -1,
				spa: -1,
				spd: -1,
				spe: -1,
			},
		},
		onDamagePriority: -20,
		onDamage(damage, target, source, effect) {
			if (damage >= target.hp) return target.hp - 1;
		},
		noSketch: true,
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	itsover: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "It's Over",
		pp: 40,
		priority: 6,
		flags: {},
		onTryHit(target, source) {
			this.add('-nothing');
		},
		secondary: null,
		target: "self",
		type: "Bug",
		zMove: {boost: {atk: 6, def: 6, spa: 6, spd: 6, spe: 6, accuracy: 6, evasion: 6}},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	villify: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Villify",
		pp: 20,
		priority: 1,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Dark' || !target.setType('Dark')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Dark');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	nuclearwinter: {
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Nuclear Winter",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Poison') return 1;
		},
		onModifyMove(move) {
			if (this.field.isWeather('hail')) move.accuracy = true;
		},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	shroomsnuggle: {
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Shroom Snuggle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		drain: [1, 2],
		target: "allAdjacent",
		type: "Fairy",
		isNonstandard: "Future",
	},
	closeblobmat: {
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Close Blobmat",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
				spe: -1,
			},
		},
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	behemothblob: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Behemoth Blob",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	sleppthatblobsthesky: {
		accuracy: true,
		basePower: 200,
		category: "Special",
		isNonstandard: "Future",
		name: "Slepp That Blobs the Sky",
		pp: 1,
		priority: 0,
		flags: {},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		isZ: "ultrablobbosiumz",
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Cool",
	},
	strum: {
		num: 813,
		accuracy: 90,
		basePower: 15,
		basePowerCallback(pokemon, target, move) {
			if (move.hit === 4) return move.basePower * 4;
			return move.basePower;
		},
		onHit(target, source, move) {
			if (move.hit === 3) move.category = 'Physical';
		},
		category: "Special",
		name: "Strum",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		multihit: 4,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	flybackfrenzy: {
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			if (!pokemon.volatiles['stockpile']?.layers) return false;
			return pokemon.volatiles['stockpile'].layers * 100;
		},
		category: "Special",
		name: "Flyback Frenzy",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onTry(source) {
			return !!source.volatiles['stockpile'];
		},
		onHit(target, source) {
			const layers = source.volatiles['stockpile']?.layers || 0;
			if (this.randomChance(2 * layers, 10)) {
				target.trySetStatus('par', target);
			}
		},
		onAfterMove(pokemon) {
			pokemon.removeVolatile('stockpile');
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	cope: {
		accuracy: true,
		basePower: 2,
		category: "Special",
		name: "Cope",
		pp: 10,
		priority: 0,
		flags: {},
		multihit: 69,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future", // TODO: Meme move
		noSketch: true,
	},
	destructionstinger: {
		accuracy: 100,
		basePower: 99,
		category: "Physical",
		name: "Destruction Stinger",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'tox',
		},
		target: "normal",
		type: "Dark",
		noSketch: true,
		isNonstandard: "Future",
	},
	extinctionwave: {
		accuracy: 100,
		basePower: 66,
		category: "Special",
		name: "Extinction Wave",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(9);
			}
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		noSketch: true,
		isNonstandard: "Future",
	},
	poisonbullet: {
		accuracy: 100,
		basePower: 152,
		category: "Physical",
		name: "Poison Bullet",
		pp: 5,
		priority: 0,
		flags: {contact: 1, charge: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			defender.trySetStatus('psn');
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		noSketch: true,
		isNonstandard: "Future",
	},
	eternalwalk: {
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Eternal Walk",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		multihit: 255,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		noSketch: true,
		isNonstandard: "Future",
	},
	penetrate: {
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Penetrate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: {
			chance: 100,
			onHit(target, source) {
				if (!source.speciesState['parent']) {
					this.add('-activate', source, 'move: Penetrate', '[of] ' + target);
					const sourceSide = source.side;
					const targetSet = target.set;
					const baby = new Pokemon({
						...targetSet,
						name: "Unspeakable Horror",
						species: "Krissy",
						ability: "Levitate",
						moves: ['Memento', 'Glare', 'Voltaic Cyclone', 'Spikes'],
						item: "Focus Sash",
					}, sourceSide);
					baby.position = sourceSide.pokemon.length;
					sourceSide.pokemon.push(baby);
					sourceSide.pokemonLeft += 1;
					this.add('teamsize', sourceSide.id, sourceSide.pokemon.length);
					source.speciesState['parent'] = true;
				} else {
					this.add('-fail', source, 'move: Penetrate');
				}
			},
		},
		noSketch: true,
		overrideOffensivePokemon: 'target',
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	sussteelstrike: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Sussteel Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (!target || target.fainted || target.hp <= 0) this.boost({atk: 2}, pokemon, pokemon, move);
		},
		secondary: null,
		onTry(source) {
			if (source.species.baseSpecies === 'Susko') {
				return;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Sussteel Strike');
			this.hint("You are not the impostor.");
			return null;
		},
		noSketch: true,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	krackocean: {
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Krackocean",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			onHit(source) {
				this.field.setWeather('raindance');
				this.field.setTerrain('electricterrain');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	matingpress: {
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Mating Press",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: {
			chance: 100,
			onHit(target, source) {
				if (!source.speciesState['parent']) {
					this.add('-activate', source, 'move: Mating Press', '[of] ' + target);
					const sourceSide = source.side;
					const targetSet = target.set;
					const childName = [
						`${targetSet.species}, ${targetSet.gender === 'F' ? 'Daughter of' : targetSet.gender === 'M' ? 'Son of' : 'Offspring of'} ${source.name}`,
						`${targetSet.gender === 'F' ? 'Daughter of' : targetSet.gender === 'M' ? 'Son of' : 'Offspring of'} ${source.name}`,
						`${targetSet.gender === 'F' ? 'Daughter of' : targetSet.gender === 'M' ? 'Son of' : 'Offspring of'} ${source.species}`,
					].find((name) => name.length <= 18) || 'A Mere Child';
					const baby = new Pokemon({
						...targetSet,
						name: childName,
						moves: ['Metronome', 'Softboiled', 'Egg Bomb', 'Revelation Dance'],
						item: undefined,
					}, sourceSide);
					baby.position = sourceSide.pokemon.length;
					sourceSide.pokemon.push(baby);
					sourceSide.pokemonLeft += 1;
					this.add('teamsize', sourceSide.id, sourceSide.pokemon.length);
					source.speciesState['parent'] = true;
				} else {
					this.add('-fail', source, 'move: Mating Press');
				}
			},
		},
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	gunshot: {
		num: 441,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Gun Shot",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		onModifyMove(move, pokemon, target) {
			if (target && target.baseSpecies.id === 'vandash') {
				move.accuracy = true;
			}
		},
		onBasePower(basePower, pokemon, target) {
			if (target && target.baseSpecies.id === 'vandash') {
				return this.chainModify(100);
			}
		},
		target: "normal",
		type: "Steel",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	recoilshot: {
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Recoil Shot",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				accuracy: -2,
			},
		},
		target: "normal",
		type: "Steel",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	lemons: {
		accuracy: 95,
		basePower: 4,
		category: "Special",
		name: "Lemons",
		pp: 40,
		priority: -1,
		flags: {pulse: 1, bullet: 1, protect: 1},
		multihit: 100,
		multiaccuracy: true,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future", // TODO: Meme move
		noSketch: true,
	},
	metalblade: {
		num: 364,
		accuracy: 100,
		basePower: 105,
		category: "Physical",
		name: "Metal Blade",
		pp: 25,
		priority: 0,
		flags: {bullet: 1, mirror: 1},
		breaksProtect: true,
		// Breaking protection implemented in scripts.js
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	airshooter: {
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Air Shooter",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Flying') return 1;
		},
		onBasePower(basePower, pokemon, target) {
			if (target.ability === 'levitate') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	bubblelead: {
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Bubble Lead",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: null,
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxsteelsurge');
				}
			},
		},
		condition: {
			onSideStart(side) {
				this.add('-sidestart', side, 'move: G-Max Steelsurge');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				// Ice Face and Disguise correctly get typed damage from Stealth Rock
				// because Stealth Rock bypasses Substitute.
				// They don't get typed damage from Steelsurge because Steelsurge doesn't,
				// so we're going to test the damage of a Steel-type Stealth Rock instead.
				const steelHazard = this.dex.getActiveMove('Stealth Rock');
				steelHazard.type = 'Steel';
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(steelHazard), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	quickboomerang: {
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Quick Boomerang",
		pp: 40,
		priority: 1,
		flags: {pulse: 1, bullet: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	crashbomber: {
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Crash Bomber",
		pp: 5,
		priority: 0,
		flags: {bullet: 1},
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				move: 'crashbomber',
				source: source,
				moveData: {
					id: 'crashbomber',
					name: "Crash Bomber",
					accuracy: 100,
					basePower: 140,
					category: "Physical",
					priority: 0,
					flags: {bullet: 1},
					effectType: 'Move',
					isFutureMove: true,
					type: 'Ground',
				},
			});
			this.add('-start', source, 'Crash Bomber');
			return this.NOT_FAIL;
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	timestopper: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Time Stopper",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		status: 'frz',
		secondary: null,
		target: "allAdjacent",
		type: "Fairy",
		isNonstandard: "Future",
	},
	atomicfire: {
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Atomic Fire",
		pp: 5,
		priority: 0,
		flags: {pulse: 1, bullet: 1, charge: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.field.isTerrain('')) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	leafshield: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Leaf Shield",
		pp: 5,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'spikyshield',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					this.damage(source.baseMaxhp / 8, source, target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					this.damage(source.baseMaxhp / 8, source, target);
				}
			},
		},
		terrain: 'grassyterrain',
		secondary: null,
		target: "self",
		type: "Grass",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	bilebite: {
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Bile Bite",
		pp: 10,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 30,
				status: 'tox',
			}, {
				chance: 30,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Poison",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	frigidend: {
		accuracy: 100,
		basePower: 105,
		category: "Physical",
		name: "Frigid End",
		pp: 10,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Ice', type);
		},
		breaksProtect: true,
		priority: 0,
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	coinflip: {
		accuracy: 50,
		basePower: 0,
		category: "Special",
		name: "Coin Flip",
		pp: 5,
		priority: 0,
		flags: {},
		ohko: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp, source, source, this.dex.conditions.get('ouchie'));
		},
		secondary: null,
		ignoreAbility: true,
		target: "normal",
		type: "???",
		noSketch: true,
		isNonstandard: "Future",
	},
	wrapd: {
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		name: "Wrap-D",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'bound',
		self: {
			volatileStatus: 'partialtrappinglock',
		},
		noSketch: true,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
		// FIXME: onBeforeMove(pokemon, target) {target.removeVolatile('mustrecharge')}
		onHit(target, source) {
			/**
			 * The duration of the partially trapped must be always renewed to 2
			 * so target doesn't move on trapper switch out as happens in gen 1.
			 * However, this won't happen if there's no switch and the trapper is
			 * about to end its partial trapping.
			 **/
			if (target.volatiles['bound']) {
				if (source.volatiles['partialtrappinglock'] && source.volatiles['partialtrappinglock'].duration > 1) {
					target.volatiles['bound'].duration = 2;
				}
			}
		},
	},
	blizzardd: {
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Blizzard-D",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'frz',
		},
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	amnesiad: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Amnesia-D",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 2,
			spd: 2,
		},
		secondary: null,
		noSketch: true,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	hyperbeamd: {
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Hyper Beam-D",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		onMoveFail(target, source, move) {
			source.addVolatile('mustrecharge');
		},
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	darkening: {
		accuracy: 100,
		basePower: 135,
		category: "Physical",
		name: "Darkening",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 1],
		secondary: null,
		noSketch: true,
		onTry(source) {
			if (source.species.baseSpecies === 'Doomsday') {
				return;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Darkening');
			this.hint("You lack the power.");
			return null;
		},
		onModifyType(move, pokemon) {
			if (pokemon.species.name === 'Doomsday-Revenant') {
				move.type = 'Dark';
			} else {
				move.type = 'Ghost';
			}
		},
		onModifyMove(move, pokemon) {
			if (pokemon.species.name === 'Doomsday-Revenant') move.category = 'Special';
		},
		target: "allAdjacent",
		type: "Ghost",
		isNonstandard: "Future",
	},
	blackbomb: {
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "Black Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: null,
		onTry(source, target) {
			if (!source.volatiles['buried']) {
				source.addVolatile('buried');
			} else {
				source.removeVolatile('buried');
				source.addVolatile('buried');
			}
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	beamblade: {
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Beam Blade",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	bearhug: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Bear Hug",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'temptrapped',
		onAfterHit(target, source, move) {
			const poisonContact = [
				'poisonpoint', 'poisontouch',
			];
			const toxicContact = [
				'tetanus',
			];
			const burnContact = [
				'flamebody',
			];
			const speedContact = [
				'tanglinghair', 'gooey',
			];
			const damageContact = [
				'ironbarbs', 'roughskin', 'feelthefoliage',
			];
			const rockyContact = [
				'rockyhelmet',
			];
			const stealContact = [
				'pickpocket', 'magician',
			];
			const paralyzeContact = [
				'static',
			];
			const infatuateContact = [
				'cutecharm',
			];
			const mummyContact = [
				'mummy', 'woke',
			];
			const randomContact = [
				'effectspore',
			];
			const grassContact = [
				'feelthefoliage',
			];
			const random = this.random(3);
			if (poisonContact.includes(source.ability)) {
				if (random === 0) {
					target.trySetStatus('psn', source);
				}
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (toxicContact.includes(source.ability)) {
				target.trySetStatus('tox', source);
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (burnContact.includes(source.ability)) {
				if (random === 0) {
					target.trySetStatus('brn', source);
				}
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (speedContact.includes(source.ability)) {
				this.boost({spe: -1}, target, source, this.dex.getActiveMove("Bear Hug"));
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (damageContact.includes(source.ability)) {
				this.damage(target.baseMaxhp / 8, target, source);
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (stealContact.includes(source.ability)) {
				if (source.item) {
					return;
				}
				const yourItem = target.takeItem(source);
				if (!yourItem) {
					return;
				}
				if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
					!source.setItem(yourItem)) {
					target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
					return;
				}
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Thief', '[of] ' + source);
				this.add('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (paralyzeContact.includes(source.ability)) {
				if (random === 0) {
					target.trySetStatus('par', source);
				}
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (infatuateContact.includes(source.ability)) {
				if (random === 0) {
					if (source.isActive) target.addVolatile('attract', source, move, 'trapper');
				}
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
			} else if (mummyContact.includes(source.ability)) {
				const oldAbility = target.setAbility(source.ability);
				if (oldAbility) {
					this.add('-ability', target, target.getAbility().name, '[from] move: Bear Hug');
					if (!target.isAlly(source)) target.volatileStaleness = 'external';
					return;
				}
				if (rockyContact.includes(source.item)) {
					this.damage(target.baseMaxhp / 6, target, source);
				}
				return false;
			} else if (randomContact.includes(source.ability)) {
				if (random === 0) {
					const result = this.random(3);
					if (result === 0) {
						target.trySetStatus('psn', source);
					} else if (result === 1) {
						target.trySetStatus('par', source);
					} else {
						target.trySetStatus('slp', source);
					}
					if (rockyContact.includes(source.item)) {
						this.damage(target.baseMaxhp / 6, target, source);
					}
				}
			} else if (rockyContact.includes(source.item)) {
				this.damage(target.baseMaxhp / 6, target, source);
			} else if (grassContact.includes(source.ability)) {
				if (random === 0) {
					const result = this.random(3);
					if (result === 0) {
						target.trySetStatus('psn', source);
					} else if (result === 1) {
						target.trySetStatus('par', source);
					} else {
						target.trySetStatus('brn', source);
					}
				}
			}
		},
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	chilipowder: {
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Chili Powder",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1},
		status: 'brn',
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	thunderdrop: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Thunder Drop",
		pp: 10,
		priority: 0,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onModifyMove(move, source) {
			if (!source.volatiles['skydrop']) {
				move.accuracy = true;
				delete move.flags.contact;
			}
		},
		onMoveFail(target, source) {
			if (source.volatiles['twoturnmove'] && source.volatiles['twoturnmove'].duration === 1) {
				source.removeVolatile('skydrop');
				source.removeVolatile('twoturnmove');
				if (target === this.effectState.target) {
					this.add('-end', target, 'Sky Drop', '[interrupt]');
				}
			}
		},
		onTry(source, target) {
			return !target.fainted;
		},
		onTryHit(target, source, move) {
			if (source.removeVolatile(move.id)) {
				if (target !== source.volatiles['twoturnmove'].source) return false;

				this.add('-prepare', source, move.name, target);
				source.addVolatile('twoturnmove', target);
				return null;
			}
		},
		onHit(target, source) {
			if (target.hp) this.add('-end', target, 'Thunder Drop');
		},
		condition: {
			duration: 2,
			onAnyDragOut(pokemon) {
				if (pokemon === this.effectState.target || pokemon === this.effectState.source) return false;
			},
			onFoeTrapPokemonPriority: -15,
			onFoeTrapPokemon(defender) {
				if (defender !== this.effectState.source) return;
				defender.trapped = true;
			},
			onFoeBeforeMovePriority: 12,
			onFoeBeforeMove(attacker, defender, move) {
				if (attacker === this.effectState.source) {
					attacker.activeMoveActions--;
					this.debug('Thunder drop nullifying.');
					return null;
				}
			},
			onRedirectTargetPriority: 99,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectState.target) return;
				if (this.effectState.source.fainted) return;
				return this.effectState.source;
			},
			onAnyInvulnerability(target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				const moves = ['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows', 'airshooter'];
				if (moves.includes(move.id)) {
					return;
				}
				return false;
			},
			onAnyBasePower(basePower, target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				if (move.id === 'gust' || move.id === 'twister' || move.id === 'airshooter') {
					return this.chainModify(2);
				}
			},
			onFaint(target) {
				if (target.volatiles['skydrop'] && target.volatiles['twoturnmove'].source) {
					this.add('-end', target.volatiles['twoturnmove'].source, 'Sky Drop', '[interrupt]');
				}
			},
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "any",
		type: "Electric",
		isNonstandard: "Future",
	},
	faeblade: {
		accuracy: 100,
		basePower: 80,
		name: "Faeblade",
		category: "Physical",
		overrideDefensiveStat: 'spd',
		secondary: null,
		target: "normal",
		type: "Fairy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, slicing: 1},

		isNonstandard: "Future",
	},
	stickytongue: {
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Sticky Tongue",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				const hurtItem = [
					'stickybarb',
				];
				const burnItem = [
					'flameorb',
				];
				const poisonItem = [
					'poisonbarb',
				];
				const toxicItem = [
					'toxicorb',
				];
				const paralyzeItem = [
					'lightball',
				];
				const whiteherbItem = [
					'whiteherb',
				];
				const mentalherbItem = [
					'mentalherb',
				];
				if (item) {
					if (source.hp && item.isBerry && target.takeItem(source)) {
						this.add('-enditem', target, item.name, '[from] stealeat', '[move] Sticky Tongue', '[of] ' + source);
						if (this.singleEvent('Eat', item, null, source, null, null)) {
							this.runEvent('EatItem', source, null, null, item);
							if (item.id === 'leppaberry') target.staleness = 'external';
						}
						if (item.onEat) source.ateBerry = true;
					} else if (hurtItem.includes(target.item)) {
						this.damage(source.baseMaxhp / 8);
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (burnItem.includes(target.item)) {
						source.trySetStatus('brn', target);
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (poisonItem.includes(target.item)) {
						source.trySetStatus('psn', target);
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (toxicItem.includes(target.item)) {
						source.trySetStatus('tox', target);
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (paralyzeItem.includes(target.item)) {
						source.trySetStatus('par', target);
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (whiteherbItem.includes(target.item)) {
						let activate = false;
						const boosts: SparseBoostsTable = {};
						let i: BoostID;
						for (i in source.boosts) {
							if (source.boosts[i] < 0) {
								activate = true;
								boosts[i] = 0;
							}
						}
						if (activate) {
							source.setBoost(boosts);
							this.add('-clearnegativeboost', source, '[silent]');
						}
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else if (mentalherbItem.includes(target.item)) {
						const conditions = ['attract', 'taunt', 'encore', 'torment', 'disable', 'healblock'];
						for (const firstCondition of conditions) {
							if (source.volatiles[firstCondition]) {
								for (const secondCondition of conditions) {
									source.removeVolatile(secondCondition);
									if (firstCondition === 'attract' && secondCondition === 'attract') {
										this.add('-end', source, 'move: Attract', '[from] item: Mental Herb');
									}
								}
								return;
							}
						}
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					} else {
						this.add('-enditem', target, item.name, '[from] move: Sticky Tongue', '[of] ' + source);
					}
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	rocketpunch: {
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Rocket Punch",
		pp: 10,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Rocket Punch only works on your first turn out.");
				return false;
			}
		},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	powerwasher: {
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Power Washer",
		pp: 5,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	cherrybomb: {
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		name: "Cherry Bomb",
		pp: 15,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	crashhopper: {
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Crash Hopper",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1, gravity: 1},
		onMoveFail(target, source) {
			source.trySetStatus('par');
		},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	flakcannon: {
		accuracy: 100,
		basePower: 105,
		category: "Special",
		name: "Flak Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, allyanim: 1},
		willCrit: true,
		onPrepareHit(target, source, move) {
			if (source.ignoringItem()) return false;
			const item = source.getItem();
			if (!this.singleEvent('TakeItem', item, source.itemState, source, source, move, item)) return false;
			if (!item.fling) return false;
			if (item.fling.effect) {
				move.onHit = item.fling.effect;
			} else {
				if (!move.secondaries) move.secondaries = [];
				if (item.fling.status) {
					move.secondaries.push({status: item.fling.status});
				} else if (item.fling.volatileStatus) {
					move.secondaries.push({volatileStatus: item.fling.volatileStatus});
				}
			}
			source.addVolatile('flakcannon');
		},
		condition: {
			onUpdate(pokemon) {
				const item = pokemon.getItem();
				pokemon.setItem('');
				pokemon.lastItem = item.id;
				pokemon.usedItemThisTurn = true;
				this.add('-enditem', pokemon, item.name, '[from] move: Flak Cannon');
				this.runEvent('AfterUseItem', pokemon, null, null, item);
				pokemon.removeVolatile('flakcannon');
			},
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	fractus: {
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Fractus",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	extinction: {
		accuracy: 30,
		basePower: 0,
		category: "Special",
		name: "Extinction",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMove: {basePower: 650},
		maxMove: {basePower: 250},
		isNonstandard: "Future",
	},
	purge: {
		accuracy: 100,
		basePower: 55,
		basePowerCallback(pokemon, target, move) {
			if (target.status || target.hasAbility('comatose')) {
				this.debug('BP tripled from status condition');
				return move.basePower * 3;
			}
			return move.basePower;
		},
		onHit(target, source) {
			target.cureStatus();
		},
		category: "Special",
		name: "Purge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	uproot: {
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Uproot",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryMove(pokemon, target, move) {
			if (pokemon.hasType('Grass')) return;
			this.add('-fail', pokemon, 'move: Uproot');
			this.attrLastMove('[still]');
			return null;
		},
		self: {
			onHit(pokemon) {
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Grass" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Uproot');
			},
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	frostbite: {
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Frostbite",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (this.field.isWeather('')) return;
			move.secondaries = [];
			if (this.field.isWeather(['hail'])) {
				move.secondaries.push({
					chance: 100,
					boosts: {
						spa: -2,
					},
				});
			}
		},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	calibrate: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Calibrate",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {boost: {spa: 1}},
		isNonstandard: "Future",
	},
	braindamage: {
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		name: "Brain Damage",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	flintfang: {
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Flint Fang",
		pp: 15,
		priority: 0,
		flags: {bite: 1, contact: 1, protect: 1, mirror: 1},
		onHit(target, source) {
			if (target.getTypes().join() === "Steel") {
				target.trySetStatus('brn', source);
			}
		},
		secondaries: [
			{
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	mirageveil: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mirage Veil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'mirageveil',
		onTry() {
			return this.field.isWeather(['sandstorm']);
		},
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('lightclay') || source?.hasAbility('builder')) {
					return 8;
				}
				return 5;
			},
			onModifyAtk(atk, pokemon) {
				return this.chainModify(1.5);
			},
			onModifySpA(atk, pokemon) {
				return this.chainModify(1.5);
			},
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Mirage Veil');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 10,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Mirage Veil');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Ground",
		zMove: {boost: {spa: 1}},
		isNonstandard: "Future",
	},
	neosporin: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Neosporin",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'slp',
		onHit(target, source) {
			let success = false;
			if (source.hasAbility('wonderskin')) {
				success = !!this.heal(this.modify(target.baseMaxhp, 1));
			} else {
				success = !!this.heal(Math.ceil(target.baseMaxhp * 0.5));
			}
			if (success && !target.isAlly(source)) {
				target.staleness = 'external';
			}
			return success;
		},
		secondary: null,
		target: "any",
		type: "Poison",
		isNonstandard: "Future",
	},
	inverserush: {
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Inverse Rush",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: null,

		onBasePower(basePower, pokemon, target) {
			if (this.field.getPseudoWeather('inverseroom')) {
				return this.chainModify(2);
			}
		},
		noSketch: true,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
		maxMove: {basePower: 140},
	},
	terradozer: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Terra Dozer",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					const rand = this.random(4);
					if (rand === 0) {
						this.field.setTerrain('psychicterrain');
					} else if (rand === 1) {
						this.field.setTerrain('electricterrain');
					} else if (rand === 2) {
						this.field.setTerrain('grassyterrain');
					} else {
						this.field.setTerrain('mistyterrain');
					}
				},
			},
		},
		noSketch: true,
		target: "normal",
		type: "Rock",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	yiikout: {
		num: 69010,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Yiik Out",
		pp: 10,
		priority: 3,
		flags: {sound: 1, protect: 1, mirror: 1, bypasssub: 1},
		onTry(pokemon, target) {
			if (pokemon.activeTurns > 1) {
				this.attrLastMove('[still]');
				this.add('-fail', pokemon);
				this.hint("Yiik is only fun for the first five minutes.");
				return null;
			}
		},
		onTryHit(target, source) {
			if (target === source || target.volatiles['dynamax']) return false;

			const additionalBannedSourceAbilities = [
				// Zen Mode included here for compatability with Gen 5-6
				'flowergift', 'forecast', 'hungerswitch', 'illusion', 'imposter', 'neutralizinggas', 'powerofalchemy', 'receiver', 'trace', 'zenmode',
			];
			if (
				target.getAbility().isPermanent || target.ability === 'truant' ||
				source.getAbility().isPermanent || additionalBannedSourceAbilities.includes(source.ability)
			) {
				return false;
			}
		},
		onHit(target, source) {
			const oldAbility = target.setAbility(source.ability);
			if (oldAbility) {
				this.add('-ability', target, target.getAbility().name, '[from] move: Yiikout');
				if (!target.isAlly(source)) target.volatileStaleness = 'external';
				return;
			}
			return false;
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',

		},
		noSketch: true,
		target: "normal",
		type: "Fairy",
		zMove: {basePower: 120},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	roidflex: {
		num: 197,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Roid Flex",
		pp: 5,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		boosts: {
			accuracy: 1,
		},
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		onAfterMove(source) {
			source.trySetStatus('psn');
		},
		secondary: null,
		noSketch: true,
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
		zMove: {boost: {evasion: 1}},
		contestType: "Cool",
	},
	genwunroom: {
		num: 1001,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Genwun Room",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'genwunroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onFieldStart(target, source) {
				this.add('-fieldstart', 'move: Genwun Room', '[of] ' + source);
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('genwunroom');
			},
			// Item suppression implemented in Pokemon.ignoringItem() within sim/pokemon.js
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 6,
			onFieldEnd() {
				this.add('-fieldend', 'move: Genwun Room', '[of] ' + this.effectState.source);
			},
		},
		secondary: null,
		noSketch: true,
		target: "all",
		type: "Psychic",
		isNonstandard: "Future",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},

	backroom: {
		num: 366,
		accuracy: true,
		basePower: 65,
		category: "Physical",
		name: "Backroom",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit() {
			this.field.addPseudoWeather('trickroom', null, this.activeMove);
		},
		secondary: null,
		noSketch: true,
		selfSwitch: true,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},

	charmerssong: {
		num: 273,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Charmer's Song",
		pp: 10,
		priority: -6,
		flags: {protect: 1, mirror: 1, sound: 1},
		forceSwitch: true,
		slotCondition: 'charmerssong',
		condition: {
			onSwap(target) {
				target.addVolatile('taunt');
				target.side.removeSlotCondition(target, 'charmerssong');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
		zMove: {boost: {spd: 1}},
		contestType: "Clever",
	},

	psychospell: {
		num: 42003,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Psycho Spell",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('psychicterrain');
				},
			},
		},
		noSketch: true,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},


	wonderwand: {
		num: 42003,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Wonder Wand",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.addPseudoWeather('wonderroom');
				},
			},
		},
		noSketch: true,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},


	implosion: {
		num: 42003,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Implosion",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.addPseudoWeather('inverseroom');
				},
			},
		},
		noSketch: true,
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},

	portalgun: {
		num: 509,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Portal Gun",
		pp: 10,
		priority: -6,
		flags: {bullet: 1, protect: 1, pulse: 1, mirror: 1, distance: 1},
		selfSwitch: true,
		forceSwitch: true,
		noSketch: true,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
		isNonstandard: "Future",
	},

	sportsball: {
		num: 42003,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		name: "Sportsball",
		pp: 10,
		priority: 0,
		multihit: 2,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.addPseudoWeather('mudsport');
					this.field.addPseudoWeather('watersport');
				},
			},
		},
		noSketch: true,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	rainbowbeam: {
		num: 69048,
		accuracy: 100,
		basePower: 69,
		category: "Special",
		name: "Rainbow Beam",
		pp: 10,
		priority: 0,
		target: "normal",
		noSketch: true,
		type: "???",
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type, move) {
			return this.dex.types.all().reduce(
				(currentTypeMod, dexType) => currentTypeMod + this.dex.getEffectiveness(dexType.name, type),
				typeMod,
			);
		},
		isNonstandard: "Future",
	},
	freikugel: {
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		isNonstandard: "Future",
		name: "Freikugel",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 2],
		onModifyMove(move) {
			if (this.field.getPseudoWeather('magicroom')) {
				move.accuracy = true;
			}
		},
		onDamage(damage, target, source, effect) {
			if (this.field.getPseudoWeather('magicroom')) {
				if (effect.id === 'recoil') {
					if (!this.activeMove) throw new Error("Battle.activeMove is null");
					if (this.activeMove.id !== 'struggle') return null;
				}
			}
		},
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
		maxMove: {basePower: 200},
	},
	confettigun: {
		accuracy: 100,
		basePower: 200,
		category: "Special",
		isNonstandard: "Future",
		name: "Confetti Gun",
		pp: 15,
		priority: 0,
		flags: {distance: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 50,
			volatileStatus: 'confusion',
		},
		target: "normal",
		noSketch: true,
		type: "Normal",
		contestType: "Cute",
	},
	butterflykick: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Butterfly Kick",
		pp: 10,
		priority: 0,
		target: "normal",
		noSketch: true,
		type: "Bug",
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Fighting', type);
		},
		isNonstandard: "Future",
	},
	toxicbeam: {
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Toxic Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'tox',
		},
		target: "normal",
		noSketch: true,
		type: "Poison",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	windwhip: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Wind Whip",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, wind: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		noSketch: true,
		type: "Flying",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	firewall: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Firewall",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'firewall',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					source.trySetStatus('brn', target);
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					source.trySetStatus('brn', target);
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Fire",
		noSketch: true,
		zMove: {boost: {def: 1}},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	maximize: {
		accuracy: 100,
		basePower: 300,
		category: "Physical",
		name: "Maximize",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				evasion: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		noSketch: true,
		contestType: "Tough",
		isNonstandard: "Future",
	},
	seaquake: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Seaquake",
		pp: 10,
		priority: 0,
		target: "normal",
		noSketch: true,
		type: "Water",
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Ground', type);
		},
		isNonstandard: "Future",
	},
	edgequake: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Edgequake",
		pp: 10,
		priority: 0,
		target: "normal",
		noSketch: true,
		type: "Rock",
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Ground', type);
		},
		isNonstandard: "Future",
	},
	sugarrush: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sugar Rush",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		onHit(target) {
			if (target.hp <= target.maxhp / 2 || target.boosts.spa >= 6 || target.maxhp === 1) { // Shedinja clause
				return false;
			}
			this.directDamage(target.maxhp / 2);
			this.boost({spa: 12}, target);
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		noSketch: true,
		zMove: {effect: 'heal'},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	sleepingsands: {
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Sleeping Sands",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'slp',
		},
		target: "normal",
		type: "Ground",
		noSketch: true,
		isNonstandard: "Future",
	},
	fuckyou: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Fuck You",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, bypasssub: 1},
		onHit(target, source, move) {
			const success = this.boost({atk: -6, def: -6, spa: -6, spd: -6, spe: -6, accuracy: -6, evasion: -6}, target, source);
			if (!success && !target.hasAbility('mirrorarmor')) {
				delete move.selfSwitch;
			}
		},
		selfSwitch: true,
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Fighting",
		zMove: {effect: 'healreplacement'},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	absolutezero: {
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Absolute Zero",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'frz',
		},
		target: "normal",
		noSketch: true,
		type: "Ice",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	poisonivy: {
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Poison Ivy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 30,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('psn', source);
				} else if (result === 1) {
					target.trySetStatus('tox', source);
				} else {
					target.trySetStatus('par', source);
				}
			},
		},
		target: "normal",
		noSketch: true,
		type: "Grass",
		zMove: {basePower: 160},
		isNonstandard: "Future",
	},
	bloodletting: {
		accuracy: true,
		basePower: 40,
		category: "Status",
		name: "Bloodletting",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spe: 1,
		},
		secondary: null,
		noSketch: true,
		target: "self",
		type: "Poison",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	telluriccurrent: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Future",
		name: "Telluric Current",
		pp: 20,
		priority: 0,
		ignoreImmunity: {'Electric': true},
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		noSketch: true,
		type: "Electric",
		contestType: "Cool",
	},
	rockout: {
		num: 369,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Rock Out",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, sound: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Rock",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	twintowertumblingterror: {
		accuracy: true,
		basePower: 290,
		category: "Physical",
		isNonstandard: "Future",
		name: "Twin Tower Tumbling Terror",
		pp: 1,
		priority: 0,
		flags: {contact: 1, hammer: 1},
		isZ: "sableviumz",
		onAfterMove(source) {
			source.trySetStatus('brn');
		},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		onModifyType(move, pokemon) {
			let type = pokemon.getTypes()[0];
			if (type === "Bird") type = "???";
			move.type = type;
		},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		target: "normal",
		type: "Steel",
		contestType: "Smart",
	},
	toppingtoss: {
		accuracy: 100,
		basePower: 50,
		onHit(target, source, move) {
			if (move.hit === 1) { move.type = 'Grass'; } else if (move.hit === 2) { move.type = 'Ground'; }
		},
		category: "Special",
		name: "Topping Toss",
		isNonstandard: "Future",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 3,
		secondary: null,
		target: "normal",
		type: "Fire",
		noSketch: true,
		contestType: "Cool",
	},
	heavensblessing: {
		num: 273,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heaven's Blessing",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		slotCondition: 'Wish',
		condition: {
			duration: 2,
			onStart(pokemon, source) {
				this.effectState.hp = source.maxhp / 2;
			},
			onResidualOrder: 4,
			onEnd(target) {
				if (target && !target.fainted) {
					const damage = this.heal(this.effectState.hp, target, target);
					if (damage) {
						this.add('-heal', target, target.getHealth, '[from] move: Wish', '[wisher] ' + this.effectState.source.name);
					}
				}
			},
		},
		onHit(pokemon) {
			const success = !!this.heal(this.modify(pokemon.maxhp, 0.25));
			return pokemon.cureStatus() || success;
		},
		secondary: null,
		noSketch: true,
		target: "self",
		type: "Normal",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	sandysnore: {
		num: 173,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Sandy Snore",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		sleepUsable: true,
		onTry(source) {
			return source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz') || source.hasAbility('lethargic');
		},
		self: {
			onHit(target, source) {
				this.field.setWeather('sandstorm');
				const oldAbility = source.setAbility('sandrush');
				if (oldAbility) {
					this.add('-ability', source, 'Sand Rush', '[from] move: Sandy Snore');
					return;
				}
				return false;
			},
		},


		noSketch: true,
		target: "normal",
		type: "Rock",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	amogus: {
		num: 1,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Amogus",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "???",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	bushido: {
		accuracy: 100,
		basePower: 15,
		category: "Special",
		name: "Bushido",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 4,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
		noSketch: true,
	},
	groundbomb: {
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "Ground Bomb",
		pp: 5,
		priority: 0,
		flags: {},
		ignoreImmunity: true,
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				duration: 4,
				move: 'groundbomb',
				source: source,
				moveData: {
					id: 'groundbomb',
					name: "Ground Bomb",
					accuracy: 100,
					basePower: 200,
					category: "Special",
					priority: 0,
					flags: {},
					ignoreImmunity: false,
					effectType: 'Move',
					isFutureMove: true,
					type: 'Ground',
				},
			});
			this.add('-start', source, 'move: Ground Bomb');
			return this.NOT_FAIL;
		},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Ground",
		zMove: {basePower: 180},
		isNonstandard: "Future",
		noSketch: true,
	},
	chernoboil: {
		accuracy: 100,
		basePower: 26,
		category: "Special",
		name: "Chernoboil",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "???",
		contestType: "Tough",
		isNonstandard: "Future",
		noSketch: true,
	},
	halflife: {
		accuracy: 100,
		basePower: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(target.getUndynamaxedHP() / 2, 1);
		},
		category: "Special",
		name: "Half-Life",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "???",
		contestType: "Tough",
		isNonstandard: "Future",
		noSketch: true,
	},
	obsidianhorn: {
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Obsidian Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					def: 1,
					spd: 1,
				},
			},
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
		contestType: "Cool",
		noSketch: true,
	},
	feudefee: {
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Feu de Fe\u0301e",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Cute",
		isNonstandard: "Future",
		noSketch: true,
	},
	heavenpierce: {
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Heaven Pierce",
		pp: 5,
		priority: 0,
		flags: {mirror: 1, defrost: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		ignoreAbility: true,
		ignoreImmunity: {'Steel': true},
		breaksProtect: true,
		willCrit: true,
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Steel",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	fughamut: {
		accuracy: true,
		basePower: 90,
		category: "Status",
		name: "Fughamut",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: {
			chance: 100,
			onHit(target, source) {
				if (!source.speciesState['parent']) {
					this.add('-activate', source, 'move: Fughamut', '[of] ' + target);
					const sourceSide = source.side;
					const baby = new Pokemon({
						species: 'Rayquaza',
						name: "Fug",
						moves: ['Draco Meteor', 'Extreme Speed', 'Overheat', 'Dragon Ascent'],
						item: 'Life Orb',
					}, sourceSide);
					baby.position = sourceSide.pokemon.length;
					sourceSide.pokemon.push(baby);
					sourceSide.pokemonLeft += 1;
					this.add('teamsize', sourceSide.id, sourceSide.pokemon.length);
					source.speciesState['parent'] = true;
				} else {
					this.add('-fail', source, 'move: Fughamut');
				}
			},
		},
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	feedandseed: {
		num: 738,
		accuracy: 80,
		basePower: 85,
		category: "Special",
		isNonstandard: "Future",
		name: "Feed and Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent) {
				return false;
			}
		},
		onHit(target, source) {
			if (target.hasType('Grass')) return null;
			target.addVolatile('leechseed', source);
			const oldAbility = target.setAbility('insomnia');
			if (oldAbility) {
				this.add('-ability', target, 'Insomnia', '[from] move: Feed and Seed');
				if (target.status === 'slp') {
					target.cureStatus();
				}
				return;
			}
		},
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('grassyterrain');
				},
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	atombomb: {
		num: 69003,
		accuracy: 100,
		basePower: 151,
		category: "Special",
		name: "Atom Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "???",
		zMove: {basePower: 200},
		isNonstandard: "Future",
	},
	radiation: {
		num: 487,
		accuracy: 100,
		basePower: 37,
		category: "Special",
		name: "Radiation",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Nuclear' || !target.setType('Nuclear')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Nuclear');
			},
		},
		target: "normal",
		type: "Nuclear",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	nuclearmeltdown: {
		num: 557,
		accuracy: 95,
		basePower: 37,
		category: "Physical",
		name: "Nuclear Meltdown",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -1,
				atk: -1,
				spa: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "???",
		zMove: {basePower: 220},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	deepfry: {
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Deep Fry",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onHit(target, source) {
			const item = target.getItem();
			if (source.hp && item.isBerry && target.takeItem(source)) {
				this.add('-enditem', target, item.name, '[from] stealeat', '[move] Deep Fry', '[of] ' + source);
				if (this.singleEvent('Eat', item, null, source, null, null)) {
					this.runEvent('EatItem', source, null, null, item);
					if (item.id === 'leppaberry') target.staleness = 'external';
				}
				if (item.onEat) source.ateBerry = true;
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				if (target.hasItem('choiceband')) {
					this.boost({atk: 1}, source);
				}
				if (target.hasItem('choicespecs')) {
					this.boost({spa: 1}, source);
				}
				if (target.hasItem('choicescarf')) {
					this.boost({spe: 1}, source);
				}
				if (target.hasItem('assaultvest')) {
					this.boost({spd: 1}, source);
				}
				if (target.hasItem('leftovers')) {
					this.heal(source.baseMaxhp / 2, source, target);
				}
				if (target.hasItem('lifeorb')) {
					this.boost({spa: 1}, source);
					this.boost({atk: 1}, source);
					this.damage(source.baseMaxhp / 4, source, target);
				}
				if (target.hasItem('weaknesspolicy')) {
					this.boost({spa: 2}, source);
					this.boost({atk: 2}, source);
					this.add('-message', 'oh fug oh shid');
				}
				if (target.hasItem('whiteherb')) {
					let activate = false;
					const boosts: SparseBoostsTable = {};
					let i: BoostID;
					for (i in source.boosts) {
						if (source.boosts[i] < 0) {
							activate = true;
							boosts[i] = 0;
						}
					}
					if (activate) {
						source.setBoost(boosts);
						this.add('-clearnegativeboost', source, '[silent]');
					}
				}
				if (target.hasItem('lightball')) {
					this.boost({spa: 1}, source);
					this.boost({atk: 1}, source);
					source.trySetStatus('par', target);
				}
				if (target.hasItem('blacksludge')) {
					source.trySetStatus('psn', target);
				}

				const item = target.takeItem();

				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Deep Fry', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	sunburst: {
		num: 173,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Sunburst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		self: {
			onHit(source) {
				this.field.setWeather('sunnyday');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Grass",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	floofandpoof: {
		num: 69028,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Floof and Poof",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1},
		onHit(target, source, move) {
			source.side.addSideCondition('luckychant');
			source.side.addSideCondition('safeguard');
			source.side.addSideCondition('mist');
		},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	blobblast: {
		num: 66,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Blobblast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	skulltoss: {
		num: 488,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Skull Toss",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(pokemon) {
			if (pokemon.weighthg > 1) {
				pokemon.weighthg = Math.max(1, pokemon.weighthg - 1000);
				this.add('-start', pokemon, 'Autotomize');
			}
		},
		onHit(pokemon, target) {
			if (target.volatiles['skulltoss'] && target.volatiles['skulltoss'].layers >= 1) return false;
		},
		volatileStatus: 'Skull Toss',
		condition: {
			noCopy: true,
			onStart(pokemon, target) {
				this.effectState.layers = 1;
				this.effectState.spe = 0;
				this.add('-start', target, 'skulltoss' + this.effectState.layers);
				const [curSpe] = [target.boosts.spe];
				this.boost({spe: 1}, target);
				if (curSpe !== target.boosts.spe) this.effectState.spe--;
			},
			onRestart(pokemon, target) {
				if (this.effectState.layers >= 1) return false;
				this.effectState.layers++;
				this.add('-start', target, 'skulltoss' + this.effectState.layers);
				const curSpe = target.boosts.spe;
				this.boost({spe: 1}, target);
				if (curSpe !== target.boosts.spe) this.effectState.spe--;
			},
			onEnd(target) {
				if (this.effectState.def || this.effectState.spd) {
					const boosts: SparseBoostsTable = {};
					if (this.effectState.spe) boosts.spe = this.effectState.spe;
					this.boost(boosts, target);
				}
				this.add('-end', target, 'skulltoss');
				if (this.effectState.spe !== this.effectState.layers * -1 * -1) {
					this.hint("In Gen 7, Stockpile keeps track of how many times it successfully altered each stat individually.");
				}
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	flashbang: {
		num: 366,
		accuracy: true,
		basePower: 70,
		category: "Special",
		name: "Flashbang",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			sideCondition: 'flashbang',
		},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	doubleiceblob: {
		num: 742,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Double Ice Blob",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: 2,
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
		zMove: {basePower: 180},
		maxMove: {basePower: 140},
		contestType: "Clever",
	},
	extremesneed: {
		num: 245,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Extreme Sneed",
		pp: 5,
		priority: 2,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
		contestType: "Cool",
	},
	bouncyball: {
		num: 583,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Bouncy Ball",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Fairy",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	battlecry: {
		num: 612,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Battle Cry",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	sereneshockwave: {
		num: 215,
		basePower: 120,
		accuracy: 90,
		category: "Physical",
		name: "Serene Shockwave",
		pp: 5,
		priority: 0,
		flags: {protect: 1, sound: 1, mirror: 1},
		onHit(target, source) {
			this.add('-activate', source, 'move: Heal Bell');
			let success = false;
			const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];
			for (const ally of allies) {
				if (ally !== source && ally.hasAbility(['soundproof', 'cacophony'])) continue;
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		target: "normal",
		type: "Psychic",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	flashfreeze: {
		num: 420,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Flash Freeze",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	electromagnetism: {
		num: 393,
		accuracy: 85,
		basePower: 115,
		category: "Special",
		name: "Electromagnetism",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			sideCondition: 'magnetrise',
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {boost: {evasion: 1}},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	nosedive: {
		num: 354,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		isNonstandard: "Future",
		name: "Nosedive",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		self: {
			boosts: {
				def: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Clever",
	},
	paranormalactivity: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		isNonstandard: "Future",
		name: "Paranormal Activity",
		pp: 10,
		priority: 0,
		ignoreImmunity: {'Ghost': true},
		flags: {protect: 1, mirror: 1},
		target: "normal",
		noSketch: true,
		type: "Ghost",
		contestType: "Cool",
	},
	downpour: {
		num: 173,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Downpour",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			onHit(source) {
				this.field.setWeather('raindance');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Water",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	icestorm: {
		num: 173,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Ice Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		sleepUsable: true,
		secondary: {
			chance: 10,
			status: 'frz',
		},
		self: {
			onHit(source) {
				this.field.setWeather('hail');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Ice",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	titaniumclap: {
		num: 550,
		accuracy: 85,
		basePower: 125,
		category: "Physical",
		name: "Titanium Clap",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'par',
		},
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	techslash: {
		num: 550,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Tech Slash",
		pp: 5,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	rocketboost: {
		num: 392,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rocket Boost",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		onTry(pokemon, target) {
			if (pokemon.activeTurns > 1) {
				this.attrLastMove('[still]');
				this.add('-fail', pokemon);
				this.hint("Rocket Boost only works on the first turn out.");
				return null;
			}
		},
		volatileStatus: 'aquaring',
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "self",
		type: "Steel",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	hypersomnia: {
		num: 738,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		isNonstandard: "Future",
		name: "Hypersomnia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent) {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('lethargic');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Lethargic', '[from] move: Hypersomnia');
				return;
			}
			return false;
		},
		self: {
			onHit(target, source) {
				const oldAbility = source.setAbility('baddreams');
				if (oldAbility) {
					this.add('-ability', source, 'Bad Dreams', '[from] move: Hypersomnia');
					return;
				}
				return false;
			},
		},
		onAfterHit(target, source) {
			if (target.getAbility().isPermanent) return;
			target.addVolatile('nightmare');
		},
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	abduction: {
		num: 509,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Abduction",
		pp: 10,
		priority: -6,
		flags: {protect: 1, mirror: 1, distance: 1},
		selfSwitch: true,
		forceSwitch: true,
		noSketch: true,
		target: "normal",
		type: "???",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	xenobeam: {
		num: 487,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Xenobeam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === '???' || !target.setType('???')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', '???');
			},
		},
		target: "normal",
		type: "Psychic",
		zMove: {boost: {spa: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	infectiouswheeze: {
		num: 594,
		accuracy: 100,
		basePower: 25,
		onModifyType(move, pokemon) {
			if (pokemon.species.name === 'Blobbos-Zombie') {
				move.type = 'Ghost';
			} else {
				move.type = 'Poison';
			}
		},
		category: "Special",
		name: "Infectious Wheeze",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	siphon: {
		num: 577,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Siphon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [3, 4],
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	letssleppforever: {
		num: 700,
		accuracy: true,
		basePower: 190,
		category: "Special",
		isNonstandard: "Future",
		name: "Let's Slepp Forever",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "blobbosmikiumz",
		secondary: {
			chance: 100,
			status: 'slp',
		},
		target: "normal",
		type: "Ice",
		contestType: "Cool",
	},
	shadowban: {
		num: 269,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadowban",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		volatileStatus: 'taunt',
		condition: {
			duration: 3,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'move: Taunt');
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'move: Taunt');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					const move = this.dex.moves.get(moveSlot.id);
					if (move.category === 'Status' && move.id !== 'mefirst') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && !move.isMax && move.category === 'Status' && move.id !== 'mefirst') {
					this.add('cant', attacker, 'move: Taunt', move);
					return false;
				}
			},
		},
		self: {
			boosts: {
				spe: +1,
			},
		},
		target: "normal",
		type: "Ghost",
		zMove: {boost: {atk: 1}},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	energyburst: {
		num: 406,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Energy Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: null,
		target: "any",
		type: "Normal",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	plasticterrain: {
		num: 580,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Plastic Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'plasticterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				const weakenedMoves = ['earthquake', 'bulldoze', 'magnitude'];
				if (weakenedMoves.includes(move.id) && defender.isGrounded() && !defender.isSemiInvulnerable()) {
					this.debug('move weakened by plastic terrain');
					return this.chainModify(0.5);
				}
				if (move.type === 'Plastic' && attacker.isGrounded()) {
					this.debug('plastic terrain boost');
					return this.chainModify([1.5]);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Plastic Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Plastic Terrain');
				}
			},
			onResidualOrder: 5,
			onResidualSubOrder: 2,
			onResidual(pokemon) {
				if (pokemon.isGrounded() && !pokemon.isSemiInvulnerable()) {
					if (pokemon.item || !pokemon.lastItem) return false;
					const item = pokemon.lastItem;
					pokemon.lastItem = '';
					this.add('-item', pokemon, this.dex.items.get(item), '[from] move: Recycle');
					pokemon.setItem(item);
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Plastic Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Plastic",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	highjumpsaw: {
		num: 136,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "High Jump Saw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, kick: 1, punch: 1},

		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Steel', type);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	stingingrage: {
		num: 153,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Stinging Rage",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 100,
			status: 'tox',
		},
		selfdestruct: "always",
		target: "normal",
		type: "Bug",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	malicepowder: {
		num: 298,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Malice Powder",
		pp: 20,
		priority: 0,
		flags: {powder: 1, protect: 1, mirror: 1},
		volatileStatus: 'confusion',
		secondary: null,
		onHit(target, source) {
			source.addVolatile('confusion');
			target.addVolatile('partiallytrapped');
			source.addVolatile('partiallytrapped');
		},
		target: "allAdjacent",
		type: "Bug",
		zMove: {boost: {spa: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	overdose: {
		num: 457,
		accuracy: 80,
		basePower: 150,
		category: "Special",
		name: "Overdose",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [1, 2],
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	bloodshot: {
		num: 161,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Blood Shot",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('psn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.addVolatile('confusion');
				}
			},
		},
		target: "normal",
		type: "???",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	glassing: {
		num: 487,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Glassing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Glass' || !target.setType('Glass')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Glass');
			},
		},
		target: "normal",
		type: "Glass",
		zMove: {boost: {spa: 1}},
		contestType: "Smart",
		isNonstandard: "Future",
	},
	meltedplastic: {
		num: 503,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Melted Plastic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		thawsTarget: true,
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Plastic",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	plasticblaze: {
		num: 551,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Plastic Blaze",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			status: 'brn',
		},
		target: "normal",
		type: "Plastic",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	fadereflection: {
		num: 223,
		accuracy: 90,
		basePower: 85,
		category: "Special",
		name: "Fade Reflection",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			volatileStatus: 'disable',
		},
		target: "normal",
		type: "Glass",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	recycleray: {
		num: 94,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Recycle Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Plastic",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	spectresabre: {
		num: 530,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Spectre Sabre",
		pp: 15,
		priority: 0,
		flags: {slicing: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Ghost",
		maxMove: {basePower: 150},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	skummray: {
		num: 161,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Skumm Ray",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source) {
				const result = this.random(4);
				if (result === 0) {
					target.trySetStatus('slp', source);
				} else if (result === 1) {
					target.trySetStatus('frz', source);
				} else if (result === 2) {
					target.trySetStatus('par', source);
				} else {
					target.addVolatile('flinch');
				}
			},
		},
		target: "normal",
		type: "???",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	hyperzone: {
		num: 1001,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hyper Zone",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'hyperzone',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onTryHitPriority: 4,
			onTryHit(target, source, effect) {
				if (effect && (effect.priority <= 0.1 || effect.target === 'self')) {
					return;
				}
				if (target.isSemiInvulnerable() || target.isAlly(source)) return;
				if (!(target.hasType('Dark'))) {
					const baseMove = this.dex.moves.get(effect.id);
					if (baseMove.priority > 0) return;
				}
				this.add('-activate', target, 'move: Hyper Zone');
				return null;
			},
			onSetStatus(status, target, source, effect) {
				if (!(target.hasType('Dark'))) {
					if (((effect as Move)?.status)) return;
				}
				this.add('-immune', target, '[from] move: Hyper Zone');
				return false;
			},
			onModifyMove(move, target, source) {
				if ((target.hasType('Dark'))) {
					move.infiltrates = true;
					this.add('-activate', target, 'move: Hyper Zone');
				}
			},
			onFieldStart(target, source) {
				this.add('-fieldstart', 'move: Hyper Zone', '[of] ' + source);
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('hyperzone');
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 6,
			onFieldEnd() {
				this.add('-fieldend', 'move: Hyper Zone', '[of] ' + this.effectState.source);
			},
		},
		secondary: null,
		noSketch: true,
		target: "all",
		type: "Dark",
		isNonstandard: "Future",
		zMove: {boost: {spd: 1}},
		contestType: "Cool",
	},
	freeballoonday: {
		num: 788,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Free Balloon Day",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.hasItem('airballoon') && pokemon.hasItem('airballoon')) {
				return this.chainModify(4);
			} else if (pokemon.hasItem('airballoon')) {
				return this.chainModify(2);
			} else if (target.hasItem('airballoon')) {
				return this.chainModify(2);
			}
		},
		onAfterHit(pokemon, target) {
			if (!pokemon.item) {
				pokemon.setItem('airballoon');
			}
			if (!target.item) {
				target.setItem('airballoon');
			}
		},
		isNonstandard: "Future",
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	helldive: {
		num: 893,
		accuracy: 85,
		basePower: 160,
		category: "Special",
		name: "Hell Dive",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		// Move disabling implemented in Battle#nextTurn in sim/battle.ts
		onTry(source) {
			source.addVolatile('helldive');
		},
		condition: {
			duration: 2,
			onBeforeMove(pokemon, target, move) {
				if (move.id === 'helldive') {
					this.add('cant', pokemon, 'move: Hell Dive', move);
					pokemon.removeVolatile('helldive');
					return false;
				}
			},
		},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		secondary: null,
		isNonstandard: "Future",
		target: "normal",
		type: "Dark",
	},
	mushroomshot: {
		num: 788,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Mushroom Shot",
		pp: 10,
		priority: 0,
		multihit: 4,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target) {
			if (this.field.getPseudoWeather('gravity') && (target.volatiles['partiallytrapped'])) {
				return this.chainModify(3);
			}
			if (target.volatiles['partiallytrapped']) {
				return this.chainModify(2);
			}
			if (this.field.getPseudoWeather('gravity')) {
				return this.chainModify(1.5);
			}
		},
		secondary: null,
		isNonstandard: "Future",
		target: "normal",
		type: "Bug",
	},
	qualityrip: {
		num: 222,
		accuracy: 100,
		basePower: 0,
		category: "Special",
		isNonstandard: "Future",
		name: "Quality Rip",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1, nonsky: 1, sound: 1},
		onModifyMove(move, pokemon) {
			const i = this.random(100);
			if (i < 5) {
				move.magnitude = 4;
				move.basePower = 10;
			} else if (i < 15) {
				move.magnitude = 5;
				move.basePower = 30;
			} else if (i < 35) {
				move.magnitude = 6;
				move.basePower = 50;
			} else if (i < 65) {
				move.magnitude = 7;
				move.basePower = 70;
			} else if (i < 85) {
				move.magnitude = 8;
				move.basePower = 90;
			} else if (i < 95) {
				move.magnitude = 9;
				move.basePower = 110;
			} else {
				move.magnitude = 10;
				move.basePower = 150;
			}
		},
		onUseMoveMessage(pokemon, target, move) {
			this.add('-activate', pokemon, 'move: Quality Rip', move.magnitude);
		},
		secondary: null,
		target: "allAdjacent",
		type: "Electric",
		zMove: {basePower: 140},
		maxMove: {basePower: 140},
		contestType: "Tough",
	},
	concussion: {
		num: 200,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Concussion",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		isNonstandard: "Future",
		target: "randomNormal",
		type: "Psychic",
		contestType: "Cool",
	},
	shootingstar: {
		num: 394,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Shooting Star",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [20, 100],
		target: "normal",
		isNonstandard: "Future",
		selfSwitch: true,
		secondary: null,
		type: "Fairy",
		contestType: "Cool",
	},
	cursedblade: {
		num: 42017,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		isNonstandard: "Future",
		name: "Cursed Blade",
		pp: 15,
		priority: 0,
		flags: {slicing: 1, contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'curse',
		},
		target: "normal",
		type: "Ghost",
		contestType: "Cool",
	},
	dousingflame: {
		num: 573,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Dousing Flame",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Fire') return 1;
		},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		isNonstandard: "Future",
		type: "Fire",
		contestType: "Beautiful",
	},
	riptide: {
		num: 463,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Riptide",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		isNonstandard: "Future",
		type: "Water",
		contestType: "Tough",
	},
	secretstrength: {
		num: 686,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Secret Strength",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			if (pokemon.getTypes()[1]) {
				move.type = pokemon.getTypes()[1];
			} else {
				move.type = pokemon.getTypes()[0];
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
		contestType: "Clever",
	},

	hornithrust: {
		num: 428,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Horni Thrust",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			pokemon.abilityState.irresistable = true;
			if (move.category !== "Status") {
				if (!move.secondaries) move.secondaries = [];
				for (const secondary of move.secondaries) {
					if (secondary.volatileStatus === 'attract') return;
				}
				move.secondaries.push({
					chance: 33,
					volatileStatus: 'attract',
				});
			}
		},
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
		contestType: "Clever",
	},
	mouthmelter: {
		num: 675,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Mouth Melter",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		condition: {
			duration: 5,
			onStart(target) {
				this.add('-start', target, 'TMouth Melter', '[silent]');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					if (this.dex.moves.get(moveSlot.id).flags['sound'] || this.dex.moves.get(moveSlot.id).flags['bite']) {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 6,
			onBeforeMove(pokemon, target, move) {
				if (!move.isZ && !move.isMax && move.flags['sound'] || move.flags['bite']) {
					this.add('cant', pokemon, 'move: Mouth Melter');
					return false;
				}
			},
			onModifyMove(move, pokemon, target) {
				if (!move.isZ && !move.isMax && move.flags['sound'] || move.flags['bite']) {
					this.add('cant', pokemon, 'move: Mouth Melter');
					return false;
				}
			},
			onResidualOrder: 22,
			onEnd(target) {
				this.add('-end', target, 'Mouth Melter', '[silent]');
			},
		},
		secondary: {
			chance: 100,
			onHit(target) {
				target.addVolatile('mouthmelter');
			},
		},
		multihit: 2,
		target: "normal",
		type: "Poison",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	rebuild: {
		num: 69027,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rebuild",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status) && pokemon.hp >= pokemon.maxhp) return false;
			pokemon.cureStatus();
		},
		heal: [2, 3],
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	devilsbarrage: {
		num: 458,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Devil's Barrage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		multihit: 3,
		secondary: null,
		target: "normal",
		type: "Electric",
		zMove: {basePower: 190},
		maxMove: {basePower: 140},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	slysquall: {
		num: 42013,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Sly Squall",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		beforeMoveCallback(source, target, move) {
			if (source.illusion) move.willCrit = true;
		},
		onHit(target, source) {
			this.singleEvent('End', this.dex.abilities.get('Illusion'), source.abilityState, source);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Cute",
	},

	swamp: {
		num: 1001,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Swamp",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		sideCondition: 'swamp',
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('swamp');
				}
			},
		},
		condition: {
			duration: 4,
			durationCallback(target, source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 6;
				}
				return 4;
			},
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'swamp');
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(0.80);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 9,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'swamp');
			},


		},

		secondary: null,
		noSketch: true,
		target: "allAdjacentFoes",
		type: "Grass",
		isNonstandard: "Future",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	bigshot: {
		num: 177,
		accuracy: 97,
		basePower: 97,
		category: "Special",
		name: "Big Shot",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1, distance: 1},
		critRatio: 2,
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "any",
		type: "Dark",
		isNonstandard: "Future",
		contestType: "Cool",
	},
	foolsgambit: {
		num: 485,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		overrideDefensiveStat: 'spd',
		name: "Fool's Gambit",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Fairy') return 0;
		},
		target: "any",
		type: "Dark",
		isNonstandard: "Future",
		contestType: "Clever",
	},
	trapcard: {
		num: 485,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Trap Card",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		priorityChargeCallback() {},
		onTryMove() {},
		onBasePower(basePower, pokemon) {
			if (!pokemon.volatiles['shelltrap']?.gotHit) {
				return this.chainModify(2);
			}
		},
		onAfterHit(target, pokemon, move) {
			pokemon.abilityState.irresistable = true;
			if (!pokemon.volatiles['shelltrap']?.gotHit) {
				target.addVolatile('attract');
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				pokemon.abilityState.irresistable = true;
				this.add('-singleturn', pokemon, 'move: Shell Trap');
			},
			onHit(pokemon, source, move) {
				pokemon.abilityState.irresistable = true;
				if (!pokemon.isAlly(source) && move.category === 'Physical') {
					this.effectState.gotHit = true;
				}
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		isNonstandard: "Future",
		contestType: "Cute",
	},
	winterwhiteout: {
		num: 619,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Winter Whiteout",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	gmaxblobbomb: {
		num: 69028,
		accuracy: 100,
		basePower: 160,
		category: "Physical",
		name: "G-Max Blob Bomb",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target, source, move) {
			source.side.addSideCondition('safeguard');
			source.side.addSideCondition('mist');
		},
		target: "normal",
		type: "Ice",
		noSketch: true,
		contestType: "Cool",
		isNonstandard: "Future",
	},
	heroicstrike: {
		accuracy: true,
		basePower: 90,
		category: "Physical",
		name: "Heroic Strike",
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		onEffectiveness(typeMod, target, type, move) {
			if (this.dex.getEffectiveness('Fighting', type) > 0) {
				return typeMod + this.dex.getEffectiveness('Fighting', type);
			}
		},
		ignoreImmunity: true,
		ignoreEvasion: true,
		ignoreDefensive: true,
		ignoreAbility: true,
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	heroiconslaught: {
		accuracy: true,
		basePower: 90,
		category: "Physical",
		name: "Heroic Onslaught",
		multihit: 2,
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		ignoreImmunity: true,
		ignoreEvasion: true,
		ignoreDefensive: true,
		ignoreAbility: true,
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	drinkpotion: {
		num: 166,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Drink Potion",
		pp: 5,
		priority: 1,
		noPPBoosts: true,
		isNonstandard: "Future",
		type: "Normal",
		flags: {snatch: 1, heal: 1},
		target: "self",
		onHit(target, source, activeMove) {
			if (target.hp >= target.maxhp) return false;
			const percentHp = target.hp / target.maxhp;
			const moveIndex = target.moves.indexOf(activeMove.id);
			let doses = Math.min(5, (target.moveSlots[moveIndex]?.pp || 0) + 1);
			if (percentHp >= 0.8) {
				doses = Math.min(doses, 1);
			} else if (percentHp >= 0.6) {
				doses = Math.min(doses, 2);
			} else if (percentHp >= 0.4) {
				doses = Math.min(doses, 3);
			} else if (percentHp >= 0.2) {
				doses = Math.min(doses, 4);
			}

			if (!doses) return false;

			const damage = this.heal((target.maxhp / 5) * doses);
			if (damage) {
				this.add('-heal', target, target.getHealth, '[from] move: Drink Potion');
			}

			target.deductPP(this.effect.id, Math.max(0, doses - 1)); // Don't include normally used PP
			this.add('-activate', target, 'move: Drink Potion', this.effect.name, doses);
		},
	},
	rawvenom: {
		num: 403,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Raw Venom",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'disable',
		},
		target: "any",
		type: "Poison",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	flurryfist: {
		num: 857,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Flurry Fist",
		pp: 15,
		priority: 1,
		flags: {protect: 1, mirror: 1, punch: 1, contact: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	tripunch: {
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Tri-Punch",
		pp: 10,
		priority: 0,
		target: "normal",
		type: "???",
		flags: {protect: 1, mirror: 1, contact: 1},
		multihit: 3,
		canContinue: true,
		onTryHit(target, source, move) {
			if (move.hit === 1) {
				move.type = 'Ice';
			} else if (move.hit === 2) {
				move.type = 'Electric';
			} else if (move.hit === 3) {
				move.type = 'Fire';
			}
		},
		secondary: {
			chance: 15,
			onHit(target, source, move) {
				if (move.hit === 1) {
					target.trySetStatus('frz', source);
				} else if (move.hit === 2) {
					target.trySetStatus('par', source);
				} else if (move.hit === 3) {
					target.trySetStatus('brn', source);
				}
			},
		},
		isNonstandard: "Future",
	},
	gigasubfernostrike: {
		accuracy: true,
		basePower: 111,
		category: "Physical",
		name: "Gigasubferno Strike",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "fusjiniumz",
		target: "normal",
		type: "???",
		contestType: "Cool",
		isNonstandard: "Future",
		multihit: 3,
		canContinue: true,
		onTryHit(target, source, move) {
			if (move.hit === 1) {
				move.type = 'Ice';
			} else if (move.hit === 2) {
				move.type = 'Electric';
			} else if (move.hit === 3) {
				move.type = 'Fire';
			}
		},
		secondary: {
			chance: 50,
			onHit(target, source, move) {
				if (move.hit === 1) {
					target.trySetStatus('frz', source);
				} else if (move.hit === 2) {
					target.trySetStatus('par', source);
				} else if (move.hit === 3) {
					target.trySetStatus('brn', source);
				}
			},
		},
	},
	backwardslongjump: {
		num: 136,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Backwards Long Jump",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.effect);
		},
		secondary: null,
		target: "normal",
		type: "???",
		contestType: "Cool",
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.volatiles['backwardslongjump'] || move.hit === 1) {
				pokemon.addVolatile('backwardslongjump');
			}
			const bp = this.clampIntRange(move.basePower + 10 * pokemon.volatiles['backwardslongjump'].multiplier, 1, 160);
			this.debug('BP: ' + bp);
			return bp;
		},
		onAfterMoveSecondary(target, source, move) {
			if (!source.volatiles['backwardslongjump'] || move.hit === 1) {
				source.addVolatile('backwardslongjump');
			}
			const numBoosts = source.volatiles['backwardslongjump'].multiplier;
			this.boost({spe: numBoosts}, source);
		},
		condition: {
			duration: 2,
			onStart() {
				this.effectState.multiplier = 1;
			},
			onRestart() {
				if (this.effectState.multiplier < 4) {
					this.effectState.multiplier <<= 1;
				}
				this.effectState.duration = 2;
			},
		},
		isNonstandard: "Future",
	},
	deepfreeze: {
		num: 86,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Deep Freeze",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'frz',
		ignoreImmunity: false,
		onTryHit(target, source) {
			if (source.status) {
				return false;
			}
		},
		onAfterHit(source, target, move) {
			source.trySetStatus('frz');
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMove: {boost: {spd: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	sap: {
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Sap",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Sap');
			},
			onResidualOrder: 13,
			onResidual(pokemon) {
				this.damage(pokemon.baseMaxhp / (pokemon.hasType(['Steel']) ? 4 : 8));
			},
			onModifySpe(spe, pokemon) {
				if (pokemon.hasType('Steel')) {
					return this.chainModify(0.50);
				}
			},
			onModifyAtk(atk, pokemon) {
				if (pokemon.hasType('Steel')) {
					return this.chainModify(0.75);
				}
			},
			onModifySpA(atk, pokemon) {
				if (pokemon.hasType('Steel')) {
					return this.chainModify(0.75);
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Sap');
			},
		},
		secondary: {
			chance: 100,
			volatileStatus: 'sap',
		},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	vwlstrk: {
		num: 86,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Vwl Strk",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			if (!target) return move.basePower;

			let totalVowels = 0;
			for (let i = 0; i < target.species.name.length; i++) {
				const character = target.species.name.charAt(i);
				if (['a', 'e', 'i', ' o', 'u'].includes(character)) {
					totalVowels++;
				}
			}

			const bp = this.clampIntRange(move.basePower + 20 * totalVowels, 1, 160);
			this.debug('BP: ' + bp);
			return bp;
		},
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	itemclaws: {
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		isNonstandard: "Future",
		name: "Item Claws",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		basePowerCallback(pokemon, target, move) {
			if (!target) return move.basePower;

			const itemSet = new Set<string>();
			target.side.pokemon
				.forEach((sidePokemon) => {
					const item = sidePokemon.getItem().id || sidePokemon.lastItem;
					if (item) itemSet.add(item);
				});

			const bp = this.clampIntRange(move.basePower - (15 * itemSet.size), 1, 160);
			return bp;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
	},
	fastpokebeam: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fastpoke Beam",
		pp: 5,
		noPPBoosts: true,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, pokemon) {
			if (!target.formeChange('Slowpoke-Galar')) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {effect: 'heal'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	pokemoncenter: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Pokemon Center",
		pp: 5,
		noPPBoosts: true,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source) {
			if (!target) return false;
			let pokemonCenters = 0;
			target.side.pokemon.forEach((pokemon) => {
				if (pokemon.baseSpecies.id === 'chansey') pokemonCenters++;
			});
			const shitmon = new Pokemon({
				name: `Pokemon Center v${pokemonCenters}`,
				species: 'Chansey',
				moves: ['Heal Pulse'],
				evs: {hp: 4, atk: 0, def: 252, spa: 0, spd: 252, spe: 0},
				item: 'Eviolite',
			}, target.side);
			shitmon.position = target.side.pokemon.length;
			target.side.pokemon.push(shitmon);
			target.side.pokemonLeft += 1;
			this.add('teamsize', target.side.id, target.side.pokemon.length);
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	regularattack: {
		num: 69022,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Regular Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: null,
		target: "normal",
		type: "???",
		zMove: {basePower: 190},
		isNonstandard: "Future",
	},
	laserbeam: {
		num: 190,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		isNonstandard: "Future",
		name: "Laser Beam",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "???",
		contestType: "Tough",
	},
	ballkick: {
		num: 86,
		accuracy: 95,
		basePower: 210,
		category: "Physical",
		name: "Ball Kick",
		pp: 5,
		priority: 0,
		flags: {protect: 1, kick: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 30,
			status: 'par',
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 190},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	highkick: {
		num: 67,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetHeight = target.species.heightm;
			let bp;
			if (targetHeight >= 3) {
				bp = 120;
			} else if (targetHeight >= 2) {
				bp = 100;
			} else if (targetHeight >= 1) {
				bp = 80;
			} else if (targetHeight >= 0.5) {
				bp = 60;
			} else if (targetHeight >= 0.25) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "High Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 160},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	landmind: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Land Mind",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'landmind',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Land Mind');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('landmind')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 4);
				pokemon.side.removeSideCondition('landmind');
				this.add('-sideend', pokemon.side, 'move: Land Mind');
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Smart",
		isNonstandard: "Future",
	},
	calmfist: {
		accuracy: 100,
		basePower: 160,
		basePowerCallback(pokemon) {
			return Math.max(40, 160 - 20 * pokemon.timesAttacked);
		},
		category: "Physical",
		name: "Calm Fist",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	firstrespects: {
		accuracy: 100,
		basePower: 140,
		basePowerCallback(pokemon, target, move) {
			return Math.max(1, 120 - 20 * pokemon.side.totalFainted);
		},
		category: "Physical",
		name: "First Respects",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	unshedtail: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Unshed Tail",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		slotCondition: 'unshedtail',
		condition: {
			duration: 2,
			onStart(pokemon, source) {
				this.effectState.hp = pokemon.volatiles['substitute'].hp;
			},
			onSwap(target) {
				if (!target.fainted) {
					target.heal(this.effectState.hp);
					this.add('-heal', target, target.getHealth, '[from] move: Unshed Tail');
					target.side.removeSlotCondition(target, 'unshedtail');
				}
			},
		},
		onTryHit(source) {
			if (!source.volatiles['substitute']) return false;
		},
		selfSwitch: true,
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		isNonstandard: "Future",
	},
	eructlas: {
		num: 864,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Eruc Tlas",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-start', pokemon, 'Eruc Tlas');
			},
			onResidualOrder: 13,
			onResidual(pokemon) {
				this.heal(pokemon.baseMaxhp / (!pokemon.hasType(['Water', 'Steel']) ? 4 : 8));
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Eruc Tlas');
			},
		},
		secondary: {
			chance: 100,
			volatileStatus: 'eructlas',
		},
		target: "normal",
		type: "Fairy",
	},
	depopulationbomb: {
		accuracy: 50,
		basePower: 240,
		category: "Special",
		name: "De-Population Bomb",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	glaiverest: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Glaive Rest",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onTry(source) {
			if (source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz')) return false;

			if (source.hp === source.maxhp) {
				this.add('-fail', source, 'heal');
				return null;
			}
			if (source.hasAbility(['insomnia', 'vitalspirit'])) {
				this.add('-fail', source, '[from] ability: ' + source.getAbility().name, '[of] ' + source);
				return null;
			}
		},
		onHit(target, source, move) {
			const result = target.setStatus('slp', source, move);
			if (!result) return result;
			target.statusState.time = 3;
			target.statusState.startTime = 3;
			this.heal(target.maxhp); // Aesthetic only as the healing happens after you fall asleep in-game
		},
		volatileStatus: 'glaiverest',
		condition: {
			noCopy: true,
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Glaive Rest', '[silent]');
			},
			onAccuracy() {
				return true;
			},
			onSourceModifyDamage() {
				return this.chainModify(2);
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Glaive Rest drawback before attack');
				pokemon.removeVolatile('glaiverest');
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
	},
	pobybbolb: {
		num: 69060,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Pob Ybbolb",
		secondary: {
			chance: 100,
			self: {
				boosts: {
					accuracy: 1,
				},
			},
		},
		pp: 23,
		priority: 0,
		noPPBoosts: true,
		target: "normal",
		type: "Flying",
		flags: {protect: 1, mirror: 1},
		isNonstandard: "Future",
	},
	eronsrepus: {
		num: 69007,
		accuracy: 255,
		basePower: 100,
		category: "Special",
		name: "Erons Repus",
		pp: 61,
		priority: 0,
		noPPBoosts: true,
		flags: {protect: 1, mirror: 1, contact: 1},
		onAfterMove(source) {
			source.trySetStatus('slp');
		},
		target: "normal",
		type: "Fire",
		zMove: {basePower: 220},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	garudaimpact: {
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Garuda Impact",
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		pp: 15,
		priority: -1,
		target: "normal",
		type: "Fire",
		flags: {protect: 1},
		isNonstandard: "Future",
	},
	potemkinbuster: {
		accuracy: true,
		basePower: 300,
		category: "Physical",
		isNonstandard: "Future",
		name: "Potemkin Buster",
		pp: 10,
		priority: -3,
		flags: {contact: 1, charge: 1, protect: 1, mirror: 1, gravity: 1, distance: 1},
		onModifyMove(move, source) {
			if (!source.volatiles['potemkinbuster']) {
				move.accuracy = true;
				delete move.flags['contact'];
			}
		},
		onMoveFail(target, source) {
			if (source.volatiles['twoturnmove'] && source.volatiles['twoturnmove'].duration === 1) {
				source.removeVolatile('potemkinbuster');
				source.removeVolatile('twoturnmove');
				if (target === this.effectState.target) {
					this.add('-end', target, 'Potemkin Buster', '[interrupt]');
				}
			}
		},
		onTry(source, target) {
			return !target.fainted;
		},
		onTryHit(target, source, move) {
			if (source.removeVolatile(move.id)) {
				if (target !== source.volatiles['twoturnmove'].source) return false;

				if (target.hasType('Flying')) {
					this.add('-immune', target);
					return null;
				}
			} else {
				if (target.volatiles['substitute'] || target.isAlly(source)) {
					return false;
				}
				if (target.getWeight() >= 5000) {
					this.add('-fail', target, 'move: Potemkin Buster', '[heavy]');
					return null;
				}

				this.add('-prepare', source, move.name, target);
				source.addVolatile('twoturnmove', target);
				return null;
			}
		},
		onHit(target, source) {
			if (target.hp) this.add('-end', target, 'Potemkin Buster');
		},
		condition: {
			duration: 2,
			onAnyDragOut(pokemon) {
				if (pokemon === this.effectState.target || pokemon === this.effectState.source) return false;
			},
			onFoeTrapPokemonPriority: -15,
			onFoeTrapPokemon(defender) {
				if (defender !== this.effectState.source) return;
				defender.trapped = true;
			},
			onFoeBeforeMovePriority: 12,
			onFoeBeforeMove(attacker, defender, move) {
				if (attacker === this.effectState.source) {
					attacker.activeMoveActions--;
					this.debug('Potemkin buster nullifying.');
					return null;
				}
			},
			onRedirectTargetPriority: 99,
			onRedirectTarget(target, source, source2) {
				if (source !== this.effectState.target) return;
				if (this.effectState.source.fainted) return;
				return this.effectState.source;
			},
			onAnyInvulnerability(target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onAnyBasePower(basePower, target, source, move) {
				if (target !== this.effectState.target && target !== this.effectState.source) {
					return;
				}
				if (source === this.effectState.target && target === this.effectState.source) {
					return;
				}
				if (move.id === 'gust' || move.id === 'twister') {
					this.debug('BP doubled on midair target');
					return this.chainModify(2);
				}
			},
			onFaint(target) {
				if (target.volatiles['skydrop'] && target.volatiles['twoturnmove'].source) {
					this.add('-end', target.volatiles['twoturnmove'].source, 'Potemkin Buster', '[interrupt]');
				}
			},
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Potemkin Buster');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					this.effectState.lostFocus = true;
				}
			},
			onTryAddVolatile(status, pokemon) {
				if (status.id === 'flinch') return null;
			},
		},
		secondary: null,
		target: "any",
		type: "Fighting",
		contestType: "Tough",
	},
	pantherkkick: {
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Pantherk Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		onTry(source) {
			if (source.species.name === 'Pantherk') {
				return;
			}
			this.attrLastMove('[still]');
			this.add('-fail', source, 'move: Pantherk Kick');
			this.hint("You have not modded MUGEN hard enough.");
			return null;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	testomajesto: {
		accuracy: true,
		basePower: 1,
		category: "Physical",
		name: "Testo Majesto",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "???",
		isNonstandard: "Future",
	},
	saltsprinkle: {
		num: 1573,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Salt Sprinkle",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Water' || type === 'Steel') return 1;
		},
		basePowerCallback(pokemon, target, move) {
			if (target.status || target.hasAbility('comatose')) {
				this.debug('BP doubled from status condition');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		target: "normal",
		isNonstandard: "Future",
		type: "Rock",
		contestType: "Tough",
	},
	shuttleloop: {
		num: 812,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Shuttle Loop",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
		contestType: "Cool",
	},
	holdit: {
		num: 1105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hold It!",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [4, 5],
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {effect: 'clearnegativeboost'},
		isNonstandard: "Future",
		contestType: "Clever",
	},
	objection: {
		num: 428,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Objection!",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
		contestType: "Clever",
	},
	takethat: {
		num: 1212,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Take That!",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, mirror: 1},
		onHit(target, source, move) {
			return target.addVolatile('trapped', source, move, 'trapper');
		},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		isNonstandard: "Future",
		contestType: "Beautiful",
	},
	plushrush: {
		num: 1528,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Plush Rush",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "???",
		isNonstandard: "Future",
		contestType: "Tough",
	},
	seaoffire: {
		num: 1001,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sea Of Fire",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		sideCondition: 'seaoffire',
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('seaoffire');
				}
			},
		},
		condition: {
			duration: 4,
			durationCallback(target, source, effect) {
				if (source?.hasAbility('persistent')) {
					this.add('-activate', source, 'ability: Persistent', effect);
					return 6;
				}
				return 4;
			},
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'seaoffire');
			},
			onResidual(pokemon) {
				if (!pokemon.hasType('Fire')) this.damage(pokemon.baseMaxhp / 8, pokemon);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 9,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'seaoffire');
			},
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	tridentcharge: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Trident Charge",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'torment',
		},
		onBasePower(basePower, pokemon, target) {
			if (target.side.getSideCondition('seaoffire')) {
				return this.chainModify(1.5);
			}
		},
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
		maxMove: {basePower: 140},
	},
	blackfire: {
		num: 1000,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Blackfire",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			onHit(source) {
				for (const side of source.side.foeSidesWithConditions()) {
					side.addSideCondition('gmaxwildfire');
				}
			},
		},
		condition: {
			duration: 4,
			onSideStart(targetSide) {
				this.add('-sidestart', targetSide, 'G-Max Wildfire');
			},
			onResidualOrder: 5,
			onResidualSubOrder: 1,
			onResidual(target) {
				if (!target.hasType('Fire')) this.damage(target.baseMaxhp / 6, target);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 11,
			onSideEnd(targetSide) {
				this.add('-sideend', targetSide, 'G-Max Wildfire');
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Fire",
		contestType: "Cool",
	},
	justmonikat: {
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Just Monikat",
		pp: 5,
		noPPBoosts: true,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target, pokemon, move) {
			const formeChangeResult = target.formeChange('Monikat');
			const trapResult = target.addVolatile('trapped', target, move, 'trapper');

			return trapResult && formeChangeResult;
		},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	bugout: {
		num: 69050,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Bug Out",
		pp: 10,
		priority: -6,
		target: "normal",
		type: "Bug",
		flags: {contact: 1, protect: 1},
		forceSwitch: true,
		isNonstandard: "Future",
	},
	gentworrible: {
		num: 217,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Gentworrible",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			const rand = this.random(10);
			if (rand < 2) {
				move.heal = [1, 4];
				move.infiltrates = true;
			} else if (rand < 6) {
				move.basePower = 100;
			} else if (rand < 9) {
				move.basePower = 100;
			} else {
				move.basePower = 100;
			}
		},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Ice', type);
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	hardcrash: {
		num: 722,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		isNonstandard: "Future",
		name: "Hardcrash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		secondary: {
			chance: 100,
			status: 'par',
		},
		onAfterMove(source) {
			source.trySetStatus('frz');
		},
		target: "normal",
		type: "Electric",
		contestType: "Cool",
	},
	driftgear: {
		num: 508,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Drift Gear",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 2,
			atk: 1,
		},
		self: {
			boosts: {
				accuracy: -1,
			},
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	coldreception: {
		num: 69881,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cold Reception",
		pp: 10,
		priority: 0,
		flags: {},
		// TODO show prepare message before the "POKEMON used MOVE!" message
		// This happens even before sleep shows its "POKEMON is fast asleep." message
		weather: 'hail',
		selfSwitch: true,
		secondary: null,
		target: "all",
		type: "Ice",
		isNonstandard: "Future",
	},
	tombstonerd: {
		num: 1317,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Tombstoner-D",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	strifedicekind: {
		name: "Strife: Dicekind",
		basePower: 18,
		accuracy: 108,
		multihit: 8,
		pp: 8,
		noPPBoosts: true,
		priority: 0,
		multiaccuracy: true,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		secondary: {
			chance: 4, // ::::(
			onHit(target, source) {
				source.side.addSideCondition('luckyroll');
			},
		},
		category: "Special",
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	lavadapt: {
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		isNonstandard: "Future",
		name: "Lavadapt",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onHit(target, source) {
			if (!target.lastMoveUsed) {
				return false;
			}
			const possibleTypes = [];
			const attackType = target.lastMoveUsed.type;
			for (const type of this.dex.types.names()) {
				if (source.hasType(type)) continue;
				const typeCheck = this.dex.types.get(type).damageTaken[attackType];
				if (typeCheck === 2 || typeCheck === 3) {
					possibleTypes.push(type);
				}
			}
			if (!possibleTypes.length) {
				return false;
			}
			const randomType = this.sample(possibleTypes);

			if (!source.setType(randomType)) return false;
			this.add('-start', source, 'typechange', randomType);
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
	},
	shiternet: {
		num: 1046,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Shiternet",
		pp: 10,
		priority: 0,
		target: "allAdjacent",
		type: "Psychic",
		flags: {reflectable: 1},
		onAfterMove(source) {
			source.trySetStatus('par');
		},
		status: 'par',
		ignoreImmunity: false,
		secondary: null,
		isNonstandard: "Future",
	},
	banfulbunker: {
		num: 1661,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Banful Bunker",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'banfulbunker',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'move: Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect']) {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					source.addVolatile('taunt');
					source.addVolatile('torment');
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					source.addVolatile('taunt');
					source.addVolatile('torment');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "Poison",
		zMove: {boost: {def: 1}},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	meteor: {
		num: 1124,
		accuracy: 100,
		basePower: 36,
		category: "Special",
		name: "Meteor",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		ignoreDefensive: true,
		target: "normal",
		type: "Rock",
		contestType: "Cool",
	},
	ultima: {
		num: 1125,
		accuracy: true,
		basePower: 300,
		category: "Special",
		isNonstandard: "Future",
		name: "Ultima",
		pp: 1,
		priority: 0,
		flags: {},
		isZ: "blackmagiumz",
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		contestType: "Cool",
	},
	metronomeifitwasfunny: {
		num: 118,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Metronome If It Was Funny",
		pp: 40,
		priority: 0,
		flags: {},
		noMetronome: [],
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				!effect.noMetronome!.includes(move.name)
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		contestType: "Cute",
	},
	meatballmash: {
		num: 3090,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Meatball Mash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			self: {
				boosts: {
					def: 1,
					spd: 1,
				},
			},
		},
		target: "normal",
		type: "Flying",
		contestType: "Cool",
	},
	blandybland: {
		num: 1111,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Blandy Bland",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'simple' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('simple');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Simple', '[from] move: Blandy Bland');
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMove: {boost: {spa: 1}},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	thunderblitz: {
		num: 2424,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Thunder Blitz",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		maxMove: {basePower: 80},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	scarystory: {
		num: 6666,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Scary Story",
		pp: 5,
		priority: -6,
		flags: {reflectable: 1, mirror: 1, sound: 1, bypasssub: 1, allyanim: 1},
		forceSwitch: true,
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
					spa: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Ghost",
		zMove: {boost: {def: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	moonstrike: {
		num: 5851,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Moonstrike",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1, punch: 1},
		secondary: {
			chance: 30,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	invigorate: {
		num: 4204,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Invigorate",
		pp: 10,
		priority: 0,
		target: "self",
		type: "Fighting",
		heal: [1, 4],
		onHit(target) {
			if (target.hp <= target.maxhp / 2) {
				this.boost({
					atk: 2,
				});
			} else {
				this.boost({
					atk: 1,
				});
			}
		},
		flags: {snatch: 1},
		isNonstandard: "Future",
	},
	blazingswipe: {
		num: 7842,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		name: "Blazing Swipe",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	hivemind: {
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Hivemind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Bug",
		maxMove: {basePower: 80},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	artwall: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Future",
		name: "Art Wall",
		pp: 10,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'artwall',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
			const fastPop = <T>(list: T[], index: number) => {
				// If an array doesn't need to be in order, replacing the
				// element at the given index with the removed element
				// is much, much faster than using list.splice(index, 1).
				const length = list.length;
				if (index < 0 || index >= list.length) {
					// sanity check
					throw new Error(`Index ${index} out of bounds for given array`);
				}

				const element = list[index];
				list[index] = list[length - 1];
				list.pop();
				return element;
			};

			const sampleNoReplace = <T>(list: T[]) => {
				const length = list.length;
				if (length === 0) return null;
				const index = this.random(length);
				return fastPop(list, index);
			};

			const allTypes = this.dex.types.all().map((type) => type.name);
			const types = [sampleNoReplace(allTypes), sampleNoReplace(allTypes)].filter((type) => type) as string[];

			if (!types.length) return;

			pokemon.setType(types);
			this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Art Wall');
		},
		condition: {
			duration: 1,
			onStart(target) {
				this.add('-singleturn', target, 'Protect');
			},
			onTryHitPriority: 3,
			onTryHit(target, source, move) {
				if (!move.flags['protect'] || move.category === 'Status') {
					if (['gmaxoneblow', 'gmaxrapidflow'].includes(move.id)) return;
					if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;
					return;
				}
				if (move.smartTarget) {
					move.smartTarget = false;
				} else {
					this.add('-activate', target, 'move: Protect');
				}
				const lockedmove = source.getVolatile('lockedmove');
				if (lockedmove) {
					// Outrage counter is reset
					if (source.volatiles['lockedmove'].duration === 2) {
						delete source.volatiles['lockedmove'];
					}
				}
				if (this.checkMoveMakesContact(move, source, target)) {
					const fastPop = <T>(list: T[], index: number) => {
						// If an array doesn't need to be in order, replacing the
						// element at the given index with the removed element
						// is much, much faster than using list.splice(index, 1).
						const length = list.length;
						if (index < 0 || index >= list.length) {
							// sanity check
							throw new Error(`Index ${index} out of bounds for given array`);
						}

						const element = list[index];
						list[index] = list[length - 1];
						list.pop();
						return element;
					};

					const sampleNoReplace = <T>(list: T[]) => {
						const length = list.length;
						if (length === 0) return null;
						const index = this.random(length);
						return fastPop(list, index);
					};

					const allTypes = this.dex.types.all().map((type) => type.name);
					const types = source.getTypes().map((type) => sampleNoReplace(allTypes)).filter((type) => type) as string[];

					if (!types.length) return;

					source.setType(types);
					this.add('-start', source, 'typechange', source.getTypes().join('/'), '[from] move: Art Wall');
				}
				return this.NOT_FAIL;
			},
			onHit(target, source, move) {
				if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {
					const fastPop = <T>(list: T[], index: number) => {
						// If an array doesn't need to be in order, replacing the
						// element at the given index with the removed element
						// is much, much faster than using list.splice(index, 1).
						const length = list.length;
						if (index < 0 || index >= list.length) {
							// sanity check
							throw new Error(`Index ${index} out of bounds for given array`);
						}

						const element = list[index];
						list[index] = list[length - 1];
						list.pop();
						return element;
					};

					const sampleNoReplace = <T>(list: T[]) => {
						const length = list.length;
						if (length === 0) return null;
						const index = this.random(length);
						return fastPop(list, index);
					};

					const allTypes = this.dex.types.all().map((type) => type.name);
					const types = source.getTypes().map((type) => sampleNoReplace(allTypes)).filter((type) => type) as string[];

					if (!types.length) return;

					source.setType(types);
					this.add('-start', source, 'typechange', source.getTypes().join('/'), '[from] move: Art Wall');
				}
			},
		},
		secondary: null,
		target: "self",
		type: "???",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cool",
	},
	miraclepunch: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Miracle Punch",
		pp: 10,
		priority: 0,
		flags: {punch: 1},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.flags.punch === 1 && move.id !== 'miraclepunch'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	anyattack: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Any Attack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.basePower > 80 && move.id !== 'anyattack'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	anyheal: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Any Heal",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.flags.heal === 1 && move.basePower === 0 && move.id !== 'anyheal' && move.id !== 'healingwish' && move.id !== 'lunardance' && move.id !== 'floralhealing'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},

	anystatus: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Any Status",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				(move.status === 'par' || move.status === 'tox' || move.status === 'psn' || move.status === 'slp' || move.status === 'brn') && move.basePower === 0 && move.id !== 'anystatus'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	anystatup: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Any Statup",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.boosts && move.target === "self" && move.id !== 'memento'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	piercingstrike: {
		name: "Piercing Strike",
		basePower: 60,
		accuracy: 100,
		category: "Physical",
		type: "Steel",
		target: "normal",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onDamagePriority: -20,
		onDamage(damage, target, source, effect) {
			if (!target || damage <= target.hp) return;
			target.speciesState.overkillDamage = damage - target.hp;
			console.log(target.speciesState);
		},
		onAfterMoveSecondary(target) {
			console.log('movesecondary', target.speciesState);
			console.log(target.speciesState.overkillDamage, (target === undefined) || (target === null), target?.fainted, target?.hp);
			if (target.speciesState.overkillDamage && (!target || target.fainted || target.hp <= 0)) {
				if (!target.side.addSlotCondition(target, 'overkill')) return false;
				Object.assign(target.side.slotConditions[target.position]['overkill'], {
					overkillDamage: target.speciesState.overkillDamage,
				});
			}
			delete target.speciesState.overkillDamage;
		},
		isNonstandard: "Future",
	},
	badenergy: {
		accuracy: 90,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Bad Energy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'curse',
		},
		target: "normal",
		type: "Dark",
		contestType: "Cool",
	},
	cerebralparasite: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Cerebral Parasite",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	bellyflop: {
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Bellyflop",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	sinkhole: {
		num: 228,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Pursuit damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		isNonstandard: "Future",
		name: "Sinkhole",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('sinkhole', pokemon);
				const data = side.getSideConditionData('sinkhole');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('sinkhole');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Sinkhole start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Sinkhole');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('sinkhole', source, source.getLocOf(pokemon));
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	dustbowl: {
		num: 173,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Dustbowl",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			onHit(source) {
				this.field.setWeather('sandstorm');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Rock",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	squash: {
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Squash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, nonsky: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Grass",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	cherrynobyl: {
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Cherrynobyl",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		multihit: 2,
		recoil: [1, 3],
		secondary: {
			chance: 100,
			self: {
				onHit() {
					this.field.setTerrain('grassyterrain');
				},
			},
		},
		target: "normal",
		noSketch: true,
		type: "Grass",
		isNonstandard: "Future",
	},
	shadowbox: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Shadowbox",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		ignoreImmunity: {'Fighting': true},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Ghost') return 1;
		},
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
		contestType: "Cool",
	},
	mindbreak: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Mindbreak",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		ignoreImmunity: {'Psychic': true},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Dark') return 0;
		},
		target: "any",
		type: "Psychic",
		isNonstandard: "Future",
		contestType: "Clever",
	},
	finalfreeze: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Final Freeze",
		pp: 1,
		noPPBoosts: true,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		status: 'frz',
		ignoreImmunity: false,
		onTryHit(source) {
			if (source.speciesState.hasFinalFrozen) return false;
		},
		onAfterHit(source, target, move) {
			source.speciesState.hasFinalFrozen = true;
		},
		secondary: null,
		target: "normal",
		type: "Ice",
		zMove: {boost: {spd: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	berserkersoul: {
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Berserker Soul",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, allyanim: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) < pokemon.getStat('spa', false, true)) move.category = 'Special';
			move.multihit = pokemon.side.pokemon.filter(ally => !ally.fainted).length;
		},
		onTry(source, target, move) {
			if (!move.multihit) return false;
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	heartofthecards: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heart of the Cards",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 1,
			spa: 1,
		},
		volatileStatus: 'focusenergy',
		secondary: null,
		target: "self",
		type: "Fairy",
		zMove: {boost: {atk: 1}},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	mirrorball: {
		num: 277,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		isNonstandard: "Future",
		name: "Mirror Ball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		self: {
			sideCondition: 'magiccoat',
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Beautiful",
	},
	trashtalk: {
		num: 99,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		isNonstandard: "Future",
		name: "Trash Talk",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'rage',
		},
		self: {
			volatileStatus: 'focusenergy',
		},
		target: "normal",
		type: "Poison",
		contestType: "Tough",
	},
	thebigone: {
		num: 1997,
		accuracy: 1997,
		basePower: 1997,
		category: "Special",
		name: "THE BIG ONE",
		pp: 1997,
		priority: 0,
		noPPBoosts: true,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Electric",
		noSketch: true, // how the fuck did this take SO LONG to get implemented???
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	torchshriek: {
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Torch Shriek",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spa: -1,
				},
			},
		},
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	this: { // ZVTLsQ8iNCM 34:49
		accuracy: true,
		basePower: 399,
		category: "Special",
		name: "This",
		pp: 1,
		priority: -6,
		noPPBoosts: true,
		flags: {bypasssub: 1},
		breaksProtect: true,
		onBasePower(basePower, pokemon, target) {
			return this.chainModify(2);
		},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) < pokemon.getStat('atk', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		ignoreImmunity: {'???': true},
		willCrit: true,
		secondary: null,
		noSketch: true,
		target: "normal",
		type: "???",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	dartoftoxin: {
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Dart of Toxin",
		pp: 5,
		priority: 2,
		flags: {},
		ignoreImmunity: {'Poison': true},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return -1;
		},
		onHit(target) {
			if (this.randomChance(1, 5)) {
				target.side.addSideCondition('toxicspikes');
			}
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
		contestType: "Cool",
	},
	focusmiss: {
		num: 411,
		accuracy: 0,
		basePower: 120,
		category: "Special",
		name: "Focus Miss",
		pp: 5,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	movethatfucksyourself: {
		accuracy: true,
		basePower: 200,
		category: "Physical",
		isNonstandard: "Future",
		name: "Move That Fucks Yourself",
		pp: 1,
		priority: 0,
		flags: {contact: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Electric', type);
		},
		ignoreAbility: true,
		isZ: "ultrafuckiumz",
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
	},
	flounderpunch: {
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		name: "Flounder Punch",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(source, target) {
			if (target.baseSpecies.id !== 'Stunfisk') return false;
		},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 180},
		maxMove: {basePower: 130},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	alloutirony: {
		accuracy: 100,
		basePower: 10,
		category: "Physical",
		name: "All-Out Irony",
		noSketch: true,
		pp: 35,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			let bonus = 1;
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Pursuit-esque damage boost');
				bonus *= 2;
			}
			if (target.species.tags.includes('Weedlekind') || target.species.tags.includes('Krackokind')) {
				bonus *= 100;
			}
			return bonus * move.basePower;
		},
		beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('alloutirony', pokemon);
				const data = side.getSideConditionData('alloutirony');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit-esque start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: All-Out Irony');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('alloutirony', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	eatrocks: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Eat Rocks",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.4;
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					factor = 0.6;
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Eat Rocks', '[of] ' + pokemon);
				}
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		target: "self",
		type: "Dark",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	heroineslight: {
		accuracy: 100,
		basePower: 140,
		category: "Special",
		isNonstandard: "Future",
		name: "Heroine's Light",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bypasssub: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Fairy",
		contestType: "Beautiful",
	},
	scavenge: {
		num: 105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Scavenge",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			if (pokemon.item || !pokemon.lastItem) return false;
			const item = pokemon.lastItem;
			pokemon.lastItem = '';
			this.add('-item', pokemon, this.dex.items.get(item), '[from] move: Scavenge');
			pokemon.setItem(item);
		},
		heal: [49, 100],
		secondary: null,
		target: "self",
		type: "Plastic",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	acridblaze: {
		num: 305,
		accuracy: 95,
		basePower: 20,
		category: "Special",
		name: "Acrid Blaze",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'tox',
		},
		recoil: [3, 4],
		target: "normal",
		type: "Fire",
		contestType: "Clever",
		isNonstandard: "Future",
	},
	shellup: {
		num: 105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shell Up",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [4, 5],
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	shatteringstrike: {
		num: 710,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Shattering Strike",
		pp: 10,
		priority: 0,
		breaksProtect: true,
		flags: {contact: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Ice",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	sandblast: {
		num: 190,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Sandblast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	sharpwit: {
		num: 673,
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Future",
		name: "Sharp Wit",
		pp: 30,
		priority: 0,
		boosts: {
			spa: 1,
		},
		flags: {snatch: 1},
		volatileStatus: 'sharpwit',
		condition: {
			duration: 2,
			onStart(pokemon, source, effect) {
				if (effect && (['costar', 'imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', pokemon, 'move: Sharp Wit', '[silent]');
				} else {
					this.add('-start', pokemon, 'move: Sharp Wit');
				}
			},
			onRestart(pokemon) {
				this.effectState.duration = 2;
				this.add('-start', pokemon, 'move: Sharp Wit');
			},
			onModifyMove(move, source, target) {
				move.overrideDefensiveStat = 'def';
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'move: Sharp Wit', '[silent]');
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spa: 2}},
		contestType: "Cool",
	},
	funnyfun: {
		accuracy: true,
		basePower: 0,
		basePowerCallback(pokemon) {
			const bp = Math.floor((pokemon.happiness * 10) / 25) || 1;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		isNonstandard: "Future",
		name: "Funny Fun",
		pp: 5,
		priority: 2,
		flags: {protect: 1},
		target: "normal",
		type: "???",
		noSketch: true,
		willCrit: true,
		secondaries: [
			{
				chance: 100,
				onHit(target, source) {
					const result = this.random(2);
					if (result === 0) {
						target.trySetStatus('brn', source);
					} else {
						target.trySetStatus('par', source);
					}
				},
			}, {
				chance: 30,
				volatileStatus: 'flinch',
			},
		],
		onHit(target, source, move) {
			source.side.addSideCondition('reflect');
			source.side.addSideCondition('lightscreen');
			target.addVolatile('leechseed', source);
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		self: {
			onHit(pokemon, source, move) {
				this.add('-activate', source, 'move: Aromatherapy');
				for (const ally of source.side.pokemon) {
					if (ally !== source && (ally.volatiles['substitute'] && !move.infiltrates)) {
						continue;
					}
					ally.cureStatus();
				}
			},
		},
	},
	nightynight: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Nighty Night",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'slp',
		},
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	glacialgroove: {
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Glacial Groove",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, bypasssub: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ice",
		contestType: "Cool",
		isNonstandard: "Future",
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
	},
	crystalslash: {
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Crystal Slash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, contact: 1},
		secondary: {
			chance: 10,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Rock",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	carcrash: {
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Car Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, mirror: 1, bypasssub: 1},
		recoil: [33, 100],
		breaksProtect: true,
		secondaries: [
			{
				chance: 10,
				status: 'prz',
			}, {
				chance: 10,
				volatileStatus: 'confusion',
			},
		],
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	newcannon: {
		accuracy: true,
		basePower: 130,
		category: "Special",
		isNonstandard: "Future",
		name: "New Cannon",
		pp: 9,
		noPPBoosts: true,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		target: "normal",
		type: "Steel",
		onBasePower(basePower, target) {
			if (target.getTypes().join() === 'Water' || target.getTypes().join() === 'Flying') {
				return this.chainModify(0.33);
			}
		},
	},
	devilsharvest: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Future",
		name: "Devil's Harvest",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] > -6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = -1;
				this.boost(boost);
			} else {
				return false;
			}
			for (stat in target.boosts) {
				if (target.boosts[stat] > -6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = -1;
				this.boost(boost);
			} else {
				return false;
			}
		},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Grass",
		zMove: {effect: 'crit2'},
	},
	metromash: {
		accuracy: 100,
		basePower: 65,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const rolloutData = pokemon.volatiles['rollout'];
			if (rolloutData?.hitCount) {
				bp *= Math.pow(2, rolloutData.contactHitCount);
			}
			if (rolloutData && pokemon.status !== 'slp') {
				rolloutData.hitCount++;
				rolloutData.contactHitCount++;
				if (rolloutData.hitCount < 5) {
					rolloutData.duration = 2;
				}
			}
			if (pokemon.volatiles['shiftgear']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		isNonstandard: "Future",
		name: "Metro Mash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['rollout'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('rollout');
			// @ts-ignore
			// TS thinks pokemon.volatiles['rollout'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['rollout'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const rolloutData = source.volatiles["rollout"];
			if (
				rolloutData &&
				rolloutData.hitCount === 5 &&
				rolloutData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
					rolloutData.contactHitCount;
			}
		},
		condition: {
			duration: 1,
			onLockMove: 'rollout',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rollout'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	aboostingmove: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "A Boosting Move",
		pp: 30,
		priority: 0,
		noSketch: true,
		flags: {},
		onHit(target) {
			if (target.getStat('atk', true, true) > target.getStat('spa', true, true)) {
				this.boost({atk: 1, spe: 1});
			} else {
				this.boost({spa: 1, spe: 1});
			}
		},
		secondary: null,
		target: "self",
		type: "???",
		zMove: {effect: 'crit2'},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	adamagingmove: {
		accuracy: 100,
		basePower: 120,
		category: "Special",
		isNonstandard: "Future",
		name: "A Damaging Move",
		pp: 10,
		priority: 0,
		noSketch: true,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
			if (pokemon.activeMoveActions <= 1) {
				if (!move.secondaries) move.secondaries = [];
				for (const secondary of move.secondaries) {
					if (secondary.volatileStatus === 'flinch') return;
				}
				move.secondaries.push({
					chance: 100,
					volatileStatus: 'flinch',
				});
			}
		},
		onModifyPriority(priority, source, target, move) {
			if (source.activeMoveActions <= 1) {
				return priority + 1;
			}
		},
		target: "normal",
		type: "???",
		contestType: "Beautiful",

	},
	apivotingmove: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "A Pivoting Move",
		pp: 20,
		priority: 0,
		noSketch: true,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "???",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	ahealingmove: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "A Healing Move",
		pp: 5,
		priority: 0,
		noSketch: true,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status) && pokemon.hp >= pokemon.maxhp) return false;
			pokemon.cureStatus();
		},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "???",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	sadpoem: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sad Poem",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		secondary: {
			chance: 40,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	annoy: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Annoy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	peptalk: {
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Pep Talk",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		secondary: {
			chance: 30,
			self: {
				boosts: {
					accuracy: 1,
				},
			},
		},
		target: "normal",
		type: "Dark",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	errpkmn: {
		accuracy: 100,
		basePower: 88,
		category: "Special",
		overrideDefensiveStat: 'def',
		name: "ERR.PKMN",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
		isNonstandard: "Future",
		onTryHit(target, source, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Went first, ERR crit activated');
				move.willCrit = true;
				return;
			}
			this.debug('Went last, ERR no crit');
			move.willCrit = false;
		},
	},
	violentvines: {
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Violent Vines",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onHit(pokemon) {
			const sideConditions = [
				'spikes',
				'toxicspikes',
				'stealthrock',
				'stickyweb',
				'sleazyspores',
				'gmaxsteelsurge',
				'shattershard',
				'luckyroll',
			];
			const removedConditions = [];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Violent Vines', '[of] ' + pokemon);
					removedConditions.push(condition);
				}
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Grass",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	genesisboost: {
		num: 69660,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Genesis Boost",
		pp: 5,
		priority: 2,
		flags: {snatch: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Genesis Boost only works on your first turn out.");
				return false;
			}
		},
		boosts: {
			atk: 2,
			def: 2,
		},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Fairy",
		contestType: "Cool",
	},
	combatorders: {
		isNonstandard: "Future",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Combat Orders",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'combatorders',
		condition: {
			duration: 4,
			onBoost(boost, target, source, effect) {
				if (effect.id === 'combatorders') return;
				const anyPositiveBoost = Object.values(boost).some((boost) => boost > 0);
				if (!anyPositiveBoost) return;

				const stats: BoostID[] = [];
				let stat: BoostID;
				for (stat in target.boosts) {
					if (target.boosts[stat] < 6) {
						stats.push(stat);
					}
				}
				if (stats.length) {
					const randomStat = this.sample(stats);
					const boost: SparseBoostsTable = {};
					boost[randomStat] = 1;
					this.boost(boost);
				}
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideStart(side, source) {
				this.add('-sidestart', side, 'Combat Orders');
			},
			onSideEnd(side) {
				this.add('-sideend', side, 'Combat Orders');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	haste: {
		isNonstandard: "Future",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Haste",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'haste',
		condition: {
			duration: 4,
			onFractionalPriorityPriority: -1,
			onFractionalPriority(priority, pokemon, target, move) {
				if (move.category === 'Status') return;
				return 0.1;
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideStart(side, source) {
				this.add('-sidestart', side, 'Haste');
			},
			onSideEnd(side) {
				this.add('-sideend', side, 'Haste');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Dark",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	sharpeyes: {
		isNonstandard: "Future",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sharp Eyes",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'sharpeyes',
		condition: {
			duration: 4,
			onModifyDamage(damage, source, target, move) {
				if (target.getMoveHitData(move).crit) {
					this.debug('Sharp Eyes boost');
					return this.chainModify(1.5);
				}
			},
			onModifyCritRatio(critRatio) {
				return critRatio + 1;
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideStart(side, source) {
				this.add('-sidestart', side, 'Sharp Eyes');
			},
			onSideEnd(side) {
				this.add('-sideend', side, 'Sharp Eyes');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	shieldslam: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Shield Slam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (pokemon.boosts.def > 0) {
				this.boost({def: -1}, pokemon, pokemon, move);
			}
		},
		basePowerCallback(pokemon, target, move) {
			const boost = Math.max(pokemon.boosts.def || 0, 0);
			return move.basePower + boost * 20;
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	doubletap: {
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Double Tap",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onDamage(damage, target, source, effect) {
			if ((damage * 2) >= target.hp) {
				return damage * 2;
			}
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	prismspray: {
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Prism Spray",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move) {
			const types = this.dex.types.all().map((type) => type.name);
			const newType = this.sample(types);
			move.type = newType;
		},
		secondary: null,
		target: "normal",
		type: "???",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	internetargument: {
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Internet Argument",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		volatileStatus: 'confusion',
		boosts: {
			atk: 2,
			spa: 2,
		},
		self: {
			boosts: {
				atk: 2,
				spa: 2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	doubledose: {
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Double Dose",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		basePowerCallback(pokemon, target, move) {
			if (target && target.status === 'tox') {
				move.willCrit = true;
			}

			return move.basePower;
		},
		secondary: {
			chance: 100,
			status: 'tox',
		},
		target: "normal",
		type: "Poison",
		maxMove: {basePower: 80},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	vanish: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Vanish",
		pp: 5,
		priority: 4,
		flags: {},
		stallingMove: true,
		volatileStatus: 'protect',
		onPrepareHit(pokemon) {
			return !!this.queue.willAct() && this.runEvent('StallMove', pokemon);
		},
		onHit(pokemon) {
			pokemon.addVolatile('stall');
		},
		boosts: {
			evasion: 1,
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		zMove: {boost: {evasion: 1}},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	mri: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "MRI",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target, source) {
			if (target && target.hasType('Steel')) {
				target.faint(source, this.effect);
			}
			if ((source.types.length === 1) && (source.types[0] === 'Steel')) {
				source.faint(source, this.effect);
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {effect: 'healreplacement'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	toiletpaper: {
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Toilet Paper",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target, source) {
			if (target && ['bungaloon', 'cacademon'].includes(target.species.id)) {
				target.faint(source, this.effect);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		zMove: {effect: 'healreplacement'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	drunkenfist: {
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Drunken Fist",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.volatiles && pokemon.volatiles['confusion']) {
				return this.chainModify(2);
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'confusion',
			self: {
				volatileStatus: 'confusion',
			},
		},
		target: "normal",
		type: "Fighting",
		contestType: "Cute",
		isNonstandard: "Future",
	},
	snowgrave: {
		accuracy: 100,
		basePower: 300,
		category: "Special",
		name: "Snowgrave",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		noPPBoosts: true,
		secondary: {
			chance: 100,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	bigbang: {
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Big Bang",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Psychic",
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	retart: {
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			let power = Math.floor(25 * target.getStat('spa') / pokemon.getStat('spa')) + 1;
			if (!isFinite(power)) power = 1;
			if (power > 150) power = 150;
			this.debug('BP: ' + power);
			return power;
		},
		category: "Special",
		name: "Retart",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		zMove: {basePower: 160},
		maxMove: {basePower: 130},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	lowestkick: {
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const multiplier = Math.max(1, Math.floor(Math.log2(targetWeight / 100)));
			const bp = multiplier * 30;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Lowest Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 160},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	spikesagain: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spikes (Again)",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'spikesagain',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'Spikes (Again)');
				this.effectState.layers = 1;
			},
			onSideRestart(side) {
				if (this.effectState.layers >= 3) return false;
				this.add('-sidestart', side, 'Spikes (Again)');
				this.effectState.layers++;
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded() || pokemon.hasItem('heavydutyboots')) return;
				const damageAmounts = [0, 3, 4, 6]; // 1/8, 1/6, 1/4
				this.damage(damageAmounts[this.effectState.layers] * pokemon.maxhp / 24);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Ground",
		zMove: {boost: {def: 1}},
		contestType: "Clever",
		isNonstandard: "Future",
	},
	repurpose: {
		num: 367,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Repurpose",
		pp: 30,
		priority: 0,
		flags: {},
		onHit(target) {
			const stats: SparseBoostsTable = {};
			let stat: BoostID;
			let totalBoosts = 0;
			for (stat in target.boosts) {
				if (target.boosts[stat] > 0) {
					stats[stat] = target.boosts[stat];
					totalBoosts += stats[stat] || 0;
				}
			}
			if (totalBoosts >= 2) {
				const firstStat = this.sample(Object.keys(stats)) as BoostID;
				stats[firstStat] = (stats[firstStat] || 1) - 1;
				if ((stats[firstStat] || 0) <= 0) delete stats[firstStat];

				const secondStat = this.sample(Object.keys(stats)) as BoostID;
				stats[secondStat] = (stats[secondStat] || 1) - 1;
				if ((stats[secondStat] || 0) <= 0) delete stats[secondStat];

				let unmaxedStats: BoostID[] = [];
				for (stat in stats) {
					if (target.boosts[stat] < 6) {
						unmaxedStats.push(stat);
					}
				}

				if (firstStat === secondStat) {
					this.boost({
						[firstStat]: -2,
						[this.sample(unmaxedStats)]: 3,
					});
				} else {
					this.boost({
						[firstStat]: -1,
						[secondStat]: -1,
						[this.sample(unmaxedStats)]: 3,
					});
				}
			} else {
				return false;
			}
		},
		secondary: null,
		target: "self",
		type: "Steel",
		zMove: {effect: 'crit2'},
		contestType: "Tough",
		isNonstandard: "Future",
	},
	dragoonslash: {
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Dragoon Slash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, slicing: 1},
		onHit(target, source) {
			if (target && target.hasType('Dark')) {
				target.faint(source, this.effect);
			}
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMove: {effect: 'healreplacement'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	liposuction: {
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Liposuction",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			if (target && target.species.baseStats.hp > 100) {
				return move.basePower * 2; 
			}

			return move.basePower;
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		zMove: {effect: 'healreplacement'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	revelation: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Future",
		name: "Revelation",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 1,
			spa: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Beautiful",
	},
	suddendeath: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sudden Death",
		pp: 5,
		priority: 0,
		flags: {bypasssub: 1},
		onHitField(target, source) {
			for (const pokemon of this.getAllActive()) {
				if (pokemon.fainted) continue;
				pokemon.sethp(1);
				this.add('-sethp', pokemon, pokemon.getHealth, '[from] move: Sudden Death', '[silent]');
			}
		},
		secondary: null,
		target: "all",
		type: "Dark",
		zMove: {effect: 'heal'},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	renovate: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Renovate",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		slotCondition: 'Renovate',
		condition: {
			duration: 2,
			onResidualOrder: 4,
			onEnd(target) {
				this.field.addPseudoWeather('trickroom');
			},
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		zMove: {boost: {spd: 1}},
		contestType: "Cute",
		isNonstandard: "Future",
	},
	stickywebshot: {
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Sticky Web Shot",
		pp: 35,
		priority: 0,
		onHit(target) {
			if (!target) return;
			target.side.addSideCondition('stickyweb');
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Tough",
		isNonstandard: "Future",
	},
	frostyterrain: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Frosty Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1},
		terrain: 'frostyterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				const weakenedMoves = ['earthquake', 'bulldoze', 'magnitude'];
				if (weakenedMoves.includes(move.id) && defender.isGrounded() && !defender.isSemiInvulnerable()) {
					this.debug('move weakened by frosty terrain');
					return this.chainModify(0.5);
				}
				if (move.type === 'Ice' && attacker.isGrounded()) {
					this.debug('frosty terrain boost');
					return this.chainModify([5325, 4096]);
				}
			},
			onSetStatus(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'brn') return false;
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Frosty Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Frosty Terrain');
				}
			},
			onBoost(boost, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (effect.effectType === 'Move' && effect.infiltrates && !target.isAlly(source)) return;
				if (source && target !== source) {
					let showMsg = false;
					let i: BoostID;
					for (i in boost) {
						if (boost[i]! < 0) {
							delete boost[i];
							showMsg = true;
						}
					}
					if (showMsg && !(effect as ActiveMove).secondaries) {
						this.add('-activate', target, 'move: Frosty Terrain');
					}
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Frosty Terrain');
			},
		},
		secondary: null,
		target: "all",
		type: "Ice",
		zMove: {boost: {def: 1}},
		contestType: "Beautiful",
		isNonstandard: "Future",
	},
	banana: {
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Banana",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target, source) {
			const numberEffects = 35;
			const effect: number = this.random(numberEffects);
			switch (effect) {
				case 0:
					target.setStatus('psn', source, this.effect);
					break;
				case 1:
					target.setStatus('brn', source, this.effect);
					break;
				case 2:
					target.setStatus('frz', source, this.effect);
					break;
				case 3:
					target.setStatus('par', source, this.effect);
					break;
				case 4:
					target.addVolatile('confusion', source, this.effect);
					break;
				case 5:
					source.setStatus('psn', source, this.effect);
					break;
				case 6:
					source.setStatus('brn', source, this.effect);
					break;
				case 7:
					source.setStatus('frz', source, this.effect);
					break;
				case 8:
					source.setStatus('par', source, this.effect);
					break;
				case 9:
					source.addVolatile('confusion', source, this.effect);
					break;
				case 10:
					source.faint(source, this.effect);
					break;
				case 11:
					target.faint(source, this.effect);
					break;
				case 12:
					var randomStat: StatIDExceptHP = this.sample(['atk', 'def', 'spa', 'spd', 'spe']);
					this.boost({ [randomStat]: 6 }, target, source, this.effect);
					return;
				case 13:
					var randomStat: StatIDExceptHP = this.sample(['atk', 'def', 'spa', 'spd', 'spe']);
					this.boost({ [randomStat]: 6 }, source, source, this.effect);
					return;
				case 14:
					this.boost({
						atk: 1,
						def: 1,
						spa: 1,
						spd: 1,
						spe: 1,
					}, source, source);
					break;
				case 15:
					this.boost({
						atk: 1,
						def: 1,
						spa: 1,
						spd: 1,
						spe: 1,
					}, target, source, this.effect);
					break;
				case 17:
					source.addVolatile('taunt', source, this.effect);
					break;
				case 18:
					const terrain = this.sample(['grassyterrain', 'electricterrain', 'mistyterrain', 'psychicterrain']);
					this.field.setTerrain(terrain, source, this.effect);
					break;
				case 19:
					const weather = this.sample(['sunnyday', 'raindance', 'sandstorm', 'hail']);
					this.field.setWeather(weather, source, this.effect);
					break;
				case 20:
					this.actions.useMove('poisongas', source, target, this.effect);
					break;
				case 21:
					this.actions.useMove('fling', source, target, this.effect);
					break;
				case 22:
					this.heal(target.baseMaxhp, source, source, this.effect);
					break;
				case 23:
					this.heal(target.baseMaxhp, target, source, this.effect);
					break;
				case 24:
					const ohkoMove = this.sample(['fissure', 'guillotine', 'horndrill', 'sheercold']);
					this.actions.useMove(ohkoMove, source, target);
					break;
				case 25:
					this.actions.useMove('metronome', source, source, this.effect);
					break;
				case 26:
					source.addVolatile('torment', source, this.effect);
					break;
				case 27:
					target.addVolatile('torment', source, this.effect);
					break;
				case 28:
					this.win(target.side);
					break;
				case 29:
					this.win(source.side);
					break;
				case 30:
					const item = target.takeItem();
					if (item) {
						this.add('-enditem', target, item.name, '[from] move: Banana', '[of] ' + source);
					}
					break;
				case 31:
					target.switchFlag = true;
					// TODO: Message
					break;
				case 32:
					source.switchFlag = true;
					// TODO: Message
					break;
				case 33:
					source.transformInto(target);
					break;
				case 34:
					this.actions.useMove('banana', source, target, this.effect);
					break;
			}
			// You can levitate
			// Your opponent can levitate
			// You can use Any of the Dance moves.
			// You can give any of the 18 types+Nuclear, Plastic and glass on your opponent or yourself.
			// You can revive an ally
			// You can swap hazards with the opponent.
			// You can use any sleeping move
			// You can use any self KO move
			// Potential to set up the Banana Peel hazard which makes the opponent get confused, have their speed lowered by 1 then remove the peel
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	maplewarrior: {
		isNonstandard: "Future",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Maple Warrior",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'maplewarrior',
		condition: {
			duration: 4,
			onModifyAtk() {
				return this.chainModify(1.2);
			},
			onModifyDef() {
				return this.chainModify(1.2);
			},
			onModifySpA() {
				return this.chainModify(1.2);
			},
			onModifySpD() {
				return this.chainModify(1.2);
			},
			onModifySpe() {
				return this.chainModify(1.2);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideStart(side, source) {
				this.add('-sidestart', side, 'Maple Warrior');
			},
			onSideEnd(side) {
				this.add('-sideend', side, 'Maple Warrior');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Grass",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	runeofluck: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		isNonstandard: "Past",
		name: "Rune of Luck",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'runeofluck',
		condition: {
			onSideStart(side) {
				this.effectState.charges = 3;
				this.add('-sidestart', side, 'runeofluck' + this.effectState.charges);
			},
			onCriticalHit(target, type, move) {
				if (!target) return;
				this.effectState.charges--;
				if (this.effectState.charges <= 0) {
					target.side.removeSideCondition('runeofluck');
				} else {
					this.add('-sidestart', target.side, 'runeofluck' + this.effectState.charges);
				}
				return false;
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 6,
			onSideEnd(side) {
				this.add('-sideend', side, 'runeofluck' + this.effectState.charges);
			},
		},
		secondary: null,
		target: "allySide",
		type: "Normal",
		zMove: {boost: {evasion: 1}},
		contestType: "Cute",
	},
	psychocrush: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Psycho Crush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideOffensiveStat: 'spd',
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	pacebreaker: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Pacebreaker",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		overrideOffensiveStat: 'spe',
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	speedforce: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Speed Force",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideOffensiveStat: 'spe',
		overrideDefensiveStat: 'spe',
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	tooslow: {
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Too Slow",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideDefensiveStat: 'spe',
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	honorablekick: {
		accuracy: 90,
		basePower: 200,
		category: "Physical",
		name: "Honorable Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.lose(source.side);
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	investment: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Investment",
		isNonstandard: "Future",
		pp: 10,
		priority: 0,
		flags: {},
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] !== 0) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const boostsToPass = { ...target.boosts };
				if (!target.side.addSlotCondition(target, 'investment')) return false;
				target.clearBoosts();
				Object.assign(target.side.slotConditions[target.position]['investment'], {
					duration: 3,
					boosts: boostsToPass,
				});
			} else {
				return false;
			}
		},
		condition: {
			duration: 3,
			onEnd(target) {
				if (!target) return;
				const boosts = this.effectState.boosts;
				if (!boosts) return;
				this.boost(boosts, target);
			},
		},
		secondary: null,
		target: "self",
		type: "Dark",
		contestType: "Clever",
	},
	illusionofchoice: {
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Illusion of Choice",
		isNonstandard: "Future",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		sideCondition: 'illusionofchoice',
		condition: {
			duration: 5,
			onStart(pokemon) {
				this.effectState[pokemon.fullname].choiceLock = "";
			},
			onBeforeMove(pokemon, target, move) {
				if (move.isZOrMaxPowered || move.id === 'struggle') return;
				const choiceLock = this.effectState[pokemon.fullname].choiceLock;
				if (choiceLock && choiceLock !== move.id) {
					// Fails unless ability is being ignored (these events will not run), no PP lost.
					this.addMove('move', pokemon, move.name);
					this.attrLastMove('[still]');
					this.debug("Disabled by Illusion of Choice");
					this.add('-fail', pokemon);
					return false;
				}
			},
			onModifyMove(move, pokemon) {
				if (this.effectState[pokemon.fullname].choiceLock || move.isZOrMaxPowered || move.id === 'struggle') return;
				this.effectState[pokemon.fullname].choiceLock = move.id;
			},
			onModifyAtkPriority: 1,
			onModifyAtk(atk, pokemon) {
				if (pokemon.volatiles['dynamax']) return;
				// PLACEHOLDER
				this.debug('Illusion of Choice Atk Boost');
				return this.chainModify(1.5);
			},
			onModifySpAPriority: 1,
			onModifySpA(atk, pokemon) {
				if (pokemon.volatiles['dynamax']) return;
				// PLACEHOLDER
				this.debug('Illusion of Choice SpA Boost');
				return this.chainModify(1.5);
			},
			onDisableMove(pokemon) {
				const choiceLock = this.effectState[pokemon.fullname].choiceLock;
				if (!choiceLock) return;
				if (pokemon.volatiles['dynamax']) return;
				for (const moveSlot of pokemon.moveSlots) {
					if (moveSlot.id !== choiceLock) {
						pokemon.disableMove(moveSlot.id, false, this.effectState.sourceEffect);
					}
				}
			},
			onEnd(pokemon) {
				this.effectState[pokemon.fullname].choiceLock = "";
			},
			onSideStart(side, source) {
				this.add('-sidestart', side, 'Illusion of Choice');
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 3,
			onSideEnd(side) {
				this.add('-sideend', side, 'Illusion of Choice');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		zMove: {boost: {spe: 1}},
		contestType: "Beautiful",
	},
	starforce: {
		name: "Star Force",
		category: "Status",
		basePower: 0,
		accuracy: 100,
		pp: 10,
		type: "Normal",
		target: "self",
		priority: 0,
		flags: {},
		onHit(target, source, move) {
			const starforce = target.volatiles['starforce']?.starforce || 0;
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}

			if (this.randomChance(Math.max(1, Math.min(9 - starforce, 8)), 8)) {
				for (let i = 0; i < starforce + 2; i++) {
					const randomStat = this.sampleNoReplace(stats);
					const boost: SparseBoostsTable = {};

					if (randomStat) {
						boost[randomStat] = 1;
						this.boost(boost);
					} else {
						break;
					}
				}

				if (!target.volatiles['starforce'] || move.hit === 1) {
					target.addVolatile('starforce');
				}
			} else {
				if (target.hasItem('mesosack') && target.takeItem()) {
					this.add('-activate', target, 'item: Meso Sack');
				} else {
					target.faint();
				}
			}
		},
		condition: {
			onStart(pokemon) {
				this.effectState.starforce = 1;
				this.add('-start', pokemon, `Star Force: ${this.effectState.starforce}*`);
			},
			onRestart(pokemon) {
				this.add('-end', pokemon, `Star Force: ${this.effectState.starforce}*`, '[silent]');
				this.effectState.starforce++;
				this.add('-start', pokemon, `Star Force: ${this.effectState.starforce}*`);
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, `Star Force: ${this.effectState.starforce}*`, '[silent]');
			},
		},
		noSketch: true,
		isNonstandard: "Future",
	},
	bombrock: {
		name: "Bomb Rock",
		isNonstandard: "Future",
		accuracy: 100,
		basePower: 250,
		priority: 0,
		pp: 1,
		noPPBoosts: true,
		type: "Rock",
		category: "Physical",
		flags: {protect: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.effectState.immuneToRecoil = true;
			}

			return move.basePower;
		},
		onModifyMove(move, pokemon) {
			if (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) move.category = 'Special';
		},
		onAfterMove(pokemon, target, move) {
			if (!this.effectState.immuneToRecoil && !move.multihit) {
				const hpBeforeRecoil = pokemon.hp;
				this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get('Bomb Rock'), true);
				if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {
					this.runEvent('EmergencyExit', pokemon, pokemon);
				}
			}
		},
		target: "normal",
	},
	godotshammer: {
		num: 696969420,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Godot's Hammer",
		pp: 5,
		priority: 0,
		target: "normal",
		type: "Ghost",
		recoil: [33, 100],
		flags: {protect: 1, mirror: 1, hammer: 1},
		self: {
			boosts: {
				spe: -2,
			},
		},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('torment');
				target.addVolatile('taunt');
			}
		},
		isNonstandard: "Future",
	},
	tornadocab: {
		num: 173,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Tornado (CAB)",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, wind: 1},
		self: {
			onHit(source) {
				this.field.setWeather('deltastream');
			},
		},
		noSketch: true,
		target: "normal",
		type: "Flying",
		contestType: "Cool",
		isNonstandard: "Future",
	},
	mitosistackle: {
		num: 458,
		accuracy: 80,
		basePower: 60,
		category: "Physical",
		name: "Mitosis Tackle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 140},
		maxMove: {basePower: 120},
		contestType: "Cool",
		isNonstandard: "Future",
	},
	mitosismash: {
		num: 813,
		accuracy: 90,
		basePower: 65,
		basePowerCallback(pokemon, target, move) {
			return 13 * move.hit;
		},
		category: "Physical",
		name: "Mitosis Mash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 3,
		multiaccuracy: true,
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMove: {basePower: 160},
		maxMove: {basePower: 140},
		isNonstandard: "Future",
	},
	hijumpkick: {
		num: 666084,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Hi Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, kick: 1, above: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	smellingsalt: {
		num: 666297,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'par') {
				this.debug('BP doubled on paralyzed target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "SmellingSalt",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (target.status === 'par') target.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	vicegrip: {
		num: 666299,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "ViceGrip",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	gogcelebrate: {
		num: 666563,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "GOGCelebrate",
		pp: 40,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	woodhit: {
		num: 666620,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Wood Hit",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	papertoss: {
		num: 666621,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		name: "Paper Toss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	papergun: {
		num: 666622,
		accuracy: 90,
		basePower: 18,
		category: "Physical",
		name: "Paper Gun",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	fold: {
		num: 666623,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fold",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		volatileStatus: 'fold',
		condition: {
			onStart(pokemon, source, effect) {
				this.add('-start', pokemon, 'Fold');
			},
			onRestart(pokemon, source, effect) {
				this.add('-start', pokemon, 'Fold');
			},
			onBasePowerPriority: 9,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Paper') {
					this.debug('fold boost');
					return this.chainModify(2);
				}
			},
			onMoveAborted(pokemon, target, move) {
				if (move.id !== 'fold') {
					pokemon.removeVolatile('fold');
				}
			},
			onAfterMove(pokemon, target, move) {
				if (move.id !== 'fold') {
					pokemon.removeVolatile('fold');
				}
			},
			onEnd(pokemon) {
				this.add('-end', pokemon, 'Fold', '[silent]');
			},
		},
		boosts: {
			def: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	papercut: {
		num: 666624,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Paper Cut",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	paperball: {
		num: 666625,
		accuracy: 90,
		basePower: 35,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const paperballData = pokemon.volatiles['paperball'];
			if (paperballData?.hitCount) {
				bp *= Math.pow(2, paperballData.contactHitCount);
			}
			if (paperballData && pokemon.status !== 'slp') {
				paperballData.hitCount++;
				paperballData.contactHitCount++;
				if (paperballData.hitCount < 5) {
					paperballData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		name: "Paper Ball",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['paperball'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('paperball');
			// @ts-ignore
			// TS thinks pokemon.volatiles['paperball'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['paperball'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const paperballData = source.volatiles["paperball"];
			if (
				paperballData &&
				paperballData.hitCount === 5 &&
				paperballData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
				paperballData.contactHitCount;
			}
		},

		condition: {
			duration: 1,
			onLockMove: 'paperball',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['paperball'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	lavaspit: {
		num: 666626,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Lava Spit",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	magmaburst: {
		num: 666627,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Magma Burst",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	volcaniceruption: {
		num: 666628,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Volcanic Eruption",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 15,
			status: 'brn',
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	lavabomb: {
		num: 666629,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Lava Bomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, bullet: 1},
		secondaries: [
			{
				chance: 10,
				status: 'brn',
			},
			{
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	kindle: {
		num: 666630,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Kindle",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Fire",
		isNonstandard: "Future",
	},
	megamissile: {
		num: 666631,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		name: "Mega Missile",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({atk: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	micromissiles: {
		num: 666632,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Micro Missiles",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	oilup: {
		num: 666633,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Oil Up",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Greasy",
		isNonstandard: "Future",
	},
	techsavvy: {
		num: 666634,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tech Savvy",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	hydraulickick: {
		num: 666635,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Hydraulic Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	pistonpunch: {
		num: 666636,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Piston Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	dacoball: {
		num: 666637,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "DACO BALL",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	wirelash: {
		num: 666638,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Wire Lash",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondaries: [
			{
				chance: 10,
				status: 'par',
			},
			{
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	energyshield: {
		num: 666639,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Energy Shield",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	steamyspray: {
		num: 666640,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Steamy Spray",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	steamer: {
		num: 666641,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Steamer",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	steamball: {
		num: 666642,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Steam Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	boatbash: {
		num: 666643,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Boat Bash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Water') return 1;
		},
		secondary: null,
		recoil: [33, 100],
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	steamcharge: {
		num: 666644,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Steam-Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 3],
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	frigofear: {
		num: 666645,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Frigo-fear",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			status: 'frz',
		},
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	fearpulse: {
		num: 666646,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Fear Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	purefear: {
		num: 666647,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Pure Fear",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	claustrogrip: {
		num: 666648,
		accuracy: 95,
		basePower: 40,
		category: "Physical",
		name: "Claustrogrip",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	rubberrub: {
		num: 666649,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Rubber Rub",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubbershot: {
		num: 666650,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Rubber Shot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberpowder: {
		num: 666651,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Rubber Powder",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberball: {
		num: 666652,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const rubberballData = pokemon.volatiles['rubberball'];
			if (rubberballData?.hitCount) {
				bp *= Math.pow(2, rubberballData.contactHitCount);
			}
			if (rubberballData && pokemon.status !== 'slp') {
				rubberballData.hitCount++;
				rubberballData.contactHitCount++;
				if (rubberballData.hitCount < 5) {
					rubberballData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		name: "Rubber Ball",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['rubberball'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('rubberball');
			// @ts-ignore
			// TS thinks pokemon.volatiles['rubberball'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['rubberball'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const rubberballData = source.volatiles["rubberball"];
			if (
				rubberballData &&
				rubberballData.hitCount === 5 &&
				rubberballData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
				rubberballData.contactHitCount;
			}
		},

		condition: {
			duration: 1,
			onLockMove: 'rubberball',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rubberball'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberray: {
		num: 666653,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Rubber Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	tirecrash: {
		num: 666654,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Tire Crash",
		pp: 20,
		priority: 1,
		flags: {protect: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	latexlash: {
		num: 666655,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Latex Lash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 15,
			status: 'par',
		},
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	cyclonepunch: {
		num: 666656,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Cyclone Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	stingpunch: {
		num: 666657,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Sting Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	swarmattack: {
		num: 666658,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Swarm Attack",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	celestialray: {
		num: 666659,
		accuracy: 90,
		basePower: 1,
		damageCallback(pokemon) {
			return (this.random(50, 151) * pokemon.level) / 100;
		},
		category: "Special",
		name: "Celestial Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	solarcrash: {
		num: 666660,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "SolarCrash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (['sunnyday', 'desolateland'].includes(attacker.effectiveWeather())) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			if (pokemon.effectiveWeather()
			&& !['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	cometcrash: {
		num: 666661,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Comet Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, above: 1},
		secondary: {
			chance: 25,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	sunsflames: {
		num: 666662,
		accuracy: 85,
		basePower: 110,
		category: "Physical",
		name: "Sun's Flames",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, sun: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	lunarwave: {
		num: 666663,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Lunar Wave",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, moon: 1},
		secondary: {
			chance: 26,
			status: 'slp',
		},
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	sprinkle: {
		num: 666664,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Sprinkle",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	cookiecutter: {
		num: 666665,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Cookie Cutter",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cookieslam: {
		num: 666666,
		accuracy: 85,
		basePower: 130,
		category: "Physical",
		name: "Cookie Slam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cakewalk: {
		num: 666667,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cake Walk",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 2;
				this.boost(boost);
			} else {
				return false;
			}
		},
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	icecreambeam: {
		num: 666668,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Icecream Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'frz',
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	necromancy: {
		num: 666669,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target, move) {
			const currentSpecies = move.allies!.shift()!.species;
			const bp = 5 + Math.floor(currentSpecies.baseStats.spa / 10);
			this.debug('BP for ' + currentSpecies.name + ' hit: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Necromancy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon) {
			move.allies = pokemon.side.pokemon.filter(ally => ally === pokemon || !ally.fainted && !ally.status);
			move.multihit = move.allies.length;
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	zombiehorde: {
		num: 666670,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Zombie Horde",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiebite: {
		num: 666671,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Zombie Bite",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Zombie');
		},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	rottedclaw: {
		num: 666672,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Rotted Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'tox',
		},
		critRatio: 2,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiebile: {
		num: 666673,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Zombie Bile",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiepounce: {
		num: 666674,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Zombie Pounce",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bounce: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	nuclearexplosion: {
		num: 666675,
		accuracy: 100,
		basePower: 255,
		category: "Special",
		name: "NuclearExplosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	malaria: {
		num: 666676,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Malaria",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	sneeze: {
		num: 666677,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Sneeze",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Virus",
		isNonstandard: "Future",
	},
	soporous: {
		num: 666678,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Soporous",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'slp',
		},
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	ebola: {
		num: 666679,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Ebola",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Virus",
		isNonstandard: "Future",
	},
	rottedwings: {
		num: 666680,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Rotted Wings",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	shamble: {
		num: 666681,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shamble",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 2,
			def: 1,
			spe: -1,
		},
		secondary: null,
		target: "self",
		type: "Zombie",
		isNonstandard: "Future",
	},
	macabredance: {
		num: 666682,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Macabre Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			atk: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	ring: {
		num: 666683,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Ring",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		boosts: {
			accuracy: -1,
		},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	tidalpunch: {
		num: 666684,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Tidal Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	bottletoss: {
		num: 666685,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Bottle Toss",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticdefense: {
		num: 666686,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Plastic Defense",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spd: 2,
		},
		secondary: null,
		target: "self",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticjab: {
		num: 666687,
		accuracy: true,
		basePower: 65,
		category: "Physical",
		name: "Plastic Jab",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	bottleblast: {
		num: 666688,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Bottle Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	bottleslam: {
		num: 666689,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Bottle Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 3],
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticbeam: {
		num: 666690,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Plastic Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	stargaze: {
		num: 666691,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Star Gaze",
		pp: 5,
		priority: 0,
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.getPseudoWeather('starfield')) {
				factor = 0.667;
				this.boost({
					accuracy: 1,
				});
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	virus: {
		num: 666692,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target, source) {
			const result = this.random(4);
			if (result === 0) {
				target.trySetStatus('brn', source);
			} else if (result === 1) {
				target.trySetStatus('frz', source);
			} else if (result === 2) {
				target.trySetStatus('par', source);
			} else {
				target.trySetStatus('psn', source);
			}
		},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	comet: {
		num: 666693,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Comet",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'brn',
		},
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	galacticforce: {
		num: 666694,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Galactic Force",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, above: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	asteroidbelt: {
		num: 666695,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Asteroid Belt",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	meteorshower: {
		num: 666696,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Meteor Shower",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	techerror: {
		num: 666697,
		accuracy: 100,
		basePower: 15,
		category: "Special",
		name: "Tech.Error",
		pp: 10,
		priority: 1,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 55,
			volatileStatus: 'disable',
		},
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	shatterbody: {
		num: 666698,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shatter Body",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: -1,
			spd: -1,
			atk: 2,
			spa: 2,
			spe: 2,
		},
		secondary: null,
		target: "self",
		type: "Glass",
		isNonstandard: "Future",
	},
	glassscrape: {
		num: 666699,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Glass Scrape",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		volatileStatus: 'confusion',
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	glassblade: {
		num: 666700,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Glass Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	shattercharge: {
		num: 666701,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Shatter Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	sawdust: {
		num: 666702,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Sawdust",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (this.field.getPseudoWeather('arboreum')) {
				this.boost({
					accuracy: -3,
				});
			} else {
				this.boost({
					accuracy: -1,
				});
			}
		},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	capsize: {
		num: 666703,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Capsize",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	murmur: {
		num: 666704,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Murmur",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		onHit(target, source) {
			const result = this.random(4);
			if (result === 0) {
				target.trySetStatus('brn', source);
			} else if (result === 1) {
				target.trySetStatus('frz', source);
			} else if (result === 2) {
				target.trySetStatus('par', source);
			} else {
				target.trySetStatus('psn', source);
			}
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	phantomtendril: {
		num: 666705,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		name: "Phantom Tendril",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	pulpblast: {
		num: 666706,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Pulp Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	binaryflux: {
		num: 666707,
		accuracy: 100,
		basePower: 45,
		category: "Special",
		name: "Binary Flux",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 45,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	configure: {
		num: 666708,
		accuracy: 85,
		basePower: 65,
		category: "Special",
		name: "Configure",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	encrypt: {
		num: 666709,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Encrypt",
		pp: 10,
		priority: 4,
		flags: {},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	memorywipe: {
		num: 666710,
		accuracy: true,
		basePower: 70,
		category: "Special",
		name: "Memory Wipe",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			target.clearBoosts();
			this.add('-clearboost', target);
		},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	gumbubble: {
		num: 666711,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Gum Bubble",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	mintburst: {
		num: 666712,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Mint Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			volatileStatus: 'frz',
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	foodray: {
		num: 666713,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Food Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	spicyburst: {
		num: 666714,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Spicy Burst",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 40,
			volatileStatus: 'brn',
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	frurfburst: {
		num: 666715,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "FruRF Burst",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		drain: [1, 2],
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	cakeslice: {
		num: 666717,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Cake Slice",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	fairyclaw: {
		num: 666718,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Fairy Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	mahoganyslam: {
		num: 666719,
		accuracy: 85,
		basePower: 110,
		category: "Physical",
		name: "Mahogany Slam",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	essencedrain: {
		num: 666720,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Essence Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [3, 4],
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	fabricblast: {
		num: 666721,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Fabric Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	carpetrub: {
		num: 666722,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Carpet Rub",
		secondary: {
			chance: 25,
			status: 'par',
			onHit(target) {
				if (this.field.getPseudoWeather('fabricworld')) {
					this.boost({
						def: -2,
						
					});
					
				} else {
						
					};
				}
			},
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	carpetburn: {
		num: 666723,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Carpet Burn",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'brn',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	breeze: {
		num: 666724,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Breeze",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	gale: {
		num: 666725,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Gale",
		pp: 20,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	tornadocrash: {
		num: 666726,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "TORNADOCRASH",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	cyclone: {
		num: 666727,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Cyclone",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	glitch: {
		num: 666728,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Glitch",
		pp: 20,
		priority: 0,
		flags: {},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	quickspell: {
		num: 666729,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Quick Spell",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	magicarrows: {
		num: 666730,
		accuracy: 90,
		basePower: 15,
		category: "Special",
		name: "Magic Arrows",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, arrow: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	airpressure: {
		num: 666731,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Air Pressure",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		sideCondition: 'airpressure',
		condition: {
			duration: 5,
			onSideStart(side, source) {
				this.add('-sidestart', side, 'move: Air Pressure');
			},
			onModifySpe(spe, pokemon) {
				return this.chainModify(0.5);
			},
			onSideResidualOrder: 26,
			onSideResidualSubOrder: 5,
			onSideEnd(side) {
				this.add('-sideend', side, 'move: Air Pressure');
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Wind",
		isNonstandard: "Future",
	},
	sonicwind: {
		num: 666732,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Sonic Wind",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	arcaneenergy: {
		num: 666733,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Arcane Energy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	arcanebolt: {
		num: 666734,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Arcane Bolt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	laser: {
		num: 666735,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Laser",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	sandjet: {
		num: 666736,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Sand Jet",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	sandcannon: {
		num: 666737,
		accuracy: 55,
		basePower: 110,
		category: "Physical",
		name: "Sand Cannon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	squeak: {
		num: 666738,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Squeak",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	bassdrop: {
		num: 666739,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Bass Drop",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 25,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	sonicpulse: {
		num: 666740,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Sonic Pulse",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, pulse: 1},
		secondary: {
			chance: 45,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	atomsplit: {
		num: 666741,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Atom Split",
		pp: 10,
		priority: 0,
		flags: {},
		isFutureMove: true,
		onTry(source, target) {
			if (!target.side.addSlotCondition(target, 'futuremove')) return false;
			Object.assign(target.side.slotConditions[target.position]['futuremove'], {
				duration: 3,
				move: 'atomsplit',
				source: source,
				moveData: {
					id: 'atomsplit',
					name: "Atom Split",
					accuracy: 100,
					basePower: 100,
					category: "Special",
					priority: 0,
					flags: {},
					ignoreImmunity: false,
					effectType: 'Move',
					isFutureMove: true,
					type: 'Nuclear',
				},
			});
			this.add('-start', source, 'move: Atom Split');
			return this.NOT_FAIL;
		},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	gammaray: {
		num: 666742,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Gamma Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	hexclaw: {
		num: 666743,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Hex Claw",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'disable',
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	sonicwave: {
		num: 666744,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Sonic Wave",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	deathscream: {
		num: 666745,
		accuracy: 30,
		basePower: 0,
		category: "Special",
		name: "Death Scream",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	terrorscreech: {
		num: 666746,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Terror Screech",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	insanitybolt: {
		num: 666747,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Insanity Bolt",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	wastespray: {
		num: 666748,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Waste Spray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	atomicrush: {
		num: 666749,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Atomic Rush",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1,4],
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	corrode: {
		num: 666750,
		accuracy: 85,
		basePower: 85,
		category: "Special",
		name: "Corrode",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		boosts: {
			spd: -2,
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	wastecloud: {
		num: 666751,
		accuracy: 100,
		basePower: 45,
		category: "Special",
		name: "Waste Cloud",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Waste Cloud', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	megabyte: {
		num: 666752,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Mega Byte",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	spicypowder: {
		num: 666753,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Spicy Powder",
		pp: 15,
		priority: 0,
		flags: {powder: 1, protect: 1, reflectable: 1, mirror: 1, defrost: 1},
		status: 'brn',
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	meatmash: {
		num: 666754,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Meat Mash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 25,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	hotpocketcrash: {
		num: 666755,
		accuracy: 100,
		basePower: 125,
		category: "Physical",
		name: "Hot Pocket Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		recoil: [1,3],
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	lavasplash: {
		num: 666756,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Lava Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Magma",
		isNonstandard: "Future",
	},
	volcanopunch: {
		num: 666757,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Volcano Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, defrost: 1},
		secondary: {
			chance: 15,
			status: 'brn',
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	woodendefense: {
		num: 666758,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wooden Defense",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			def: 2,
		},
		onHit(target) {
			if (this.field.getPseudoWeather('arboreum')) {
				this.boost({
					def: 3,
				});
			} else {
				this.boost({
					def: 2,
				});
			}
		},
		target: "self",
		type: "Wood",
		isNonstandard: "Future",
	},
	spellslash: {
		num: 666759,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Spell Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	chaosrift: {
		num: 666760,
		accuracy: 70,
		basePower: 70,
		category: "Special",
		name: "Chaos Rift",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 33,
			volatileStatus: 'confusion',	
		},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	etherealclaws: {
		num: 666761,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Ethereal Claws",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	riftstrike: {
		num: 666762,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Rift Strike",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	demonicclaws: {
		num: 666763,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Demonic Claws",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	serqetssting: {
		num: 666764,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Serqet's Sting",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	realityrift: {
		num: 666765,
		accuracy: 85,
		basePower: 25,
		category: "Special",
		name: "Reality Rift",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	nuswave: {
		num: 666766,
		accuracy: 90,
		basePower: 45,
		category: "Special",
		name: "Nu's Wave",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	setsshadows: {
		num: 666767,
		accuracy: 60,
		basePower: 100,
		category: "Special",
		name: "Set's Shadows",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			volatileStatus: 'confusion',	
		},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	thothswisdom: {
		num: 666768,
		accuracy: 95,
		basePower: 25,
		category: "Special",
		name: "Thoth's Wisdom",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		boosts: {
			spa: 1,
			spd: 1,
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	isismagic: {
		num: 666769,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Isis' Magic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 80,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	osirisflail: {
		num: 666770,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Osiris' Flail",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	balance: {
		num: 666771,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Balance",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHitField() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	swordsedge: {
		num: 666772,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Sword's Edge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	woodsword: {
		num: 666773,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Wood Sword",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	chainsawrun: {
		num: 666774,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Chainsaw Run",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	haunt: {
		num: 666775,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Haunt",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	paintsplatter: {	// TODO: Decrease two stage on Art Gallery
		num: 666776,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		name: "Paint Splatter",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						accuracy: -2,
					});
				} else {
					this.boost({
						accuracy: -1,
					});
				}
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	irontusks: {
		num: 666777,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Iron Tusks",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1,3],
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	tsunami: {
		num: 666778,
		accuracy: 85,
		basePower: 85,
		category: "Special",
		name: "Tsunami",
		pp: 5,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		isNonstandard: "Future",
	},
	galecharge: {
		num: 666779,
		accuracy: 85,
		basePower: 70,
		category: "Physical",
		name: "Gale Charge",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	blackhole: {
		num: 666780,
		accuracy: 90,
		basePower: 85,
		category: "Special",
		name: "Black Hole",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	divinespark: {
		num: 666781,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Divine Spark",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	auroraflash: {
		num: 666782,
		accuracy: 85,
		basePower: 20,
		category: "Special",
		name: "Aurora Flash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			status: 'slp',
		},
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	aegis: {
		num: 666783,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aegis",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		boosts: {
			def: 2,
		},
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	hermescharge: {
		num: 666784,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Hermes Charge",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	etherealray: {
		num: 666785,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Ethereal Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	zeusthunder: {
		num: 666786,
		accuracy: 85,
		basePower: 30,
		category: "Special",
		name: "Zeus Thunder",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2,5],
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	shadowgaze: {
		num: 666787,
		accuracy: 40,
		basePower: 1,
		category: "Special",
		name: "Shadow Gaze",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	beam: {
		num: 666788,
		accuracy: 100,
		basePower: 45,
		category: "Special",
		name: "Beam",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	brilliantray: {
		num: 666789,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Brilliant Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 25,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	luxbuster: {
		num: 666790,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Lux Buster",
		pp: 5,
		priority: 0,
		flags: {recharge: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	prismray: {
		num: 666791,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Prism Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 25,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	waveshot: {
		num: 666792,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Wave Shot",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	fester: {
		num: 666793,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Fester",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	hydrobombard: {
		num: 666794,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Hydro Bombard",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		multihit: [2,5],
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	divebomb: {
		num: 666795,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Divebomb",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	ancientwind: {
		num: 666796,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Ancient Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (target.getAbility().isPermanent) return;
			if (target.newlySwitched || this.queue.willMove(target)) return;
			target.addVolatile('gastroacid');
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Wind",
		isNonstandard: "Future",
	},
	gigaleech: {
		num: 666797,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Giga Leech",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	joust: {
		num: 666798,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Joust",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 65,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	stingerlance: {
		num: 666799,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Stinger Lance",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({atk: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	bask: {
		num: 666800,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bask",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		onHit(pokemon) {
			let factor = 0.5;
			switch (pokemon.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				factor = 0.667;
				break;
			case 'raindance':
			case 'primordialsea':
			case 'sandstorm':
			case 'hail':
			case 'snow':
			case 'acidrain':
			case 'midnight':
			case 'bladerain':
				factor = 0.25;
				break;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		onModifyMove(move, pokemon) {
			if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) move.boosts = {spe: 1};
		},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	maw: {
		num: 666801,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Maw",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	irradiatedfangs: {
		num: 666802,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Irradiated Fangs",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: {
			chance: 30,
			status: 'tox',
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	fever: {
		num: 666803,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Fever",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 26,
			status: 'brn',
		},
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	snas: {
		num: 666804,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "snas",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	bluetruth: {
		num: 666805,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Blue Truth",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	stalagbite: {
		num: 666806,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Stalag-bite",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, bite: 1, above: 1},
		drain: [1,2],
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	mountaincrash: {
		num: 666807,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower * pokemon.hp / pokemon.maxhp;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Physical",
		name: "Mountain Crash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Rock",
		isNonstandard: "Future",
	},
	carbonpulse: {
		num: 666808,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Carbon Pulse",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		critRatio: 2,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	fossilcrash: {
		num: 666809,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Fossil Crash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	enlighten: {
		num: 666810,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Enlighten",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		boosts: {
			spa: 2,
		},
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	edgeray: {
		num: 666811,
		accuracy: 75,
		basePower: 100,
		category: "Special",
		name: "Edge Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			switch (target?.effectiveWeather()) {
			case 'midnight':
				move.accuracy = true;
				break;
			}
		},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	razorlead: {
		num: 666812,
		accuracy: 95,
		basePower: 55,
		category: "Physical",
		name: "Razor Lead",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Steel",
		isNonstandard: "Future",
	},
	lensflash: {
		num: 666813,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Lens Flash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					accuracy: 1,
				},
			},
		},
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	glassesbeam: {
		num: 666815,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Glasses Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 90,
			self: {
				boosts: {
					accuracy: 2,
				},
			},
		},
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	thorshammer: {
		num: 666816,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Thor's Hammer",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	bodyboost: {
		num: 666817,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Body Boost",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		boosts: {
			atk: 1,
			spd: 1,
		},
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
	},
	chaoticspark: {
		num: 666818,
		accuracy: 100,
		basePower: 10,
		category: "Special",
		name: "Chaotic Spark",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	uvray: {
		num: 666819,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "UV Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, sun: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	voidsmaw: {
		num: 666820,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Void's Maw",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	glasscannon: {
		num: 666821,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Glass Cannon",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		recoil: [1,3],
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	flashball: {
		num: 666822,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Flash Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	radiantray: {
		num: 666823,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		name: "Radiant Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (['sunnyday', 'desolateland'].includes(attacker.effectiveWeather())) {
				this.attrLastMove('[still]');
				this.addMove('-anim', attacker, move.name, defender);
				return;
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		onBasePower(basePower, pokemon, target) {
			const weakWeathers = ['raindance', 'primordialsea', 'sandstorm', 'hail', 'snow'];
			if (weakWeathers.includes(pokemon.effectiveWeather())) {
				this.debug('weakened by weather');
				return this.chainModify(0.5);
			}
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	lightning: {
		num: 666824,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Lightning",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	powersurge: {
		num: 666825,
		accuracy: 95,
		basePower: 180,
		category: "Special",
		name: "Power Surge",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	meltdown: {
		num: 666826,
		accuracy: 95,
		basePower: 160,
		category: "Special",
		name: "Meltdown",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'psn',
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	retribution: {
		num: 666827,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		name: "Retribution",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Divine",
		isNonstandard: "Future",
	},
	mysticdance: {
		num: 666828,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mystic Dance",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, dance: 1},
		boosts: {
			spa: 1,
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		isNonstandard: "Future",
	},
	fortuneray: {
		num: 666829,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Fortune Ray",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	insanity: {
		num: 666830,
		accuracy: 75,
		basePower: 85,
		category: "Physical",
		name: "Insanity",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	dataabsorb: {
		num: 666831,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Data Absorb",
		pp: 10,
		priority: 0,
		flags: {bypasssub: 1, allyanim: 1},
		onHit(target, source) {
			let i: BoostID;
			for (i in target.boosts) {
				source.boosts[i] = target.boosts[i];
			}
			const volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];
			for (const volatile of volatilesToCopy) {
				if (target.volatiles[volatile]) {
					source.addVolatile(volatile);
					if (volatile === 'gmaxchistrike') source.volatiles[volatile].layers = target.volatiles[volatile].layers;
				} else {
					source.removeVolatile(volatile);
				}
			}
			this.add('-copyboost', source, target, '[from] move: Data Absorb');
		},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	digitaloverdrive: {
		num: 666832,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Digital Overdrive",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	blazingshock: {
		num: 666833,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Blazing Shock",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 25,
			status: 'brn',
		},
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	shockingblaze: {
		num: 666834,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Shocking Blaze",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},
	viraloverdrive: {
		num: 666835,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Viral Overdrive",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	ransomware: {
		num: 666836,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Ransomware",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Ransomware', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Ransomware', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	sappingwhirlpool: {
		num: 666837,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Sapping Whirlpool",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	datapurge: {
		num: 666838,
		accuracy: true,
		basePower: 90,
		category: "Special",
		name: "Data Purge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHitField() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	leechfang: {
		num: 666839,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Leech Fang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bite: 1},
		drain: [1,2],
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	chokehold: {
		num: 666840,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Choke Hold",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'slp',
		},
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	brightidea: {
		num: 666841,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bright Idea",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 2,
		},
		secondary: null,
		target: "self",
		type: "Light",
		isNonstandard: "Future",
	},
	snowbank: {
		num: 666842,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Snow Bank",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	slipaway: {
		num: 666843,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Slip Away",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	frozenblade: {
		num: 666844,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Frozen Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	brace: {
		num: 666845,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Brace",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: -1,
			spa: -1,
			def: 2,
			spd: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	diamondhoof: {
		num: 666846,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Diamond Hoof",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	periltomb: {
		num: 666848,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Peril Tomb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	giantshadow: {
		num: 666850,
		accuracy: 50,
		basePower: 120,
		category: "Physical",
		name: "Giant Shadow",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	chasebeam: {
		num: 666851,
		accuracy: 100,
		basePower: 40,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		name: "Chase Beam",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	cheapshot: {
		num: 666852,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Cheap Shot",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, west: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	insultandinjury: {
		num: 666853,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Insult and Injury",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	attitudeadjustment: {
		num: 666854,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Attitude Adjustment",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	maliceeater: {
		num: 666855,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Malice Eater",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1,2],
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	cackle: {
		num: 666856,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Cackle",
		pp: 10,
		priority: 3,
		flags: {protect: 1, mirror: 1, sound: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Cackle only works on your first turn out.");
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	blackweb: {
		num: 666857,
		accuracy: 90,
		basePower: 85,
		category: "Special",
		name: "Black Web",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, web: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	mend: {
		num: 666858,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mend",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	brassknuckle: {
		num: 666859,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Brass Knuckle",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	doom: {
		num: 666860,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Doom",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	chillyboom: {
		num: 666861,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Chilly Boom",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Ice",
		isNonstandard: "Future",
	},
	holysacrifice: {
		num: 666862,
		accuracy: 100,
		basePower: 195,
		category: "Special",
		name: "Holy Sacrifice",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	screwdriver: {
		num: 666863,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Screw Driver",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	bunkercrash: {
		num: 666864,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Bunker Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 70,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	coldsnap: {
		num: 666865,
		accuracy: 60,
		basePower: 0,
		category: "Status",
		name: "Cold Snap",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		status: 'frz',
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	fridgeslam: {
		num: 666866,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Fridge Slam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			status: 'frz',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	osmosis: {
		num: 666867,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Osmosis",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1,2],
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	sludgehammer: {
		num: 666868,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Sludge Hammer",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1,3],
		secondary: {
			chance: 15,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	arcticcrash: {
		num: 666870,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Arctic Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1,3],
		secondary: {
			chance: 15,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	podburst: {
		num: 666871,
		accuracy: 100,
		basePower: 150,
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower * pokemon.hp / pokemon.maxhp;
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Pod Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		isNonstandard: "Future",
	},
	aurastorm: {
		num: 666872,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Aura Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	chemicalburn: {
		num: 666873,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Chemical Burn",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	tonguelash: {
		num: 666874,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Tongue Lash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	tongueflick: {
		num: 666875,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Tongue Flick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2,5],
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	unihorn: {
		num: 666876,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Unihorn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	gravitonpress: {
		num: 666877,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			let bp;
			if (targetWeight >= 2000) {
				bp = 120;
			} else if (targetWeight >= 1000) {
				bp = 100;
			} else if (targetWeight >= 500) {
				bp = 80;
			} else if (targetWeight >= 250) {
				bp = 60;
			} else if (targetWeight >= 100) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		category: "Special",
		name: "Graviton Press",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	aurajab: {
		num: 666878,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		overrideDefensiveStat: 'def',
		name: "Aura Jab",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	eeriewail: {
		num: 666879,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Eerie Wail",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		target: "allAdjacent",
		type: "Ghost",
		isNonstandard: "Future",
	},
	drumroll: {
		num: 666880,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Drum Roll",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		multihit: [2,5],
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	goblinpunch: {
		num: 666881,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Goblin Punch",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		onTry(source, target) {
			const action = this.queue.willMove(target);
			const move = action?.choice === 'move' ? action.move : null;
			if (!move || (move.category === 'Status' && move.id !== 'mefirst') || target.volatiles['mustrecharge']) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	raid: {
		num: 666882,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Raid",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Raid', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Raid', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	extinguish: {
		num: 666883,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Extinguish",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			dustproof: true,
			chance: 100,
			volatileStatus: 'extinguish',
		},
		onBasePower(basePower, source, target) {
			if (target.status === 'brn') {
				return this.chainModify(2);
			}
		},
		onAfterMove(source, target, move) {
			for (const pokemon of this.getAllActive()) {
				if (pokemon !== source && pokemon.removeVolatile('extinguish') && pokemon.status === 'brn' && !source.fainted) {
					pokemon.cureStatus();
				}
			}
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	sanddune: {
		num: 666884,
		accuracy: 100,
		basePower: 60,
		basePowerCallback(pokemon, target, move) {
			const damagedByTarget = pokemon.attackedBy.some(
				p => p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('BP doubled for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Physical",
		name: "Sand Dune",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	stringout: {
		num: 666885,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "String-out",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1, web: 1},
		forceSwitch: true,
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	mindboost: {
		num: 666886,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mind Boost",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	cryptblade: {
		num: 666887,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Crypt Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreDefensive: true,
		ignoreEvasion: true,
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	crimsondaze: {
		num: 666888,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Crimson Daze",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	magicflames: {
		num: 666889,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Magic Flames",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	ashrain: {
		num: 666890,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Ash Rain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, above: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	ashspray: {
		num: 666891,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Ash Spray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 80,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	apport: {
		num: 666892,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Apport",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	zephyrwing: {
		num: 666893,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Zephyr Wing",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			self: {
				sideCondition: 'tailwind',
			}
		},
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	broomdive: {
		num: 666894,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Broom Dive",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, above: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability(target, source, move) {
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	cardtoss: {
		num: 666895,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Card Toss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	mysticblade: {
		num: 666896,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Mystic Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	mount: {
		num: 666897,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Mount",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	powerhex: {
		num: 666898,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Power Hex",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	sappingspell: {
		num: 666899,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Sapping Spell",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1,2],
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	sawtrick: {
		num: 666900,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const rolloutData = pokemon.volatiles['rollout'];
			if (rolloutData?.hitCount) {
				bp *= Math.pow(2, rolloutData.contactHitCount);
			}
			if (rolloutData && pokemon.status !== 'slp') {
				rolloutData.hitCount++;
				rolloutData.contactHitCount++;
				if (rolloutData.hitCount < 5) {
					rolloutData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Physical",
		name: "Saw Trick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['rollout'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('rollout');
			// @ts-ignore
			// TS thinks pokemon.volatiles['rollout'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['rollout'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const rolloutData = source.volatiles["rollout"];
			if (
				rolloutData &&
				rolloutData.hitCount === 5 &&
				rolloutData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
					rolloutData.contactHitCount;
			}
		},
		condition: {
			duration: 1,
			onLockMove: 'rollout',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rollout'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	balmscour: {
		num: 666901,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Balm Scour",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			dustproof: true,
			chance: 100,
			volatileStatus: 'balmscour',
		},
		onBasePower(basePower, source, target) {
			if (target.status === 'psn' || target.status === 'tox') {
				return this.chainModify(2);
			}
		},
		onAfterMove(source, target, move) {
			for (const pokemon of this.getAllActive()) {
				if (pokemon !== source && pokemon.removeVolatile('balmscour') && (pokemon.status === 'psn' || pokemon.status === 'tox') && !source.fainted) {
					pokemon.cureStatus();
				}
			}
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	lusterflash: {
		num: 666902,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Luster Flash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 80,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	shinesabre: {
		num: 666903,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Shine Sabre",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryHit(pokemon) {
			// will shatter screens through sub, before you hit
			pokemon.side.removeSideCondition('reflect');
			pokemon.side.removeSideCondition('lightscreen');
			pokemon.side.removeSideCondition('auroraveil');
			pokemon.side.removeSideCondition('mirageveil');
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	hydrogengun: {
		num: 666904,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Hydrogen Gun",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2,5],
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	jetstream: {
		num: 666905,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Jetstream",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	thermal: {
		num: 666906,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Thermal",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	tornado: {
		num: 666907,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Tornado",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Wind",
		isNonstandard: "Future",
	},
	tradewind: {
		num: 666908,
		accuracy: 85,
		basePower: 55,
		category: "Special",
		name: "Trade Wind",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryImmunity(target) {
			return !target.hasAbility('stickyhold');
		},
		onHit(target, source, move) {
			const yourItem = target.takeItem(source);
			const myItem = source.takeItem();
			if (target.item || source.item || (!yourItem && !myItem)) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			if (
				(myItem && !this.singleEvent('TakeItem', myItem, source.itemState, target, source, move, myItem)) ||
				(yourItem && !this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem))
			) {
				if (yourItem) target.item = yourItem.id;
				if (myItem) source.item = myItem.id;
				return false;
			}
			this.add('-activate', source, 'move: Trade Wind', '[of] ' + target);
			if (myItem) {
				target.setItem(myItem);
				this.add('-item', target, myItem, '[from] move: Trade Wind');
			} else {
				this.add('-enditem', target, yourItem, '[silent]', '[from] move: Trade Wind');
			}
			if (yourItem) {
				source.setItem(yourItem);
				this.add('-item', source, yourItem, '[from] move: Trade Wind');
			} else {
				this.add('-enditem', source, myItem, '[silent]', '[from] move: Trade Wind');
			}
		},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	typhoon: {
		num: 666909,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Typhoon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	whirldive: {
		num: 666910,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Whirldive",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	rotfangs: {
		num: 666911,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Rot Fangs",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: {
			chance: 30,
			status: 'tox',
		},
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	infect: {
		num: 666912,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Infect",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) return false;
			this.add('-start', target, 'typechange', 'Zombie');
		},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	roaringmagma: {
		num: 666913,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Roaring Magma",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, sound: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	staticfabric: {
		num: 666914,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Static Fabric",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	patchworkdeluge: {
		num: 666915,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Patchwork Deluge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	mosaicray: {
		num: 666916,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Mosaic Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 25,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('brn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('frz', source);
				}
			},
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	noose: {
		num: 666917,
		accuracy: 90,
		basePower: 95,
		category: "Physical",
		name: "Noose",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	strangle: {
		num: 666918,
		accuracy: 80,
		basePower: 90,
		category: "Physical",
		name: "Strangle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	migraine: {
		num: 666919,
		accuracy: 90,
		basePower: 30,
		basePowerCallback(pokemon, target, move) {
			let bp = move.basePower;
			const rolloutData = pokemon.volatiles['rollout'];
			if (rolloutData?.hitCount) {
				bp *= Math.pow(2, rolloutData.contactHitCount);
			}
			if (rolloutData && pokemon.status !== 'slp') {
				rolloutData.hitCount++;
				rolloutData.contactHitCount++;
				if (rolloutData.hitCount < 5) {
					rolloutData.duration = 2;
				}
			}
			if (pokemon.volatiles['defensecurl']) {
				bp *= 2;
			}
			this.debug("BP: " + bp);
			return bp;
		},
		category: "Special",
		name: "Migraine",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onModifyMove(move, pokemon, target) {
			if (pokemon.volatiles['rollout'] || pokemon.status === 'slp' || !target) return;
			pokemon.addVolatile('rollout');
			// @ts-ignore
			// TS thinks pokemon.volatiles['rollout'] doesn't exist because of the condition on the return above
			// but it does exist now because addVolatile created it
			pokemon.volatiles['rollout'].targetSlot = move.sourceEffect ? pokemon.lastMoveTargetLoc : pokemon.getLocOf(target);
		},
		onAfterMove(source, target, move) {
			const rolloutData = source.volatiles["rollout"];
			if (
				rolloutData &&
				rolloutData.hitCount === 5 &&
				rolloutData.contactHitCount < 5
				// this conditions can only be met in gen7 and gen8dlc1
				// see `disguise` and `iceface` abilities in the resp mod folders
			) {
				source.addVolatile("rolloutstorage");
				source.volatiles["rolloutstorage"].contactHitCount =
					rolloutData.contactHitCount;
			}
		},
		condition: {
			duration: 1,
			onLockMove: 'rollout',
			onStart() {
				this.effectState.hitCount = 0;
				this.effectState.contactHitCount = 0;
			},
			onResidual(target) {
				if (target.lastMove && target.lastMove.id === 'struggle') {
					// don't lock
					delete target.volatiles['rollout'];
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	clutch: {
		num: 666920,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Clutch",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	rend: {
		num: 666921,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Rend",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onBasePower(basePower, pokemon, target) {
			if (target.hp * 2 <= target.maxhp) {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	thunderjavelin: {
		num: 666922,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Thunder Javelin",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	wildfire: {
		num: 666923,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Wildfire",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Fire",
		isNonstandard: "Future",
	},
	boxcrash: {
		num: 666924,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Box Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			chance: 50,
			boosts: {
				def: 2,
			},
		},
		secondary: {
			// Sheer Force negates the self even though it is not secondary
		},
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	technorush: {
		num: 666925,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Techno Rush",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		recoil: [1,3],
		secondary: {
			chance: 5,
			status: 'brn',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	artificiaslam: {
		num: 666926,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Artificiaslam",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticclaw: {
		num: 666927,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Plastic Claw",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticlaunch: {
		num: 666928,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Plastic Launch",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	garbagethrash: {
		num: 666929,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Garbage Thrash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		critRatio: 2,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	spectrumfist: {
		num: 666930,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Spectrum Fist",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	whimsicalwhip: {
		num: 666931,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Whimsical Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	tuningfork: {
		num: 666932,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Tuning Fork",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		boosts: {
			accuracy: 1,
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	iciclecleave: {
		num: 666933,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Icicle Cleave",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	constructcrash: {
		num: 666934,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Construct Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	ram: {
		num: 666936,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		name: "Ram",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({atk: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	finslap: {
		num: 666937,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Fin Slap",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	causticbreath: {
		num: 666938,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Caustic Breath",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 98,
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	possesion: {
		num: 666939,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Possesion",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		overrideOffensivePokemon: 'target',
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	psybolt: {
		num: 666941,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Psybolt",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	webball: {
		num: 666942,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Web Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1, web: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Bug",
		isNonstandard: "Future",
	},
	lazyday: {
		num: 666943,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Lazy Day",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('truant');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Truant', '[from] move: Lazy Day');
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	aimedshot: {
		num: 666944,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Aimed Shot",
		pp: 5,
		priority: 0,
		flags: {arrow: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	bullseye: {
		num: 666945,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bullseye",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, arrow: 1, west: 1},
		willCrit: true,
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	dynamicrush: {
		num: 666946,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Dynamic Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	powertail: {
		num: 666947,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Power Tail",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondaries: [
			{
				chance: 10,
				status: 'par',
			}, {
				chance: 10,
				volatileStatus: 'flinch',
			},
		],
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	treesmash: {
		num: 666948,
		accuracy: 60,
		basePower: 100,
		category: "Physical",
		name: "Tree Smash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, above: 1},
		onModifyMove(move) {
			if (this.field.getPseudoWeather('arboreum')) move.accuracy = true;
		},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	rootcrush: {
		num: 666949,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Root Crush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		hasCrashDamage: true,
		onMoveFail(target, source, move) {
			this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get('High Jump Kick'));
		},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	shedleaves: {
		num: 666950,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Shed Leaves",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status)) return false;
			pokemon.cureStatus();
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	shellblast: {
		num: 666951,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Shell Blast",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	whalesong: {
		num: 666952,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Whale Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 20,
			status: 'slp',
		},
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	taintedwater: {
		num: 666953,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Tainted Water",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'psn',
		},
		target: "allAdjacent",
		type: "Water",
		isNonstandard: "Future",
	},
	chocolatecrunch: {
		num: 666955,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Chocolate Crunch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	steadyhand: {
		num: 666956,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Steady Hand",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	netsurf: {
		num: 666957,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Net Surf",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	polylith: {
		num: 666958,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		overrideDefensiveStat: 'def',
		name: "Polylith",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	enginecharge: {
		num: 666959,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Engine Charge",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	jetfuelcharge: {
		num: 666960,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Jet Fuel Charge",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	geodeblast: {
		num: 666961,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Geode Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	quartzbeam: {
		num: 666962,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Quartz Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	fireworks: {
		num: 666963,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Fireworks",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2,5],
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	avarice: {
		num: 666964,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Avarice",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Avarice', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Avarice', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	kiblast: {
		num: 666965,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Ki Blast",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	happyglow: {
		num: 666966,
		accuracy: 100,
		basePower: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		category: "Special",
		name: "Happy Glow",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	neon: {
		num: 666967,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Neon",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 2,
		},
		secondary: null,
		target: "self",
		type: "Light",
		isNonstandard: "Future",
	},
	encycloray: {
		num: 666969,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Encycloray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 20,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('brn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('frz', source);
				}
			},
		},
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	papercharge: {
		num: 666970,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Paper Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	atomicbreath: {
		num: 666971,
		accuracy: 90,
		basePower: 125,
		category: "Special",
		name: "ATOMICBREATH",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	nuclearpulse: {
		num: 666972,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Nuclear Pulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: {
			chance: 25,
			status: 'par',
		},
		target: "allAdjacent",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	reactor: {
		num: 666973,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reactor",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spa: 1,
			spd: 1,
			accuracy: 1,
		},
		secondary: null,
		target: "self",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	nucleartail: {
		num: 666974,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Nuclear Tail",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		critRatio: 2,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	beacon: {	//TODO: Stops Fog
		num: 666975,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Beacon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					accuracy: 2,
				}
			}
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	reaction: {
		num: 666976,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Reaction",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'reaction',
		},
		condition: {
			onStart(pokemon) {
				this.add('-singlemove', pokemon, 'Reaction');
			},
			onHit(target, source, move) {
				if (target !== source && move.category !== 'Status') {
					this.boost({atk: 1});
				}
			},
			onBeforeMovePriority: 100,
			onBeforeMove(pokemon) {
				this.debug('removing Reaction before attack');
				pokemon.removeVolatile('reaction');
			},
		},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	steamerroller: {
		num: 666977,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Steamerroller",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	nervegas: {
		num: 666978,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Nerve Gas",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	normalray: {
		num: 666979,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Normal Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	gaschamber: {
		num: 666980,
		accuracy: 40,
		basePower: 1,
		category: "Special",
		name: "Gas Chamber",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	gravityshift: {
		num: 666981,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Gravity Shift",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	solarray: {
		num: 666982,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Solar Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		weather: 'sunnyday',
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	voltkick: {
		num: 666983,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Volt Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	wildmushroom: {
		num: 666984,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wild Mushroom",
		pp: 10,
		priority: 1,
		volatileStatus: 'substitute',
		onTryHit(source) {
			if (source.volatiles['substitute']) {
				this.add('-fail', source, 'move: Substitute');
				return this.NOT_FAIL;
			}
			if (source.hp <= source.maxhp / 4 || source.maxhp === 1) { // Shedinja clause
				this.add('-fail', source, 'move: Substitute', '[weak]');
				return this.NOT_FAIL;
			}
		},
		onHit(target) {
			this.directDamage(target.maxhp / 4);
		},
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	magicsand: {
		num: 666985,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "Magic Sand",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			status: 'slp',
		},
		target: "allAdjacentFoes",
		type: "Ground",
		isNonstandard: "Future",
	},
	mercurywave: {
		num: 666986,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Mercury Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'psn',
		},
		target: "allAdjacent",
		type: "Steel",
		isNonstandard: "Future",
	},
	sonicpunch: {
		num: 666987,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Sonic Punch",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, sound: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	psychout: {
		num: 666988,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Psych Out",
		pp: 10,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Psychout only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	mania: {
		num: 666990,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Mania",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	rampage: {
		num: 666991,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Rampage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		secondary: null,
		target: "randomNormal",
		type: "Dark",
		isNonstandard: "Future",
	},
	fossilfuel: {
		num: 666992,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Fossil Fuel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	metalcrash: {
		num: 666993,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Metal Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	soysplash: {
		num: 666994,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Soy Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spe: -1,
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	sushibeam: {
		num: 666995,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Sushi Beam",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: {
			chance: 30,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	icicles: {
		num: 666996,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Icicles",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Icicles');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('icicles')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Ice",
		isNonstandard: "Future",
	},
	magmasport: { //TODO: Interactions with Volcanic Terrain, Heat Up and Floor is lava
		num: 666997,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magma Sport",
		pp: 15,
		priority: 0,
		flags: {defrost: 1},
		boosts: {
			spd: 1,
		},
		pseudoWeather: 'magmasport',
		condition: {
			duration: 5,
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Magma Sport', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Ice' && !attacker.hasItem('magmaballon')) {
					this.debug('magma sport weaken');
					return this.chainModify([1352, 4096]);
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 3,
			onFieldEnd() {
				this.add('-fieldend', 'move: Magma Sport');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Magma",
		isNonstandard: "Future",
	},
	dustdevil: {
		num: 666998,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Dustdevil",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		weather: 'sandstorm',
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	rocknroll: {
		num: 666999,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Rock N Roll",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 30,
			status: 'par',
		},
		target: "allAdjacent",
		type: "Rock",
		isNonstandard: "Future",
	},
	dragonkick: {
		num: 667000,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		name: "Dragon Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, kick: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	deliverance: {
		num: 667001,
		accuracy: 95,
		basePower: 125,
		category: "Special",
		name: "Deliverance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	bedbite: {
		num: 667002,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Bed Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	junglesong: {
		num: 667003,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Jungle Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	softstep: {
		num: 667004,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Soft Step",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	villainpower: {
		num: 667005,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Villain Power",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	spiritdrain: {
		num: 667006,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Spirit Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	brickcrash: {
		num: 667007,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Brick Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	glomp: {
		num: 667008,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Glomp",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	heil: {
		num: 667009,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Heil",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	omegapower: {
		num: 667010,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Omega Power",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	steamingsteam: {
		num: 667011,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Steaming Steam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	magmamelt: {
		num: 667012,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Magma Melt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	solidwood: {
		num: 667013,
		accuracy: 90,
		basePower: 160,
		category: "Physical",
		name: "Solid Wood",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	cavein: {
		num: 667014,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Cave-in",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	locussword: {
		num: 667015,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Locus Sword",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	saltbeam: {
		num: 667016,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Salt Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	starfinger: {
		num: 667017,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Star Finger",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	zawarudo: {
		num: 667019,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Za Warudo",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	nightmarch: {
		num: 667020,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Night March",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	sunlightoverdrive: {
		num: 667021,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Sunlight Overdrive",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sun: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'flinch',
		},
		critRatio: 2,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	vampirebite: {
		num: 667022,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Vampire Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	overrun: {
		num: 667023,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Over-run",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	why: {
		num: 667024,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Why",
		pp: 1,
		priority: 0,
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	technoray: {
		num: 667025,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Techno Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	aichmoclaws: {
		num: 667026,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Aichmoclaws",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	jumpscare: {
		num: 667027,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Jump Scare",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	odynocharge: {
		num: 667028,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Odynocharge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	fist: {
		num: 667029,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Fist",
		pp: 15,
		priority: 0,
		secondary: {
			chance: 25,
			status: 'tox',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		critRatio: 2,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	brutal: {
		num: 667030,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Brutal",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	geigerstrike: {
		num: 667031,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Geiger Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			status: 'tox',
		},
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	ritual: {
		num: 667032,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ritual",
		pp: 5,
		priority: -1,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		boosts: {
			spa: 2,
			atk: 2,
			spe: 2,
		},
		flags: {pulse: 1},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	acrophobia: {
		num: 667033,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Acrophobia",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	glassbreaker: {
		num: 667034,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Glassbreaker",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	ransomwareslam: {
		num: 667035,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Ransomware Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Ransomware Slam', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Ransomeware Slam', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	worm: {
		num: 667036,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Worm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	hack: {
		num: 667037,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Hack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 55,
			onHit(target) {
				if (!target.hp) return;
				let move: Move | ActiveMove | null = target.lastMove;
				if (!move || move.isZ) return;
				if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);

				const ppDeducted = target.deductPP(move.id, 3);
				if (!ppDeducted) return;
				this.add('-activate', target, 'move: Eerie Spell', move.name, ppDeducted);
			},
		},
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	bubblejuggle: {
		num: 667038,
		accuracy: 90,
		basePower: 29,
		category: "Physical",
		name: "Bubble Juggle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	balljuggle: {
		num: 667039,
		accuracy: 90,
		basePower: 27,
		category: "Physical",
		name: "Ball Juggle",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	madness: {
		num: 667040,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Madness",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Fear",
		isNonstandard: "Future",
	},
	jetdive: {
		num: 667041,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Jet Dive",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	splinter: {
		num: 667042,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Splinter",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	speedway: {
		num: 667043,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Speedway",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	mysticsword: {
		num: 667044,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Mystic Sword",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	bladerain: {
		num: 667045,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Blade Rain",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Steel",
		isNonstandard: "Future",
	},
	sneakyskitter: {
		num: 667046,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Sneaky Skitter",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	ambush: {
		num: 667047,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Ambush",
		pp: 20,
		priority: -3,
		priorityChargeCallback(pokemon) {
			pokemon.addVolatile('ambush');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['ambush']?.lostFocus) {
				this.add('cant', pokemon, 'Ambush', 'Ambush');
				return true;
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Ambush');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					this.effectState.lostFocus = true;
				}
			},
			onTryAddVolatile(status, pokemon) {
				if (status.id === 'flinch') return null;
			},
		},
		flags: {contact: 1, protect: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	pumpkinbomb: {
		num: 667051,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Pumpkin Bomb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	midnight: {
		num: 667052,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Midnight",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Dark",
		isNonstandard: "Future",
	},
	sauna: {
		num: 667053,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sauna",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Steam",
		isNonstandard: "Future",
	},
	humidburst: {
		num: 667054,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Humid Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	angelburst: {
		num: 667075,
		accuracy: 95,
		basePower: 160,
		category: "Special",
		name: "Angel Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	angelrush: {
		num: 667076,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Angel Rush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	flock: {
		num: 667077,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Flock",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	torchpass: {
		num: 667078,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Torch Pass",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	crystalray: {
		num: 667080,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Crystal Ray",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	preynet: {
		num: 667081,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Prey Net",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, web: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	solidify: {
		num: 667082,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Solidify",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Rock",
		isNonstandard: "Future",
	},
	boldcounter: {
		num: 667083,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Bold Counter",
		pp: 10,
		priority: -1,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	heroiccharge: {
		num: 667084,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Heroic Charge",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	pursuittackle: {
		num: 667085,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Pursuit Tackle",
		pp: 5,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	fury: {
		num: 667089,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Fury",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	shimmerstrike: {
		num: 667090,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Shimmer Strike",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	eldritchgoop: {
		num: 667091,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Eldritch Goop",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	matteroftime: {
		num: 667093,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Matter of Time",
		pp: 5,
		priority: 1,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: {
			chance: 30,
			volatileStatus: 'flinch',
		},
		flags: {protect: 1, mirror: 1},
		critRatio: 2,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	slowingfist: {
		num: 667094,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Slowing Fist",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Time",
		isNonstandard: "Future",
	},
	nightmareeater: {
		num: 667095,
		accuracy: 100,
		basePower: 123,
		category: "Special",
		name: "Nightmare Eater",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	couragerush: {
		num: 667096,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Courage Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	phantomsword: {
		num: 667097,
		accuracy: 100,
		basePower: 115,
		category: "Physical",
		name: "Phantom Sword",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		ignoreEvasion: true,
		ignoreDefensive: true,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	magnetdraw: {
		num: 667098,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Magnet Draw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			if (target.status === 'par') {
				this.debug('BP doubled on paralyzed target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		secondary: null,
		onHit(target) {
			if (target.status === 'par') target.cureStatus();
		},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	aquaslash: {
		num: 667099,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Aqua Slash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	powerballad: {
		num: 667100,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Power Ballad",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	deage: {
		num: 667101,
		accuracy: 95,
		basePower: 0,
		boosts: {
			atk: -1,
			def: -1,
			spa: -1,
			spd: -1,
			spe: -1,
		},
		category: "Status",
		name: "De-Age",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	forecast: {
		num: 667102,
		accuracy: 80,
		basePower: 35,
		category: "Special",
		name: "Forecast",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 80,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	prophecy: {
		num: 667103,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Prophecy",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	channel: {
		num: 667104,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Channel",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Ghost' && move.id !== 'channel'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	magicwand: {
		num: 667105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magic Wand",
		pp: 15,
		priority: 0,
		flags: {},onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Magic' && move.id !== 'magicwand'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	steelcasting: {
		num: 667106,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Steel Casting",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Magic' && move.id !== 'magicwand'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	poof: {
		num: 667107,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Poof!",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Fairy' && move.id !== 'poof'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Fairy",
		isNonstandard: "Future",
	},
	spiritshell: {
		num: 667108,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spirit Shell",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Bug",
		isNonstandard: "Future",
	},
	soulconsume: {
		num: 667109,
		accuracy: 35,
		basePower: 1,
		category: "Special",
		name: "Soul Consume",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	elfshot: {
		num: 667110,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Elf Shot",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	wcreate: {
		num: 667111,
		accuracy: 95,
		basePower: 180,
		category: "Physical",
		name: "W-create",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	envelop: {
		num: 667112,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Envelop",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	envelope: {
		num: 667113,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Envelope",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	helldrag: {
		num: 667114,
		accuracy: 80,
		basePower: 10,
		category: "Physical",
		name: "Hell Drag",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		forceSwitch: true,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	tractorbeam: {
		num: 667115,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Tractor Beam",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	sapspray: {
		num: 667116,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Sap Spray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Wood",
		isNonstandard: "Future",
	},
	astronomy: {
		num: 667117,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Astronomy",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Cosmic' && move.id !== 'astronomy'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	velocitydive: {
		num: 667118,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Velocity Dive",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	tictoc: {
		num: 667119,
		accuracy: 85,
		basePower: 40,
		category: "Physical",
		name: "Tic Toc",
		pp: 10,
		priority: 0,
		multihit: 2,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	boostbeam: {
		num: 667120,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Boost Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	bibliomancy: {
		num: 667121,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bibliomancy",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Paper' && move.id !== 'bibliomancy'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	steamscald: {
		num: 667122,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Steam Scald",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	steamslash: {
		num: 667123,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Steam Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	techerupt: {
		num: 667124,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Tech Erupt",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			status: 'brn',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	quicksteamer: {
		num: 667125,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Quick Steamer",
		pp: 5,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	woodrush: {
		num: 667126,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Wood Rush",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	cometrush: {
		num: 667127,
		accuracy: 95,
		basePower: 40,
		category: "Physical",
		name: "Comet Rush",
		pp: 10,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	palmscrape: {
		num: 667128,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Palm Scrape",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	meteorcrash: {
		num: 667129,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Meteor Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1, above: 1},
		secondary: {
			chance: 15,
			status: 'brn',
		},
		recoil: [33, 100],
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	thehand: {
		num: 667130,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "The Hand",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	triassault: {
		num: 667131,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Tri Assault",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	vacuumstrike: {
		num: 667131,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Vacuum Strike",
		pp: 10,
		priority: -6,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	epidemic: {
		num: 667132,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Epidemic",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	plague: {
		num: 667133,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Plague",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Virus",
		isNonstandard: "Future",
	},
	gigadrillbreak: {
		num: 667134,
		accuracy: 90,
		basePower: 180,
		category: "Physical",
		name: "Giga Drill Break",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	"3freeze": {
		num: 667135,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "3-Freeze",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	talksmack: {
		num: 667136,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Talk Smack",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	rewrite: {
		num: 667137,
		accuracy: true,
		basePower: 75,
		category: "Special",
		name: "Re-Write",
		pp: 15,
		priority: 0,
		flags: {bypasssub: 1},
		onHitField() {
			this.add('-clearallboost');
			for (const pokemon of this.getAllActive()) {
				pokemon.clearBoosts();
			}
		},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	heavensdoor: {
		num: 667138,
		accuracy: true,
		basePower: 120,
		category: "Special",
		name: "Heaven's Door",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	heavenpower: {
		num: 667139,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Heaven Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	divineseal: {
		num: 667140,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Divine Seal",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 40,
			volatileStatus: 'disable',
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	paperseal: {
		num: 667141,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Paper Seal",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bitesthedust: {
		num: 667143,
		accuracy: true,
		basePower: 130,
		category: "Special",
		name: "Bites the Dust",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	airbomb: {
		num: 667145,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Air Bomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	shinepunch: {
		num: 667146,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Shine Punch",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	dazzlefist: {
		num: 667147,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Dazzle Fist",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	deathwithoutend: {
		num: 667148,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Death Without End",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	reptize: {
		num: 667149,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reptize",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	venom: {
		num: 667150,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Venom",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	ironchomp: {
		num: 667151,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Iron Chomp",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	happyeverafter: {
		num: 667152,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Happy Ever After",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	sleightofhand: {
		num: 667153,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Sleight of Hand",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Sleight of Hand', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Sleight of Hand', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	cannibalize: {
		num: 667155,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Cannibalize",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	tailbite: {
		num: 667156,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Tail Bite",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	electroleech: {
		num: 667157,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Electro Leech",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	duststorm: {
		num: 667158,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Dust Storm",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 70,
			boosts: {
				accuracy: -1,
			},
		},
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	achillesheel: {
		num: 667159,
		accuracy: 65,
		basePower: 0,
		category: "Status",
		name: "Achilles Heel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		boosts: {
			atk: -1,
			def: -1,
			spa: -1,
			spd: -1,
			spe: -1,
		},
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	chargespin: {
		num: 667160,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Charge Spin",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Charge Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Charge Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Charge Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Charge Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	smokelunge: {
		num: 667161,
		accuracy: true,
		basePower: 85,
		category: "Physical",
		name: "Smoke Lunge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	tirelunge: {
		num: 667162,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Tire Lunge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	ironroot: {
		num: 667163,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Iron Root",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	soulchill: {
		num: 667164,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Soul Chill",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	coldsteam: {
		num: 667165,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Cold Steam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	subzerosteam: {
		num: 667166,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Sub Zero Steam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	firebrush: {
		num: 667167,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Fire Brush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	lightwhip: {
		num: 667168,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Light Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	uvburst: {
		num: 667169,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "UV Burst",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			onHit(source) {
				this.field.setWeather('sunnyday');
			},
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	electricburst: {
		num: 667170,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Electric Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	stringwrap: {
		num: 667171,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "String Wrap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	stringrush: {
		num: 667172,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "String Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	fabricpunch: {
		num: 667173,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Fabric Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	snowstorm: {
		num: 667174,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Snow Storm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	combust: {
		num: 667175,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Combust",
		pp: 25,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	demonicswipes: {
		num: 667176,
		accuracy: 90,
		basePower: 6,
		category: "Physical",
		name: "Demonic Swipes",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	mossyfist: {
		num: 667177,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Mossy Fist",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	sunburn: {
		num: 667178,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Sun Burn",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sun: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'dryskin' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('dryskin');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Dry Skin', '[from] move: Sun Burn');
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	perfumesting: {
		num: 667179,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Perfume Sting",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	shattercrash: {
		num: 667180,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Shatter Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	shieldsmash: {
		num: 667181,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Shield Smash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	sonar: {
		num: 667182,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Sonar",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	ectoblast: {
		num: 667183,
		accuracy: 75,
		basePower: 100,
		category: "Special",
		name: "Ecto Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	cannibilize: {
		num: 667184,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Cannibilize",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	consume: {
		num: 667185,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "CONSUME",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	iceshatter: {
		num: 667186,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Ice Shatter",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	mudamuda: {
		num: 667187,
		accuracy: 95,
		basePower: 45,
		category: "Physical",
		name: "Muda Muda",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	veryhijumpkick: {
		num: 667189,
		accuracy: 75,
		basePower: 170,
		category: "Physical",
		name: "Very Hi Jump Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	ultraplunder: {
		num: 667190,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Ultra Plunder",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Ultra Plunder', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Ultra Plunder', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	nutrientdrain: {
		num: 667191,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Nutrient Drain",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	eighteenfourteen: {
		num: 667192,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Eighteen Fourteen",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	mcmurry: {
		num: 667193,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "McMurry",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	bloodsuck: {
		num: 667194,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Blood Suck",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodblade: {
		num: 667195,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Blood Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	batbite: {
		num: 667196,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Bat Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	lavaweb: {
		num: 667197,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Lava Web",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, web: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	magmaknife: {
		num: 667198,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Magma Knife",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	crystalthrow: {
		num: 667201,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Crystal Throw",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	crystaltomb: {
		num: 667202,
		accuracy: 80,
		basePower: 55,
		category: "Physical",
		name: "Crystal Tomb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	crystalslide: {
		num: 667203,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Crystal Slide",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Crystal",
		isNonstandard: "Future",
	},
	crystaledge: {
		num: 667204,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Crystal Edge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	cosmicslash: {
		num: 667205,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Cosmic Slash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	epitaph: {
		num: 667206,
		accuracy: 75,
		basePower: 65,
		category: "Physical",
		name: "Epitaph",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	crimsoncourt: {
		num: 667207,
		accuracy: 80,
		basePower: 30,
		category: "Physical",
		name: "Crimson Court",
		pp: 5,
		priority: 2,
		secondary: {
			chance: 55,
			volatileStatus: 'disable',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	schizoidman: {
		num: 667208,
		accuracy: 70,
		basePower: 60,
		category: "Physical",
		name: "Schizoid Man",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	lunacy: {
		num: 667209,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Lunacy",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	crumbs: {
		num: 667210,
		accuracy: true,
		basePower: 1,
		category: "Physical",
		name: "Crumbs",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	goudagun: {
		num: 667211,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Gouda Gun",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cheesymelt: {
		num: 667212,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Cheesy Melt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	overriperoquefort: {
		num: 667213,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Overripe Roquefort",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cheddarcrash: {
		num: 667214,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Cheddar Crash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	freezingwave: {
		num: 667215,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Freezing Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	satelliteray: {
		num: 667216,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		name: "Satellite Ray",
		pp: 10,
		priority: 0,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({spa: 2}, attacker, attacker, move);
			if (this.field.getPseudoWeather('starfield')) {
				this.boost({
					spd: 1,
				});
			}
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	dualchaos: {
		num: 667217,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Dual Chaos",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		multihit: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	dualdivinity: {
		num: 667218,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Dual Divinity",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		multihit: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	moonstoneray: {
		num: 667219,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Moonstone Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, moon: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Rock",
		isNonstandard: "Future",
	},
	godsmaw: {
		num: 667220,
		accuracy: 85,
		basePower: 95,
		category: "Special",
		name: "God's Maw",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	plaguefrenzy: {
		num: 667221,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Plague Frenzy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Virus",
		isNonstandard: "Future",
	},
	metalwhip: {
		num: 667222,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Metal Whip",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	neardeath: {
		num: 667223,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Near Death",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		basePowerCallback(pokemon, target) {
			const ratio = Math.max(Math.floor(pokemon.hp * 48 / pokemon.maxhp), 1);
			let bp;
			if (ratio < 2) {
				bp = 200;
			} else if (ratio < 5) {
				bp = 150;
			} else if (ratio < 10) {
				bp = 100;
			} else if (ratio < 17) {
				bp = 80;
			} else if (ratio < 33) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	raillaunch: {
		num: 667224,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Rail Launch",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	crashlanding: {
		num: 667225,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Crash Landing",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	hypothermia: {
		num: 667226,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Hypothermia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	quicksilver: {
		num: 667227,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Quick Silver",
		pp: 20,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	lenience: {
		num: 667228,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Lenience",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	dawnchorus: {
		num: 667229,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Dawn Chorus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	frighteningwail: {
		num: 667230,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Frightening Wail",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	driveby: {
		num: 667231,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Drive-By",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		selfSwitch: true,
		type: "Dark",
		isNonstandard: "Future",
	},
	aerialrace: {
		num: 667232,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Aerial Race",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	bloodsiphon: {
		num: 667233,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Blood Siphon",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	hexpunch: {
		num: 667234,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Hex Punch",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	discpunch: {
		num: 667235,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Disc Punch",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	divineshield: {
		num: 667236,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Divine Shield",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	ultraweaken: {
		num: 667237,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Ultra Weaken",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	starsaligned: {
		num: 667238,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Stars Aligned",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	zipperhole: {
		num: 667239,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Zipper Hole",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	zipperstrike: {
		num: 667240,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Zipper Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	stickyfingers: {
		num: 667241,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Sticky Fingers",
		pp: 10,
		priority: 0,
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	fa223rkeou543wfdt: {
		num: 667242,
		accuracy: 85,
		basePower: 40,
		category: "Physical",
		name: "Fa223rke Ou543wfdt",
		pp: 5,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Fa223rke Ou543wfdt only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	abyssalhelldrag: {
		num: 667243,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Abyssal Hell Drag",
		pp: 40,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	desecrations: {
		num: 667244,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Desecrations",
		pp: 1,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	solarelectricity: {
		num: 667245,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Solar Electricity",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	thanatophobia: {
		num: 667246,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Thanatophobia",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	claustrocrush: {
		num: 667247,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Claustrocrush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	pester: {
		num: 667248,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Pester",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	dragonflycharge: {
		num: 667249,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Dragonfly Charge",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	voltfang: {
		num: 667250,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Volt Fang",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	voltbind: {
		num: 667251,
		accuracy: 85,
		basePower: 70,
		category: "Physical",
		name: "Volt Bind",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		volatileStatus: 'partiallytrapped',
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	toxicsteamtackle: {
		num: 667252,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Toxic Steam Tackle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	doublenote: {
		num: 667253,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Double Note",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	wintersong: {
		num: 667254,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Winter Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	triplenote: {
		num: 667255,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Triple Note",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	lownote: {
		num: 667256,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Low Note",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	treblebeam: {
		num: 667257,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Treble Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	highnote: {
		num: 667258,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "High Note",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	earthchomp: {
		num: 667259,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Earth Chomp",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	wormattack: {
		num: 667260,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Worm Attack",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	tunnelaway: {
		num: 667261,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Tunnel Away",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	encryptray: {
		num: 667262,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Encrypt Ray",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	cyberboost: {
		num: 667263,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Cyber Boost",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	demolisher: {
		num: 667264,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Demolisher",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	duel: {
		num: 667265,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Duel",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	lightdrain: {
		num: 667266,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Light Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	chargespell: {
		num: 667267,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Charge Spell",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	chargecrystal: {
		num: 667268,
		accuracy: 85,
		basePower: 70,
		category: "Special",
		name: "Charge Crystal",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	caloriebeam: {
		num: 667269,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Calorie Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	humidray: {
		num: 667270,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Humid Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	crystalwave: {
		num: 667271,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Crystal Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	crystalpower: {
		num: 667272,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Crystal Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	fellcrystal: {
		num: 667273,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Fell Crystal",
		pp: 10,
		priority: 0,
		onAfterMoveSecondarySelf(pokemon, target, move) {
			if (!target || target.fainted || target.hp <= 0) this.boost({spa: 3}, pokemon, pokemon, move);
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Crystal",
		isNonstandard: "Future",
	},
	bubblepop: {
		num: 667274,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Bubble Pop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	checkmate: {
		num: 667275,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Checkmate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	zephyrgust: {
		num: 667276,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Zephyr Gust",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	bunkerbeam: {
		num: 667277,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Bunker Beam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	deathspell: {
		num: 667278,
		accuracy: 30,
		basePower: 1,
		category: "Special",
		name: "Death Spell",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	iratetrance: {
		num: 667279,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Irate Trance",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	miseryshot: {
		num: 667280,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Misery Shot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	hyperspell: {
		num: 667281,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Hyper Spell",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	bowlspin: {
		num: 667282,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bowl Spin",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Bowl Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Bowl Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Bowl Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	saucesplash: {
		num: 667283,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Sauce Splash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	searingsauce: {
		num: 667284,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Searing Sauce",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cremate: {
		num: 667285,
		accuracy: 85,
		basePower: 150,
		category: "Special",
		name: "Cremate",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	spicyleaves: {
		num: 667286,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Spicy Leaves",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	superspicysauce: {
		num: 667287,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Super Spicy Sauce",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cloudgust: {
		num: 667288,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Cloud Gust",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	ultradownpour: {
		num: 667289,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Ultra Downpour",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	ultrasolarray: {
		num: 667290,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Ultra Solar Ray",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	coldwind: {
		num: 667291,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Cold Wind",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	ultrasnowstorm: {
		num: 667292,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Ultra Snow Storm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	ultradustdevil: {
		num: 667293,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Ultra Dustdevil",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	stormthunder: {
		num: 667294,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Storm Thunder",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	heatray: {
		num: 667295,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Heat Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	superheatray: {
		num: 667296,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Super Heat Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	cosmicboost: {
		num: 667298,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Cosmic Boost",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	dojyan: {
		num: 667300,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Dojyan",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	pooftackle: {
		num: 667301,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Poof Tackle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	disappear: {
		num: 667302,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Disappear",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		selfSwitch: true,
		type: "Magic",
		isNonstandard: "Future",
	},
	dirtydeedsdonedirtcheap: {
		num: 667303,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "DirtyDeedsDoneDirtCheap",
		pp: 10,
		priority: 0,
		selfSwitch: true,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	enumaelish: {
		num: 667304,
		accuracy: 95,
		basePower: 135,
		category: "Special",
		name: "Enuma Elish",
		pp: 5,
		priority: 0,
		onHit(target, source, move) {
			let success = false;
			if (!target.volatiles['substitute'] || move.infiltrates) success = !!this.boost({evasion: -1});
			const removeTarget = [
				'reflect', 'lightscreen', 'auroraveil', 'mirageveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			const removeAll = [
				'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			for (const targetCondition of removeTarget) {
				if (target.side.removeSideCondition(targetCondition)) {
					if (!removeAll.includes(targetCondition)) continue;
					this.add('-sideend', target.side, this.dex.conditions.get(targetCondition).name, '[from] move: Enuma Elish', '[of] ' + source);
					success = true;
				}
			}
			for (const sideCondition of removeAll) {
				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: Enuma Elish', '[of] ' + source);
					success = true;
				}
			}
			this.field.clearTerrain();
			return success;
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	gandr: {
		num: 667305,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Gandr",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	kilobyte: {
		num: 667306,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Kilo Byte",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	gigabyte: {
		num: 667307,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Giga Byte",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	datadrill: {
		num: 667308,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Data Drill",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	divinescales: {
		num: 667309,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "Divine Scales",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	abduct: {
		num: 667310,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Abduct",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	miasmaslash: {
		num: 667311,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Miasma Slash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	cripple: {
		num: 667312,
		accuracy: 90,
		basePower: 166,
		category: "Physical",
		name: "Cripple",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	samuraipapercut: {
		num: 667313,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Samurai Paper Cut",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	baseballstrike: {
		num: 667314,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Baseball Strike",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	baseballbat: {
		num: 667315,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Baseball Bat",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	godspeed: {
		num: 667317,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Godspeed",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			spe: 12,
		},
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	pray: {
		num: 667318,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pray",
		pp: 10,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Divine' && move.id !== 'pray'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	godsbreath: {
		num: 667319,
		accuracy: 90,
		basePower: 200,
		category: "Special",
		name: "God's Breath",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	absolutestrike: {
		num: 667320,
		accuracy: true,
		basePower: 120,
		category: "Physical",
		name: "Absolute Strike",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	magiccircle: {
		num: 667321,
		accuracy: 90,
		basePower: 55,
		category: "Special",
		name: "Magic Circle",
		pp: 15,
		priority: 0,
		volatileStatus: 'partiallytrapped',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	ceremony: {
		num: 667322,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ceremony",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	holywater: {
		num: 667323,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Holy Water",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	armsofgod: {
		num: 667324,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Arms of God",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	rapture: {
		num: 667325,
		accuracy: 50,
		basePower: 1,
		category: "Special",
		name: "Rapture",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	fafnirarmor: {
		num: 667326,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fafnir Armor",
		pp: 5,
		priority: 0,
		boosts: {
			def: 2,
			spd: 2,
		},
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Dragon",
		isNonstandard: "Future",
	},
	balmung: {
		num: 667327,
		accuracy: 100,
		basePower: 110,
		category: "Physical",
		name: "Balmung",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
	},
	brahmastrakundala: {
		num: 667328,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Brahmastra Kundala",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'brn',
		},
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	vasavishakti: {
		num: 667329,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Vasavi Shakti",
		pp: 1,
		priority: 0,
		status: 'brn',
		self: {
			boosts: {
				def: -1,
				spd: -1,
			},
		},
		basePowerCallback(pokemon, target, move) {
			if (target.hasType('Divine')) {
				this.debug('BP trippled on Divine pokemon');
				return move.basePower * 3;
			}
			return move.basePower;
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	cryingwarmonger: {
		num: 667330,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Crying Warmonger",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "scripted",
		type: "Fighting",
		isNonstandard: "Future",
	},
	blastedtree: {
		num: 667331,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Blasted Tree",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	sikerausum: {
		num: 667332,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Sikera Usum",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	sagittarius: {
		num: 667333,
		accuracy: true,
		basePower: 110,
		category: "Special",
		name: "Sagittarius",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	kaziklibey: {
		num: 667334,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Kazikli Bey",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	dromeuskometes: {
		num: 667335,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Dromeus Kometes",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	marssword: {
		num: 667336,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Mars Sword",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 60,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	gaedearg: {
		num: 667337,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Gae Dearg",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	gaebuidhe: {
		num: 667338,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Gae Buidhe",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	elementalattack: {
		num: 667339,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Elemental Attack",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	deathmatch: {
		num: 667340,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Death Match",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	reversesplash: {
		num: 667341,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Reverse Splash",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	iceage: {
		num: 667342,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Ice Age",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	geyser: {
		num: 667343,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Geyser",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	luminousflux: {
		num: 667344,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Luminous Flux",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	atomicenergy: {
		num: 667345,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Atomic Energy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	lightjavelin: {
		num: 667346,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Light Javelin",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	arclight: {
		num: 667347,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Arc Light",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	miraclereprisal: {
		num: 667348,
		accuracy: 100,
		basePower: 1,
		basePowerCallback(pokemon, target) {
			let power = 60 + 20 * target.positiveBoosts();
			if (power > 200) power = 200;
			this.debug('BP: ' + power);
			return power;
		},
		category: "Physical",
		name: "Miracle Reprisal",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	invokedread: {
		num: 667349,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Invoke Dread",
		pp: 10,
		priority: 0,
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'defeatist' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('defeatist');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Defeatist', '[from] move: Invoke Dread');
				return;
			}
			return oldAbility as false | null;
		},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	delusionalheartbeat: {
		num: 667350,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Delusional Heartbeat",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	throwingknives: {
		num: 667351,
		accuracy: 85,
		basePower: 18,
		category: "Physical",
		name: "Throwing Knives",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	spookypresence: {
		num: 667352,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Spooky Presence",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	dreamfist: {
		num: 667353,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Dream Fist",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	rustyblade: {
		num: 667354,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Rusty Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	stigmatastrike: {
		num: 667355,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Stigmata Strike",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('healblock');
			}
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	stigmaticgleam: {
		num: 667356,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Stigmatic Gleam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('healblock');
			}
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	deathsdoor: {
		num: 667357,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Death's Door",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	babylongoblet: {
		num: 667358,
		accuracy: 80,
		basePower: 65,
		category: "Special",
		name: "Babylon Goblet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	psalms: {
		num: 667359,
		accuracy: 85,
		basePower: 50,
		category: "Special",
		name: "Psalms",
		pp: 5,
		priority: 0,
		secondary: {
			chance: 90,
			self: {
				boosts: {
					spa: 2,
				},
			},
		},
		flags: {protect: 1, mirror: 1, sound: 1},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	luminositeeternelle: {
		num: 667360,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Luminosite Eternelle",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	crazytackle: {
		num: 667361,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Crazy Tackle",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	arondight: {
		num: 667362,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Arondight",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 25,
			self: {
				boosts: {
					atk: 1,
					def: 1,
					spa: 1,
					spd: 1,
					spe: 1,
				},
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	direstate: {
		num: 667363,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Dire State",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	detonationburst: {
		num: 667364,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Detonation Burst",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	sorrowfultune: {
		num: 667365,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Sorrowful Tune",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	occultflash: {
		num: 667366,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Occult Flash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	naughtwave: {
		num: 667367,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Naught Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	divinejudgement: {
		num: 667368,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Divine Judgement",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	rust: {
		num: 667369,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Rust",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return 1;
		},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	boil: {
		num: 667370,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Boil",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	mirrorreflect: {
		num: 667371,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Mirror Reflect",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "scripted",
		type: "Glass",
		isNonstandard: "Future",
	},
	mirrorworld: {
		num: 667372,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Mirror World",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	disenchant: {
		num: 667373,
		accuracy: true,
		basePower: 70,
		category: "Special",
		name: "Disenchant",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	mysteriousmagic: {
		num: 667374,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Mysterious Magic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	gorgoneye: {
		num: 667375,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Gorgon Eye",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'par',
		},
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	timefreeze: {
		num: 667376,
		accuracy: 55,
		basePower: 0,
		category: "Status",
		name: "Time Freeze",
		pp: 5,
		priority: 0,
		status: 'frz',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	firstfolio: {
		num: 667377,
		accuracy: 85,
		basePower: 115,
		category: "Special",
		name: "First Folio",
		pp: 5,
		priority: 0,
		secondary: {
			chance: 50,
			onHit(target, source) {
				const result = this.random(3);
				if (result === 0) {
					target.trySetStatus('brn', source);
				} else if (result === 1) {
					target.trySetStatus('par', source);
				} else {
					target.trySetStatus('frz', source);
				}
			},
		},
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bulletcorn: {
		num: 667378,
		accuracy: 100,
		basePower: 25,
		category: "Special",
		name: "Bullet Corn",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	veggiebeam: {
		num: 667379,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Veggie Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	lightarrow: {
		num: 667380,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Light Arrow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	lightup: {
		num: 667381,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Light Up",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	impulse: {
		num: 667382,
		accuracy: 85,
		basePower: 50,
		category: "Special",
		name: "Impulse",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	secondblast: {
		num: 667383,
		accuracy: 100,
		basePower: 45,
		category: "Special",
		name: "Second Blast",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	minuteblast: {
		num: 667384,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Minute Blast",
		pp: 25,
		priority: 0,
		secondary: {
			chance: 35,
			boosts: {
				spd: -1,
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	hourblast: {
		num: 667385,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Hour Blast",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	timewarp: {
		num: 667386,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Time Warp",
		pp: 5,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		breaksProtect: true,
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability: false,
		},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	focustime: {
		num: 667387,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Focus Time",
		pp: 20,
		priority: -3,
		priorityChargeCallback(pokemon) {
			pokemon.addVolatile('focustime');
		},
		beforeMoveCallback(pokemon) {
			if (pokemon.volatiles['focustime']?.lostFocus) {
				this.add('cant', pokemon, 'Focus Time', 'Focus Time');
				return true;
			}
		},
		condition: {
			duration: 1,
			onStart(pokemon) {
				this.add('-singleturn', pokemon, 'move: Focus Time');
			},
			onHit(pokemon, source, move) {
				if (move.category !== 'Status') {
					this.effectState.lostFocus = true;
				}
			},
			onTryAddVolatile(status, pokemon) {
				if (status.id === 'flinch') return null;
			},
		},
		flags: {contact: 1, protect: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	windspear: {
		num: 667388,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Wind Spear",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	thievingwind: {
		num: 667389,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Thieving Wind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Thieving Wind', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Thieving Wind', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	airstamp: {
		num: 667390,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Air Stamp",
		pp: 20,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	macroburst: {
		num: 667391,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Macroburst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	airraid: {
		num: 667392,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "Air-Raid",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	windspin: {
		num: 667393,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Wind Spin",
		pp: 10,
		priority: 0,
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Wind Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Wind Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Wind Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Wind Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	westerlies: {
		num: 667394,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Westerlies",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	divinethunder: {
		num: 667395,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		name: "Divine Thunder",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	blackout: {
		num: 667396,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Blackout",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	unfetteredsoul: {
		num: 667397,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Unfettered Soul",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (!pokemon.item) {
				this.debug("BP doubled for no item");
				return move.basePower * 2;
			}
			return move.basePower;
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	balloonpop: {
		num: 667398,
		accuracy: 95,
		basePower: 125,
		category: "Special",
		name: "Balloon Pop",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberbeam: {
		num: 667399,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Rubber Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	excalibur: {
		num: 667400,
		accuracy: 90,
		basePower: 175,
		category: "Physical",
		name: "Excalibur",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Fairy",
		isNonstandard: "Future",
	},
	strikeair: {
		num: 667401,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Strike Air",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	invisibleair: {
		num: 667402,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Invisible Air",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Wind",
		isNonstandard: "Future",
	},
	darknessdance: {
		num: 667403,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Darkness Dance",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "randomNormal",
		type: "Dark",
		isNonstandard: "Future",
	},
	infinitybeam: {
		num: 667404,
		accuracy: 85,
		basePower: 3,
		category: "Special",
		name: "Infinity Beam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	thousandarmstrike: {
		num: 667405,
		accuracy: 85,
		basePower: 5,
		category: "Physical",
		name: "Thousand-Arm Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	bellerophon: {
		num: 667406,
		accuracy: 95,
		basePower: 125,
		category: "Special",
		name: "Bellerophon",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	bloodandromeda: {
		num: 667407,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Blood Andromeda",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	pandemonium: {
		num: 667408,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Pandemonium",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	lanceoflonginus: {
		num: 667409,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Lance of Longinus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	radiatedmist: {
		num: 667410,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Radiated Mist",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'embargo',
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	smellycloud: {
		num: 667411,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Smelly Cloud",
		pp: 15,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	stinkburst: {
		num: 667412,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Stink Burst",
		pp: 10,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	toxicwind: {
		num: 667413,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Toxic Wind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	quarantinevirus: {
		num: 667414,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Quarantine Virus",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "allAdjacent",
		type: "Virus",
		isNonstandard: "Future",
	},
	cancervirus: {
		num: 667415,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Cancer Virus",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	decaylimbs: {
		num: 667416,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Decay Limbs",
		pp: 15,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	meltvirus: {
		num: 667417,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Melt Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	newvirus: {
		num: 667418,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "New Virus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	poisonvirus: {
		num: 667419,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Poison Virus",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	gigatoxin: {
		num: 667420,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Giga Toxin",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	superfever: {
		num: 667421,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Super Fever",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	extinguishflame: {
		num: 667422,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Extinguish Flame",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	hexvirus: {
		num: 667423,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Hex Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Virus",
		isNonstandard: "Future",
	},
	icethaw: {
		num: 667424,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Ice Thaw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	commoncold: {
		num: 667425,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Common Cold",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	severecold: {
		num: 667426,
		accuracy: 85,
		basePower: 105,
		category: "Special",
		name: "Severe Cold",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	leprosy: {
		num: 667427,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Leprosy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	acceleprosy: {
		num: 667428,
		accuracy: 85,
		basePower: 115,
		category: "Special",
		name: "Acceleprosy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	drowsyray: {
		num: 667429,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Drowsy Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Psychic",
		isNonstandard: "Future",
	},
	drowsyvirus: {
		num: 667430,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Drowsy Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Virus",
		isNonstandard: "Future",
	},
	dreamconsume: {
		num: 667431,
		accuracy: 95,
		basePower: 130,
		category: "Special",
		name: "Dream Consume",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	sleepvirus: {
		num: 667432,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Sleep Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Virus",
		isNonstandard: "Future",
	},
	risingflame: {
		num: 667433,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Rising Flame",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	burningbranch: {
		num: 667434,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Burning Branch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	carpetscrape: {
		num: 667435,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Carpet Scrape",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			status: 'par',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	carpetshock: {
		num: 667436,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Carpet Shock",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 25,
			status: 'par',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	portalburst: {
		num: 667437,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Portal Burst",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	dimensionweb: {
		num: 667438,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Dimension Web",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, web: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	dangeroussting: {
		num: 667439,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Dangerous Sting",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	restrictbeam: {
		num: 667440,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Restrict Beam",
		pp: 10,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	shinehit: {
		num: 667441,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Shine Hit",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	godhand: {
		num: 667442,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "God Hand",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	masterspark: {
		num: 667446,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		name: "Master Spark",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	sanddive: {
		num: 667447,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Sand Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	elderroar: {
		num: 667448,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Elder Roar",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	metalneedle: {
		num: 667449,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Metal Needle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	guidedshot: {
		num: 667450,
		accuracy: 85,
		basePower: 80,
		category: "Special",
		name: "Guided Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	revolvingillusion: {
		num: 667451,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "RevolvingIllusion",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	densebarrage: {
		num: 667452,
		accuracy: 85,
		basePower: 140,
		category: "Special",
		name: "Dense Barrage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	fantasyseal: {
		num: 667453,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Fantasy Seal",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Fairy' || type === 'Chaos'|| type === 'Ghost'|| type === 'Dragon'|| type === 'Zombie') return 1;
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	invokedeity: {
		num: 667454,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Invoke Deity",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 3;
				this.boost(boost);
			} else {
				return false;
			}
		},
		target: "adjacentAllyOrSelf",
		type: "Divine",
		isNonstandard: "Future",
	},
	fakejewel: {
		num: 667455,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Fake Jewel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Fake Jewel', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Fake Jewel', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	badmoon: {
		num: 667456,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Bad Moon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	disarmspell: {
		num: 667458,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Disarm Spell",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Disarm Spell', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	overray: {
		num: 667459,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Over Ray",
		pp: 25,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	stardustreverie: {
		num: 667460,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Stardust Reverie",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	broomcharge: {
		num: 667461,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Broom Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	gateofbabylon: {
		num: 667462,
		accuracy: 90,
		basePower: 2,
		category: "Special",
		name: "Gate of Babylon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	rulebreaker: {
		num: 667463,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Rule Breaker",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	rainoflight: {
		num: 667464,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Rain of Light",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	gaebolg: {
		num: 667465,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Gae Bolg",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	theripper: {
		num: 667466,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "The Ripper",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	rapidthrow: {
		num: 667467,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Rapid Throw",
		pp: 15,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	hallucination: {
		num: 667468,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Hallucination",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	timecut: {
		num: 667469,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Time Cut",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	samuraiedge: {
		num: 667470,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Samurai Edge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	lastslash: {
		num: 667471,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Last Slash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	reversalsword: {
		num: 667472,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Reversal Sword",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	soulhound: {
		num: 667473,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Soul Hound",
		pp: 20,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	focussword: {
		num: 667474,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Focus Sword",
		pp: 20,
		priority: -3,
		flags: {contact: 1, protect: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	innerpower: {
		num: 667475,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Inner Power",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
	},
	specterwaltz: {
		num: 667476,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Specter Waltz",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	armorburst: {
		num: 667477,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Armor Burst",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	hiv: {
		num: 667479,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "HIV",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	heartbreak: {
		num: 667480,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Heartbreak",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	horoscope: {
		num: 667481,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Horoscope",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	goodluck: {
		num: 667482,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Good Luck",
		pp: 20,
		priority: 0,
		flags: {},
		secondary: null,
		onHit(target) {
			const stats: BoostID[] = [];
			let stat: BoostID;
			for (stat in target.boosts) {
				if (target.boosts[stat] < 6) {
					stats.push(stat);
				}
			}
			if (stats.length) {
				const randomStat = this.sample(stats);
				const boost: SparseBoostsTable = {};
				boost[randomStat] = 1;
				this.boost(boost);
			} else {
				return false;
			}
		},
		target: "adjacentAllyOrSelf",
		type: "Normal",
		isNonstandard: "Future",
	},
	icegatling: {
		num: 667483,
		accuracy: 100,
		basePower: 18,
		category: "Physical",
		name: "Ice Gatling",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	lazymist: {
		num: 667484,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Lazy Mist",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	honoikazuchi: {
		num: 667485,
		accuracy: 90,
		basePower: 125,
		category: "Special",
		name: "Honoikazuchi",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			status: 'par',
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	yatanokagami: {
		num: 667486,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Yata No Kagami",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.newlySwitched || this.queue.willMove(target)) {
				this.debug('Payback NOT boosted');
				return move.basePower;
			}
			this.debug('Payback damage boost');
			return move.basePower * 2;
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	amaterasu: {
		num: 667487,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Amaterasu",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	fujinwind: {
		num: 667488,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Fujin Wind",
		pp: 20,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	aresstrike: {
		num: 667489,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Ares Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 60,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	hachimanstrike: {
		num: 667490,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Hachiman Strike",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 96,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	omoikane: {
		num: 667491,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Omoikane",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 70,
			self: {
				boosts: {
					atk: 1,
				},
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	raidenstrike: {
		num: 667492,
		accuracy: 90,
		basePower: 125,
		category: "Physical",
		name: "Raiden Strike",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	daruma: {
		num: 667493,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Daruma",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	divinemercy: {
		num: 667494,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		name: "Divine Mercy",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onDamage(damage, target, source, effect) {
			if (damage >= target.hp) return target.hp - 1;
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	perdition: {
		num: 667495,
		accuracy: 100,
		basePower: 190,
		category: "Special",
		name: "Perdition",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTryMove(pokemon, target, move) {
			if (pokemon.hasType('Divine')) return;
			this.add('-fail', pokemon, 'move: Perdition');
			this.attrLastMove('[still]');
			return null;
		},
		self: {
			onHit(pokemon) {
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Divine" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Perdition');
			},
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	deathroll: {
		num: 667496,
		accuracy: 85,
		basePower: 80,
		category: "Physical",
		name: "Deathroll",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	inkshot: {
		num: 667497,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		name: "Ink Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						accuracy: -2,
					});
				} else {
					this.boost({
						accuracy: -1,
					});
				}
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	inkshit: {
		num: 667498,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Ink Shit",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	brushstroke: {
		num: 667499,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Brush Stroke",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'paint',
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						def: -4,
						spd: -4
					});
				} else {
					this.boost({
						
					});
				}
		},
	},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	masamuneburado: {
		num: 667500,
		accuracy: 95,
		basePower: 140,
		category: "Physical",
		name: "Masamune Burado",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	gemscatter: {
		num: 667501,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Gem Scatter",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	fellblood: {
		num: 667502,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Fell Blood",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	gash: {
		num: 667503,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Gash",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	seasonalflowers: {
		num: 667504,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Seasonal Flowers",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	flashvolley: {
		num: 667505,
		accuracy: 90,
		basePower: 20,
		category: "Special",
		name: "Flash Volley",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	iflamethrower: {
		num: 667506,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "iFlamethrower",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	ichargeblast: {
		num: 667507,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "iCharge Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	stopit: {
		num: 667508,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Stop It",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'embargo',
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	tricyber: {
		num: 667509,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Tri Cyber",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	randomint: {
		num: 667510,
		accuracy: 90,
		basePower: 15,
		category: "Special",
		name: "Random Int",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	heartstop: {
		num: 667511,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Heart Stop",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	heartthrob: {
		num: 667512,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Heart Throb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	greaseshot: {
		num: 667514,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Grease Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	greasepump: {
		num: 667515,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Grease Pump",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	bloodseal: {
		num: 667516,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Blood Seal",
		pp: 15,
		priority: 0,
		volatileStatus: 'partiallytrapped',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodoath: {
		num: 667517,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Blood Oath",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	adampunch: {
		num: 667518,
		accuracy: 100,
		basePower: 123,
		category: "Physical",
		name: "Adam Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	elementconjure: {
		num: 667519,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Element Conjure",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Magic",
		isNonstandard: "Future",
	},
	scatterbeam: {
		num: 667520,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Scatter Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	beamdance: {
		num: 667521,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Beam Dance",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "randomNormal",
		type: "Normal",
		isNonstandard: "Future",
	},
	paranoia: {
		num: 667522,
		accuracy: 90,
		basePower: 75,
		category: "Special",
		name: "Paranoia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	aquaspear: {
		num: 667523,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Aqua Spear",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	dragonslayer: {
		num: 667524,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Dragon Slayer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	pillowfight: {
		num: 667525,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Pillow Fight",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'slp',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	paintsplats: {
		num: 667526,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Paint Splats",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		onModifyMove(move, attacker) {
			if (this.field.getPseudoWeather('fabricworld')) {
				move.multihit = 5;
			}
		},
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	crosscoat: {
		num: 667527,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Crosscoat",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target) {
			if (this.field.getPseudoWeather('artgallery')) {
				this.boost({
					def: -1,
				});
			} else {
				this.boost({
				
				});
			}
		},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	cubism: {
		num: 667528,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Cubism",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 80,
			volatileStatus: 'confusion',
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						spa: -2,
					});
				} else {
					this.boost({
						
					});
				}
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	foodpoison: {
		num: 667529,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Food Poison",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	coinhurl: {
		num: 667530,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Coin Hurl",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	megaphone: {
		num: 667531,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Megaphone",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	crosscutter: {
		num: 667532,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Cross Cutter",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	windride: {
		num: 667533,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Wind Ride",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	strongarm: {
		num: 667535,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Strong Arm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	brightmoss: {
		num: 667536,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bright Moss",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	memesion: {
		num: 667537,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Memesion",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	mkultra: {
		num: 667538,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "MKULTRA",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	feedfrenzy: {
		num: 667539,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Feed Frenzy",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Dark",
		isNonstandard: "Future",
	},
	bellslash: {
		num: 667540,
		accuracy: 90,
		basePower: 95,
		category: "Physical",
		name: "Bell Slash",
		pp: 10,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	generalwinter: {
		num: 667541,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "General Winter",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Ice",
		isNonstandard: "Future",
	},
	purplehaze: {
		num: 667543,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Purple Haze",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	viruscrush: {
		num: 667544,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Virus Crush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	martianflames: {
		num: 667545,
		accuracy: 90,
		basePower: 105,
		category: "Special",
		name: "Martian Flames",
		pp: 10,
		priority: 0,
		volatileStatus: 'embargo',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	eyegouge: {
		num: 667546,
		accuracy: 50,
		basePower: 100,
		category: "Physical",
		name: "Eye Gouge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	pressurepoint: {
		num: 667547,
		accuracy: 65,
		basePower: 20,
		category: "Physical",
		name: "Pressure Point",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	vacuumrupture: {
		num: 667548,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Vacuum Rupture",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	earthenfeast: {
		num: 667549,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Earthen Feast",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	spiralstrike: {
		num: 667550,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Spiral Strike",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	shootingarts: {
		num: 667551,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Shooting Arts",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	recklessdive: {
		num: 667552,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Reckless Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	boo: {
		num: 667553,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Boo!",
		pp: 20,
		priority: -1,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	deadsilence: {
		num: 667554,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dead Silence",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	amplifier: {
		num: 667555,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Amplifier",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Sound",
		isNonstandard: "Future",
	},
	heatup: {
		num: 667556,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heat Up",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Fire",
		isNonstandard: "Future",
	},
	stonedrills: {
		num: 667557,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Stone Drills",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	miraclemallet: {
		num: 667558,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Miracle Mallet",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	feast: {
		num: 667559,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Feast",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Food",
		isNonstandard: "Future",
	},
	dragonruins: {
		num: 667560,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dragon Ruins",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Dragon",
		isNonstandard: "Future",
	},
	tempest: {
		num: 667561,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tempest",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Wind",
		isNonstandard: "Future",
	},
	steadywind: {
		num: 667562,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Steady Wind",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Flying",
		isNonstandard: "Future",
	},
	airbubble: {
		num: 667563,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Air Bubble",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	amberwave: {
		num: 667564,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Amber Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	amorouspulse: {
		num: 667565,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Amorous Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	ancientstare: {
		num: 667566,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Ancient Stare",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Ancient Stare only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	anticoagulant: {
		num: 667567,
		accuracy: 80,
		basePower: 0,
		category: "Status",
		name: "Anticoagulant",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	aquaslap: {
		num: 667568,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Aqua Slap",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	atomicpunch: {
		num: 667569,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Atomic Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	bambooshoot: {
		num: 667570,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Bamboo Shoot",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	bananarang: {
		num: 667571,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Bananarang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	blackhex: {
		num: 667572,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Black Hex",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	boltin: {
		num: 667573,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bolt In",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	breakdown: {
		num: 667574,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Breakdown",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	chirp: {
		num: 667575,
		accuracy: 95,
		basePower: 40,
		category: "Special",
		name: "Chirp",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	cloneattack: {
		num: 667576,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Clone Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	cloudcrash: {
		num: 667577,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Cloud Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	coalthrow: {
		num: 667578,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Coal Throw",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	coffeedrink: {
		num: 667579,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coffee Drink",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('insomnia');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Insomnia', '[from] move: Coffee Drink');
				return;
			}
			return oldAbility as false | null;
		},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	snowfort: {
		num: 667580,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Snow Fort",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	cuddle: {
		num: 667581,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Cuddle",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	cutebump: {
		num: 667582,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Cute Bump",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	depthcharge: {
		num: 667583,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Depth Charge",
		pp: 5,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	duskslayer: {
		num: 667584,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Dusk Slayer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	dustblizzard: {
		num: 667585,
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Dust Blizzard",
		pp: 5,
		priority: 0,
		self: {
			boosts: {
				spa: -2,
			},
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	electroncrush: {
		num: 667586,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Electron Crush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	electrocute: {
		num: 667587,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Electrocute",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	epilogue: {
		num: 667588,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Epilogue",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	expunge: {
		num: 667589,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Expunge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	fallout: {
		num: 667590,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fallout",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	featherrush: {
		num: 667591,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Feather Rush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	featherslash: {
		num: 667592,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Feather Slash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	festiveshot: {
		num: 667593,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "Festive Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	finalswipe: {
		num: 667594,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Final Swipe",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	glassstorm: {
		num: 667595,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		name: "Glass Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	glowsignal: {
		num: 667596,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Glow Signal",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	harpoonshot: {
		num: 667598,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Harpoon Shot",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	heartfeltpulse: {
		num: 667599,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Heartfelt Pulse",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	heatsiphon: {
		num: 667600,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Heat Siphon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	hookdown: {
		num: 667601,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Hook Down",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	infernalblade: {
		num: 667602,
		accuracy: 90,
		basePower: 95,
		category: "Physical",
		name: "Infernal Blade",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	gatheredstars: {
		num: 667604,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Gathered Stars",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	diffusionlaser: {
		num: 667605,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Diffusion Laser",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	invisibleheart: {
		num: 667606,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Invisible Heart",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	fairyhex: {
		num: 667607,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Fairy Hex",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	purgatoryflicker: {
		num: 667608,
		accuracy: 80,
		basePower: 60,
		category: "Special",
		name: "Purgatory Flicker",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	impulseblast: {
		num: 667609,
		accuracy: 85,
		basePower: 90,
		category: "Special",
		name: "Impulse Blast",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	angelladder: {
		num: 667610,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Angel Ladder",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	racingearth: {
		num: 667611,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Racing Earth",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	divinequake: {
		num: 667612,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Divine Quake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	wizardfield: {
		num: 667613,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wizard Field",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Magic",
		isNonstandard: "Future",
	},
	tropicalwave: {
		num: 667614,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Tropical Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		isNonstandard: "Future",
	},
	memeticfang: {
		num: 667615,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Memetic Fang",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	kleenexray: {
		num: 667616,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Kleenex Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	kleenexbeam: {
		num: 667617,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Kleenex Beam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	finalsolution: {
		num: 667618,
		accuracy: 70,
		basePower: 25,
		category: "Physical",
		name: "Final Solution",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	superglitch: {
		num: 667619,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Super Glitch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	frozeninferno: {
		num: 667620,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Frozen Inferno",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	soulburner: {
		num: 667621,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Soul Burner",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	freezingslash: {
		num: 667622,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Freezing Slash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	pitchblackray: {
		num: 667623,
		accuracy: 90,
		basePower: 122,
		category: "Special",
		name: "Pitch Black Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	fieryswipes: {
		num: 667624,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Fiery Swipes",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	bonesmash: {
		num: 667625,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Bone Smash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bone: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	shatterbeam: {
		num: 667626,
		accuracy: 85,
		basePower: 90,
		category: "Special",
		name: "Shatter Beam",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	speedyglass: {
		num: 667627,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Speedy Glass",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	suckercharge: {
		num: 667628,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Sucker Charge",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	suckerjab: {
		num: 667629,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Sucker Jab",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	wooddrill: {
		num: 667630,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Wood Drill",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	extinguishsteam: {
		num: 667631,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Extinguish Steam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	extinguisher: {
		num: 667632,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Extinguisher",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	electrodrill: {
		num: 667633,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Electro Drill",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	magmatackle: {
		num: 667634,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Magma Tackle",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	lavablitz: {
		num: 667635,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Lava Blitz",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	zombiecharge: {
		num: 667636,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Zombie Charge",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombieram: {
		num: 667637,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Zombie Ram",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombieacid: {
		num: 667638,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Zombie Acid",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiespit: {
		num: 667639,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Zombie Spit",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	undeadspit: {
		num: 667640,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Undead Spit",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiebind: {
		num: 667641,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Zombie Bind",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombind: {
		num: 667642,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Zombind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	brutalhold: {
		num: 667643,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Brutal Hold",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	abyssdive: {
		num: 667644,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Abyss Dive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	blinding: {
		num: 667645,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Blinding",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	dancinglight: {
		num: 667647,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Dancing Light",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	diamondglow: {
		num: 667648,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Diamond Glow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	eyebeam: {
		num: 667649,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Eye Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	flare: {
		num: 667650,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Flare",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	sunshine: {
		num: 667651,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Sun Shine",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	sewingsting: {
		num: 667652,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Sewing Sting",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	sewingjab: {
		num: 667653,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sewing Jab",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	fabricstab: {
		num: 667654,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Fabric Stab",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 40,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	dazzlingflames: {
		num: 667655,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Dazzling Flames",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	crossbowassault: {
		num: 667656,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Crossbow Assault",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	starflare: {
		num: 667657,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Star Flare",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	battlewaltz: {
		num: 667658,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Battle Waltz",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Sound",
		isNonstandard: "Future",
	},
	infinitescales: {
		num: 667659,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Infinite Scales",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	cooldown: {
		num: 667661,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cool Down",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather('hail')) {
				factor = 0.667;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	phantomensemble: {
		num: 667662,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Phantom Ensemble",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	boombox: {
		num: 667663,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Boom Box",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	secondtackle: {
		num: 667664,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Second Tackle",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	prerecord: {
		num: 667665,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pre Record",
		pp: 10,
		priority: 1,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	futurepassed: {
		num: 667666,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Future Passed",
		pp: 20,
		priority: 1,
		flags: {protect: 1},
		onTryHit(target, pokemon) {
			const action = this.queue.willMove(target);
			if (!action) return false;

			const noMeFirst = [
				'beakblast', 'chatter', 'counter', 'covet', 'focuspunch', 'mefirst', 'metalburst', 'mirrorcoat', 'shelltrap', 'struggle', 'thief',
			];
			const move = this.dex.getActiveMove(action.move.id);
			if (action.zmove || move.isZ || move.isMax) return false;
			if (target.volatiles['mustrecharge']) return false;
			if (move.category === 'Status' || noMeFirst.includes(move.id)) return false;

			pokemon.addVolatile('mefirst');
			this.actions.useMove(move, pokemon, target);
			return null;
		},
		condition: {
			duration: 1,
			onBasePowerPriority: 12,
			onBasePower(basePower) {
				return this.chainModify(1.5);
			},
		},
		secondary: null,
		target: "adjacentFoe",
		type: "Time",
		isNonstandard: "Future",
	},
	steamboatrush: {
		num: 667667,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Steamboat Rush",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	fortissimo: {
		num: 667668,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Fortissimo",
		pp: 10,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Fortissimo only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	sexpistols: {
		num: 667669,
		accuracy: 90,
		basePower: 20,
		category: "Special",
		name: "Sex Pistols",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	rubberburst: {
		num: 667670,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Rubber Burst",
		pp: 10,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "scripted",
		type: "Rubber",
		isNonstandard: "Future",
	},
	bounceback: {
		num: 667671,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Bounce Back",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	reactivebounce: {
		num: 667672,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Reactive Bounce",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	heavyweather: {
		num: 667674,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Heavy Weather",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	superfly: {
		num: 667675,
		accuracy: 100,
		basePower: 105,
		category: "Physical",
		name: "Super Fly",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	dangerouslick: {
		num: 667677,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Dangerous Lick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	volttail: {
		num: 667678,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Volt Tail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	scrunch: {
		num: 667679,
		accuracy: 85,
		basePower: 30,
		category: "Physical",
		name: "Scrunch",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	foulgas: {
		num: 667680,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Foul Gas",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	starfreeze: {
		num: 667681,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Star Freeze",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 23,
			status: 'par',
		},
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	ghostwave: {
		num: 667682,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Ghost Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	traceon: {
		num: 667683,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Trace On",
		pp: 20,
		priority: 1,
		flags: {protect: 1},
		secondary: null,
		target: "adjacentFoe",
		type: "Steel",
		isNonstandard: "Future",
	},
	tsubamegaeshi: {
		num: 667684,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Tsubame Gaeshi",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	spintop: {
		num: 667685,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Spin Top",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	superspintop: {
		num: 667686,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Super Spin Top",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	fireball: {
		num: 667687,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Fire Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 35,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	twilightray: {
		num: 667688,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Twilight Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	irongrip: {
		num: 667689,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Iron Grip",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	lullaby: {
		num: 667690,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Lullaby",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	foulodor: {
		num: 667691,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Foul Odor",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	carpetbomb: {
		num: 667692,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Carpet Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Fabric",
		isNonstandard: "Future",
	},
	bonecrusher: {
		num: 667693,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Bone Crusher",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bone: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	inkblast: {
		num: 667694,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Ink Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	sourbeam: {
		num: 667695,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Sour Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	pincushion: {
		num: 667696,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "PinCushion",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	sacrifice: {
		num: 667697,
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "Sacrifice",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Magic",
		isNonstandard: "Future",
	},
	devildeal: {
		num: 667698,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Devil Deal",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		onHit(target) {
			if (target.hp <= target.maxhp / 2 || target.boosts.atk >= 6 || target.boosts.spa >= 6 ||  target.maxhp === 1) { // Shedinja clause
				return false;
			}
			this.directDamage(target.maxhp / 2);
			this.boost({atk: 12, spa: 12}, target);
		},
		type: "Chaos",
		isNonstandard: "Future",
	},
	shinigamieyes: {
		num: 667699,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shinigami Eyes",
		pp: 10,
		priority: 0,
		onHit(target) {
			if (target.hp <= target.maxhp / 2 || target.boosts.accuracy >= 6 || target.boosts.spa >= 6 || target.maxhp === 1) { // Shedinja clause
				return false;
			}
			this.directDamage(target.maxhp / 2);
			this.boost({accuracy: 12, spa: 12}, target);
		},
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	divide: {
		num: 667700,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "Divide",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	addition: {
		num: 667701,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Addition",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	subtract: {
		num: 667702,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Subtract",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	multiply: {
		num: 667703,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Multiply",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	calculator: {
		num: 667704,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Calculator",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Tech",
		isNonstandard: "Future",
	},
	terriblevisage: {
		num: 667705,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Terrible Visage",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	magnetshards: {
		num: 667706,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Magnet Shards",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	headchop: {
		num: 667707,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Head Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	antidotepoint: {
		num: 667708,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Antidote Point",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	disarm: {
		num: 667709,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Disarm",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Disarm', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	traincrash: {
		num: 667710,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "Train Crash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Tech",
		isNonstandard: "Future",
	},
	teleportaway: {
		num: 667711,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Teleport Away",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		selfSwitch: true,
		type: "Psychic",
		isNonstandard: "Future",
	},
	unstablehorizon: {
		num: 667712,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Unstable Horizon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	breakup: {
		num: 667713,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Break Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	loveburst: {
		num: 667714,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Love Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	venusburst: {
		num: 667715,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Venus Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 55,
			volatileStatus: 'attract',
		},
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	acidburst: {
		num: 667716,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Acid Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	chromeray: {
		num: 667717,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Chrome Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	techsting: {
		num: 667718,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Tech Sting",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	blooddrain: {
		num: 667719,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Blood Drain",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodpump: {
		num: 667720,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Blood Pump",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	replicate: {
		num: 667721,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Replicate",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	glassyterrain: {
		num: 667722,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Glassy Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Psychic",
		isNonstandard: "Future",
	},
	whirlglass: {
		num: 667723,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Whirlglass",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	breadrollout: {
		num: 667724,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Bread Rollout",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	fruityburst: {
		num: 667725,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Fruity Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	sandwichrush: {
		num: 667726,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Sandwich Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	predictspell: {
		num: 667727,
		accuracy: 80,
		basePower: 45,
		category: "Special",
		name: "Predict Spell",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	magicprophecy: {
		num: 667728,
		accuracy: 55,
		basePower: 100,
		category: "Special",
		name: "Magic Prophecy",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	bedtime: {
		num: 667729,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Bed Time",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Time",
		isNonstandard: "Future",
	},
	incompray: {
		num: 667730,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		name: "Incomp Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	toxicinfo: {
		num: 667731,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Toxic Info",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	gaininginfo: {
		num: 667732,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Gaining Info",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	risinginfo: {
		num: 667733,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Rising Info",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 45,
			self: {
				boosts: {
					spa: 1,
				},
			},
		},
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	quickplastic: {
		num: 667734,
		accuracy: 95,
		basePower: 56,
		category: "Special",
		name: "Quick Plastic",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	plasticray: {
		num: 667735,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Plastic Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	itchybite: {
		num: 667736,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Itchy Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	bloodbite: {
		num: 667737,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Blood Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodhound: {
		num: 667738,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Blood Hound",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	hardcandybeam: {
		num: 667739,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Hard Candy Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	storedcalories: {
		num: 667740,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Stored Calories",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			const bp = move.basePower + 20 * pokemon.positiveBoosts();
			this.debug('BP: ' + bp);
			return bp;
		},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	woodstalk: {
		num: 667741,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Woodstalk",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	felltree: {
		num: 667742,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Fell Tree",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	flavoredice: {
		num: 667743,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Flavored Ice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	illusionbullets: {
		num: 667744,
		accuracy: 90,
		basePower: 20,
		category: "Special",
		name: "Illusion Bullets",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	windwave: {
		num: 667745,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Wind Wave",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	smogshot: {
		num: 667746,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Smog Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	randomshots: {
		num: 667747,
		accuracy: 100,
		basePower: 18,
		category: "Special",
		name: "Random Shots",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	moonbow: {
		num: 667748,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Moonbow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	carpetcharge: {
		num: 667749,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Carpet Charge",
		pp: 20,
		priority: 0,
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	flycarpet: {
		num: 667750,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Fly Carpet",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, above: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		condition: {
			duration: 2,
			onInvulnerability(target, source, move) {
				if (['gust', 'twister', 'skyuppercut', 'thunder', 'hurricane', 'smackdown', 'thousandarrows'].includes(move.id)) {
					return;
				}
				return false;
			},
			onSourceModifyDamage(damage, source, target, move) {
				if (move.id === 'gust' || move.id === 'twister') {
					return this.chainModify(2);
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	blazespear: {
		num: 667751,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Blaze Spear",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	bloodgungnir: {
		num: 667752,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Blood Gungnir",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Blood",
		isNonstandard: "Future",
	},
	scarletmist: {
		num: 667753,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Scarlet Mist",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	netherray: {
		num: 667755,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Nether Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	thunderclap: {
		num: 667756,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "Thunderclap",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	futureattack: {
		num: 667757,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Future Attack",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	thunderveil: {
		num: 667758,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Thunder Veil",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
		isNonstandard: "Future",
	},
	thunderdrill: {
		num: 667759,
		accuracy: 90,
		basePower: 55,
		category: "Physical",
		name: "Thunder Drill",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	magneticrocks: {
		num: 667760,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Magnetic Rocks",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	gravityblast: {
		num: 667761,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Gravity Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	infohazardrush: {
		num: 667763,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "InfoHazard Rush",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	bloodystorm: {
		num: 667764,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Bloody Storm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	darksweets: {
		num: 667765,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "Dark Sweets",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	laevateinn: {
		num: 667766,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Laevateinn",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	andthentherewerenone: {
		num: 667767,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "And Then There Were None",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	distortionbomb: {
		num: 667768,
		accuracy: 80,
		basePower: 60,
		category: "Physical",
		name: "Distortion Bomb",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	torturedspike: {
		num: 667769,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Tortured Spike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	ebbtide: {
		num: 667770,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Ebb Tide",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	lovesick: {
		num: 667771,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Love Sick",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	dnabeam: {
		num: 667772,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "DNA Beam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	booing: {
		num: 667773,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Booing",
		pp: 20,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	toxiccopy: {
		num: 667774,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Toxic Copy",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onHit(target, source) {
			let i: BoostID;
			for (i in target.boosts) {
				source.boosts[i] = target.boosts[i];
			}
			const volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];
			for (const volatile of volatilesToCopy) {
				if (target.volatiles[volatile]) {
					source.addVolatile(volatile);
					if (volatile === 'gmaxchistrike') source.volatiles[volatile].layers = target.volatiles[volatile].layers;
				} else {
					source.removeVolatile(volatile);
				}
			}
			this.add('-copyboost', source, target, '[from] move: Toxic Copy');
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	sludgedown: {
		num: 667775,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Sludge Down",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	magictrap: {
		num: 667776,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magic Trap",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'magictrap',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Magic Trap');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('magictrap')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Magic",
		isNonstandard: "Future",
	},
	gargoylepunch: {
		num: 667777,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Gargoyle Punch",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source, target) {
			const action = this.queue.willMove(target);
			const move = action?.choice === 'move' ? action.move : null;
			if (!move || (move.category === 'Status' && move.id !== 'mefirst') || target.volatiles['mustrecharge']) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	packedice: {
		num: 667778,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Packed Ice",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	shadowend: {
		num: 667779,
		accuracy: 60,
		basePower: 120,
		category: "Special",
		name: "Shadow End",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowstorm: {
		num: 667780,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Shadow Storm",
		pp: 15,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowblast: {
		num: 667781,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Shadow Blast",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowbolt: {
		num: 667782,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Shadow Bolt",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowbreak: {
		num: 667783,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Shadow Break",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowchill: {
		num: 667784,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Shadow Chill",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowfire: {
		num: 667785,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Shadow Fire",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowrave: {
		num: 667786,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Shadow Rave",
		pp: 20,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowrush: {
		num: 667787,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Shadow Rush",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowwave: {
		num: 667788,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Shadow Wave",
		pp: 30,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowblitz: {
		num: 667789,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Shadow Blitz",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowdown: {
		num: 667790,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Down",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowhalf: {
		num: 667791,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Half",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "all",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowhold: {
		num: 667792,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Hold",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowmist: {
		num: 667793,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Mist",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowpanic: {
		num: 667794,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Shadow Panic",
		pp: 1,
		priority: 0,
		flags: {protect: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowshed: {
		num: 667795,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Shed",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "all",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowsky: {
		num: 667796,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shadow Sky",
		pp: 1,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "all",
		type: "Shadow",
		isNonstandard: "Future",
	},
	excaliburmorgan: {
		num: 667797,
		accuracy: 90,
		basePower: 175,
		category: "Physical",
		name: "Excalibur Morgan",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	divineprotection: {
		num: 667798,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Divine Protection",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'wonderguard' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('wonderguard');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Wonder Guard', '[from] move: Divine Protection');
				return;
			}
			return oldAbility as false | null;
		},
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	ionioihetairoi: {
		num: 667799,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ionioi Hetairoi",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		isNonstandard: "Future",
	},
	coldspell: {
		num: 667800,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Cold Spell",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	blackripple: {
		num: 667801,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Black Ripple",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Dark",
		isNonstandard: "Future",
	},
	decisivestrike: {
		num: 667802,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Decisive Strike",
		pp: 5,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	mercurycharge: {
		num: 667803,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Mercury Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	aestusdomusaurea: {
		num: 667805,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aestus Domus Aurea",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Light",
		isNonstandard: "Future",
	},
	laussaintclaudius: {
		num: 667806,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Laus Saint Claudius",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	understep: {
		num: 667807,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Understep",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	scrapmetal: {
		num: 667808,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Scrap Metal",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'scrapmetal',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Scrap Metal');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded() || pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('scrapmetal')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Steel",
		isNonstandard: "Future",
	},
	firespiral: {
		num: 667809,
		accuracy: 85,
		basePower: 95,
		category: "Special",
		name: "Fire Spiral",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	fullsteamahead: {
		num: 667810,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Full Steam Ahead",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	electrorush: {
		num: 667811,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Electro Rush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	supertrainrush: {
		num: 667812,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Super Train Rush",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	swordofdawn: {
		num: 667813,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Sword of Dawn",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	finalmoove: {
		num: 667814,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Final Moove",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	rainbowdash: {
		num: 667815,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Rainbow Dash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	closeshave: {
		num: 667816,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Close Shave",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	lovespark: {
		num: 667817,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Love Spark",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	illuminatipower: {
		num: 667818,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Illuminati Power",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	mysterybeam: {
		num: 667819,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mystery Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, allyanim: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Qmarks' || !target.setType('Qmarks')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Qmarks');
		},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	dayblast: {
		num: 667820,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Day Blast",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	yearblast: {
		num: 667821,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Year Blast",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	urbanburst: {
		num: 667822,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Urban Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	fishbite: {
		num: 667823,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Fish Bite",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	anglestab: {
		num: 667824,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Angle Stab",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	megapeck: {
		num: 667825,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Mega Peck",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	triplepeck: {
		num: 667826,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Triple Peck",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	rocketjumpkick: {
		num: 667827,
		accuracy: 50,
		basePower: 200,
		category: "Physical",
		name: "Rocket Jump Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, kick: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	focussplash: {
		num: 667828,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Focus Splash",
		pp: 20,
		priority: -3,
		flags: {contact: 1, protect: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	lightningflash: {
		num: 667829,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Lightning Flash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
		isNonstandard: "Future",
	},
	emergencythunder: {
		num: 667830,
		accuracy: 60,
		basePower: 110,
		category: "Special",
		name: "Emergency Thunder",
		pp: 10,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	flaredash: {
		num: 667831,
		accuracy: 85,
		basePower: 110,
		category: "Physical",
		name: "Flare Dash",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	pastalavista: {
		num: 667836,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Pasta La Vista",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Food",
		isNonstandard: "Future",
	},
	tuning: {
		num: 667837,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tuning",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, sound: 1},
		secondary: null,
		target: "self",
		type: "Sound",
		isNonstandard: "Future",
	},
	ballbreaker: {
		num: 667838,
		accuracy: 95,
		basePower: 105,
		category: "Physical",
		name: "Ball Breaker",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	tusk: {
		num: 667839,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Tusk",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	twilightspark: {
		num: 667840,
		accuracy: 95,
		basePower: 180,
		category: "Special",
		name: "Twilight Spark",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	bindingsword: {
		num: 667841,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		name: "Binding Sword",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	nightwind: {
		num: 667842,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Night Wind",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	lunardial: {
		num: 667843,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Lunar Dial",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	miraclewind: {
		num: 667844,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Miracle Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	sunsinferno: {
		num: 667845,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Sun's Inferno",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	lunartides: {
		num: 667846,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Lunar Tides",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, moon: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	perfectfreeze: {
		num: 667847,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Perfect Freeze",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	lunaticeyes: {
		num: 667848,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Lunatic Eyes",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	timescrew: {
		num: 667849,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Time Screw",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	fieldbreak: {
		num: 667850,
		accuracy: 95,
		basePower: 30,
		category: "Physical",
		name: "Field Break",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	bugkick: {
		num: 667851,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Bug Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	rainbow: {
		num: 667852,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rainbow",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Light",
		isNonstandard: "Future",
	},
	imperishablenight: {
		num: 667853,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Imperishable Night",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	rainbowwave: {
		num: 667854,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Rainbow Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	apollo13: {
		num: 667855,
		accuracy: 95,
		basePower: 115,
		category: "Special",
		name: "Apollo 13",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	spitout: {
		num: 667856,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Spit Out",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	undyingflame: {
		num: 667857,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Undying Flame",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	nightsparrowsong: {
		num: 667858,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Night Sparrow Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	wanting: {
		num: 667859,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Wanting",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Wanting', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Wanting', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	heartbomb: {
		num: 667860,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Heart Bomb",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			let bp;
			if (targetWeight >= 2000) {
				bp = 120;
			} else if (targetWeight >= 1000) {
				bp = 100;
			} else if (targetWeight >= 500) {
				bp = 80;
			} else if (targetWeight >= 250) {
				bp = 60;
			} else if (targetWeight >= 100) {
				bp = 40;
			} else {
				bp = 20;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	performance: {
		num: 667861,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Performance",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "randomNormal",
		type: "Sound",
		isNonstandard: "Future",
	},
	weatherblade: {
		num: 667863,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Weather Blade",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	hisousword: {
		num: 667864,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Hisou Sword",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	blackwind: {
		num: 667865,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Black Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	draculacradle: {
		num: 667866,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Dracula Cradle",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	preach: {
		num: 667867,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Preach",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		boosts: {
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	opticcamo: {
		num: 667868,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Optic Camo",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	adaptray: {
		num: 667869,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Adapt Ray",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	communism: {
		num: 667872,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Communism",
		pp: 1,
		priority: 0,
		flags: {gravity: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	windblade: {
		num: 667873,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Wind Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	foehnwinds: {
		num: 667874,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Foehn Winds",
		pp: 15,
		priority: 0,
		recoil: [33, 100],
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	bandattack: {
		num: 667875,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Band Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	occamsrazor: {
		num: 667876,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Occams Razor",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	burststream: {
		num: 667877,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Burst Stream",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	hipcheck: {
		num: 667878,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Hip Check",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	godsgrace: {
		num: 667879,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gods Grace",
		pp: 1,
		priority: 0,
		flags: {snatch: 1},
		onHit(target, source, move) {
			source.side.addSideCondition('safeguard');
			source.side.addSideCondition('mist');
		},
		secondary: {
			chance: 100,
			boosts: {
				def: 3,
				spd: 3,
			},
		},
		volatileStatus: 'ingrain',
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	infinitybigbangstorm: {
		num: 667880,
		accuracy: 90,
		basePower: 180,
		category: "Special",
		name: "InfinityBigBangStorm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	vergavesta: {
		num: 667881,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Verg Avesta",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	orbitalcrash: {
		num: 667882,
		accuracy: 95,
		basePower: 125,
		category: "Physical",
		name: "Orbital Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, above: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	superinazumakick: {
		num: 667883,
		accuracy: 90,
		basePower: 125,
		category: "Physical",
		name: "Super Inazuma Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	fowlplay: {
		num: 667884,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Fowl Play",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	piercinghorn: {
		num: 667885,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Piercing Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	torpedo: {
		num: 667886,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Torpedo",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	moltenmetal: {
		num: 667887,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Molten Metal",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	puffup: {
		num: 667888,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Puff Up",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	cosmicblade: {
		num: 667889,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Cosmic Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	shout: {
		num: 667890,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "SHOUT",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	resonate: {
		num: 667891,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Resonate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	diffusion: {
		num: 667892,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		name: "Diffusion",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	wildgrowth: {
		num: 667893,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Wild Growth",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	coinburst: {
		num: 667894,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Coin Burst",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	leechpods: {
		num: 667895,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Leech Pods",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	pollinate: {
		num: 667896,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Pollinate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	silkscreen: {
		num: 667897,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Silk Screen",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Bug",
		isNonstandard: "Future",
	},
	vendetta: {
		num: 667898,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Vendetta",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	shortcircuit: {
		num: 667899,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Short Circuit",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	stungun: {
		num: 667900,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Stun Gun",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	glitzblitz: {
		num: 667901,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Glitz Blitz",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	hiphiphooray: {
		num: 667902,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "HipHipHooray",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	peekaboo: {
		num: 667903,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Peekaboo",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	pixiewave: {
		num: 667904,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Pixie Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	ghoulbreath: {
		num: 667906,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Ghoul Breath",
		pp: 10,
		priority: -6,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	logroll: {
		num: 667907,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Log Roll",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	brainstorm: {
		num: 667909,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Brainstorm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Psychic",
		isNonstandard: "Future",
	},
	pinpoint: {
		num: 667910,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Pinpoint",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	alarmclock: {
		num: 667911,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Alarm Clock",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	insomniaray: {
		num: 667912,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Insomnia Ray",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	nightterror: {
		num: 667913,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Night Terror",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	bluster: {
		num: 667914,
		accuracy: 90,
		basePower: 0,
		category: "Special",
		name: "Bluster",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	heartseye: {
		num: 667915,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Hearts Eye",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	enviousburst: {
		num: 667916,
		accuracy: true,
		basePower: 90,
		category: "Special",
		name: "Envious Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	burningdesire: {
		num: 667917,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Burning Desire",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	burningpassion: {
		num: 667918,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Burning Passion",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			status: 'brn',
		},
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	heartshock: {
		num: 667919,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Heart Shock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Heart",
		isNonstandard: "Future",
	},
	spiralhearts: {
		num: 667920,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Spiral Hearts",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Heart",
		isNonstandard: "Future",
	},
	deathyweathy: {
		num: 667927,
		accuracy: 100,
		basePower: 160,
		category: "Special",
		name: "Deathy Weathy",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	burningwave: {
		num: 667928,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Burning Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	fossilize: {
		num: 667930,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fossilize",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Rock' || !target.setType('Rock')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Rock');
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	enviousheart: {
		num: 667931,
		accuracy: true,
		basePower: 100,
		category: "Special",
		name: "Envious Heart",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	superego: {
		num: 667932,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Super Ego",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	chaoticnoise: {
		num: 667933,
		accuracy: 95,
		basePower: 40,
		category: "Special",
		name: "Chaotic Noise",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Chaos",
		isNonstandard: "Future",
	},
	poseidonwave: {
		num: 667934,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Poseidon Wave",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Water', type);
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	hightide: {
		num: 667935,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "High Tide",
		pp: 5,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Water",
		isNonstandard: "Future",
	},
	embalm: {
		num: 667936,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Embalm",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	sunflowerburst: {
		num: 667937,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Sunflower Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	slingshot: {
		num: 667938,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Slingshot",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	sandslash: {
		num: 667940,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Sand Slash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	autumnwind: {
		num: 667941,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Autumn Wind",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	darkfire: {
		num: 667942,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Dark Fire",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	mothmunch: {
		num: 667943,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Moth Munch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	plantcloak: {
		num: 667944,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Plant Cloak",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	sandcloak: {
		num: 667945,
		accuracy: 95,
		basePower: 95,
		category: "Physical",
		name: "Sand Cloak",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	trashcloak: {
		num: 667946,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Trash Cloak",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	burningice: {
		num: 667947,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Burning Ice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	sunset: {
		num: 667948,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Sunset",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	metallica: {
		num: 667949,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Metallica",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	emeraldsplash: {
		num: 667950,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Emerald Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	secretingredient: {
		num: 667951,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Secret Ingredient",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	gettertomahawk: {
		num: 667952,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Getter Tomahawk",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	drillattack: {
		num: 667953,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Drill Attack",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	gettermissile: {
		num: 667954,
		accuracy: 85,
		basePower: 75,
		category: "Physical",
		name: "Getter Missile",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	getterbeam: {
		num: 667955,
		accuracy: 100,
		basePower: 183,
		category: "Special",
		name: "Getter Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	tomahawkboomerang: {
		num: 667956,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "TomahawkBoomerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	heatseekmissile: {
		num: 667957,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "HeatSeek Missile",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	eternalmeek: {
		num: 667958,
		accuracy: 70,
		basePower: 150,
		category: "Physical",
		name: "Eternal Meek",
		pp: 1,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	finale: {
		num: 667959,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		name: "Finale",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	chairsmack: {
		num: 667960,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Chair Smack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	harvesting: {
		num: 667961,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Harvesting",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	salamanderball: {
		num: 667962,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Salamander Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	devilsknife: {
		num: 667963,
		accuracy: 90,
		basePower: 10,
		category: "Physical",
		name: "Devilsknife",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	chaosbomb: {
		num: 667964,
		accuracy: 75,
		basePower: 160,
		category: "Special",
		name: "Chaos Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	faithbeam: {
		num: 667965,
		accuracy: 100,
		basePower: 0,
		category: "Special",
		name: "Faith Beam",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	seventrumpets: {
		num: 667966,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Seven Trumpets",
		pp: 40,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Divine",
		isNonstandard: "Future",
	},
	firsttrumpet: {
		num: 667967,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "First Trumpet",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	secondtrumpet: {
		num: 667968,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Second Trumpet",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	thirdtrumpet: {
		num: 667969,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Third Trumpet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	fourthtrumpet: {
		num: 667970,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Fourth Trumpet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	fifthtrumpet: {
		num: 667971,
		accuracy: 100,
		basePower: 190,
		category: "Special",
		name: "Fifth Trumpet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	sixthtrumpet: {
		num: 667972,
		accuracy: 100,
		basePower: 4,
		category: "Special",
		name: "Sixth Trumpet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	seventhtrumpet: {
		num: 667973,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Seventh Trumpet",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	tenplagues: {
		num: 667974,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ten Plagues",
		pp: 40,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Divine",
		isNonstandard: "Future",
	},
	firstplague: {
		num: 667975,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "First Plague",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	secondplague: {
		num: 667976,
		accuracy: true,
		basePower: 100,
		category: "Special",
		name: "Second Plague",
		pp: 1,
		priority: 2,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	thirdplague: {
		num: 667977,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Third Plague",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	fourthplague: {
		num: 667978,
		accuracy: 100,
		basePower: 4,
		category: "Special",
		name: "Fourth Plague",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	fifthplague: {
		num: 667979,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Fifth Plague",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	sixthplague: {
		num: 667980,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Sixth Plague",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	seventhplague: {
		num: 667981,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Seventh Plague",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	eigthplague: {
		num: 667982,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Eigth Plague",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	ninthplague: {
		num: 667983,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Ninth Plague",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	tenthplague: {
		num: 667984,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Tenth Plague",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	frigophobia: {
		num: 667985,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Frigophobia",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	dragonmist: {
		num: 667986,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Dragon Mist",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	breathblast: {
		num: 667987,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Breath Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	fieryblast: {
		num: 667988,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Fiery Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	faithcharge: {
		num: 667989,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Faith Charge",
		pp: 10,
		basePowerCallback(pokemon) {
			return Math.floor((pokemon.happiness * 10) / 25) || 1;
		},
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	honorbind: {
		num: 667990,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Honor Bind",
		pp: 10,
		priority: 0,
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	batteryacid: {
		num: 667991,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Battery Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	optimization: {
		num: 667992,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Optimization",
		pp: 5,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	lunatictime: {
		num: 667993,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lunatic Time",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Chaos",
		isNonstandard: "Future",
	},
	madepiphany: {
		num: 667994,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mad Epiphany",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	equalize: {
		num: 667995,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Equalize",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Divine",
		isNonstandard: "Future",
	},
	catatonia: {
		num: 667996,
		accuracy: 100,
		basePower: 25,
		category: "Special",
		name: "Catatonia",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	everyoneexplodenow: {
		num: 667997,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "EveryoneExplodeNow",
		pp: 1,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Normal",
		isNonstandard: "Future",
	},
	schizoboost: {
		num: 667998,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Schizo Boost",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Chaos",
		isNonstandard: "Future",
	},
	decay: {
		num: 667999,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Decay",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Virus",
		isNonstandard: "Future",
	},
	decayray: {
		num: 668000,
		accuracy: 100,
		basePower: 10,
		category: "Special",
		name: "Decay Ray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	mayhem: {
		num: 668001,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "Mayhem",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	slapstick: {
		num: 668002,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Slapstick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Slapstick', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	madprophecy: {
		num: 668003,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Mad Prophecy",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	defragment: {
		num: 668004,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Defragment",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	upgradeoptics: {
		num: 668005,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Upgrade Optics",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	antivirus: {
		num: 668006,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Anti-Virus",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Cyber",
		isNonstandard: "Future",
	},
	spamattack: {
		num: 668007,
		accuracy: 85,
		basePower: 25,
		category: "Physical",
		name: "Spam Attack",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	cloudstorage: {
		num: 668008,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cloud Storage",
		pp: 20,
		priority: 0,
		flags: {},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	magicmissiles: {
		num: 668009,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Magic Missiles",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	manapunch: {
		num: 668010,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Mana Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	gadget: {
		num: 668011,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gadget",
		pp: 15,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Tech' && move.id !== 'gadget'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	thermochromia: {
		num: 668012,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Thermo Chromia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'colorchange' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('colorchange');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Color Change', '[from] move: Thermo Chromia');
				return;
			}
			return oldAbility as false | null;
		},
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	fattenup: {
		num: 668013,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Fatten Up",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 100,
			boosts: {
				spe: -4,
			},
		},
		onTryHit(target) {
			if (target.getAbility().isPermanent || target.ability === 'thickfat' || target.ability === 'truant') {
				return false;
			}
		},
		onHit(pokemon) {
			const oldAbility = pokemon.setAbility('thickfat');
			if (oldAbility) {
				this.add('-ability', pokemon, 'Thick Fat', '[from] move: Fatten Up');
				return;
			}
			return oldAbility as false | null;
		},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	eject: {
		num: 668014,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Eject",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	extrachromosome: {
		num: 668015,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Extra Chromosome",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	deviationdown: {
		num: 668016,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Deviation Down",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	electrophobia: {
		num: 668017,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Electrophobia",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	antiairmissile: {
		num: 668018,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Anti-Air Missile",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	malfunction: {
		num: 668019,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Malfunction",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Tech",
		isNonstandard: "Future",
	},
	plasmacannon: {
		num: 668020,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Plasma Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 35,
			status: 'par',
		},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	overload: {
		num: 668021,
		accuracy: 90,
		basePower: 125,
		category: "Special",
		name: "Overload",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cyber",
		isNonstandard: "Future",
	},
	construction: {
		num: 668022,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Construction",
		pp: 5,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	cannonball: {
		num: 668023,
		accuracy: 88,
		basePower: 130,
		category: "Physical",
		name: "Cannonball",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	liquidmetal: {
		num: 668024,
		accuracy: 95,
		basePower: 45,
		category: "Special",
		name: "Liquid Metal",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	bindingvoice: {
		num: 668025,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Binding Voice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	primalnoise: {
		num: 668026,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Primal Noise",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	firmheart: {
		num: 668027,
		accuracy: 100,
		basePower: 125,
		category: "Physical",
		name: "Firm Heart",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	piercingstab: {
		num: 668029,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Piercing Stab",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		ignoreEvasion: true,
		ignoreDefensive: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	grimreaper: {
		num: 668030,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Grim Reaper",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	featherstorm: {
		num: 668031,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Feather Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	vilesmell: {
		num: 668032,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "Vile Smell",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	stickyhands: {
		num: 668033,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Sticky Hands",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Sticky Hands', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Sticky Hands', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	diamondtail: {
		num: 668034,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Diamond Tail",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	chromobeam: {
		num: 668035,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Chromo Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Light",
		isNonstandard: "Future",
	},
	randomgenerate: {
		num: 668036,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Random Generate",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cyber",
		isNonstandard: "Future",
	},
	flashdarts: {
		num: 668037,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Flash Darts",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	pointlazer: {
		num: 668038,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "Point Lazer",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	supernova: {
		num: 668039,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Super Nova",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	rawpower: {
		num: 668040,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Raw Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	galeforce: {
		num: 668041,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Gale Force",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Wind",
		isNonstandard: "Future",
	},
	fearfactor: {
		num: 668042,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Fear Factor",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fear",
		isNonstandard: "Future",
	},
	requiem: {
		num: 668043,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		name: "Requiem",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	thornwhip: {
		num: 668044,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Thorn Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	mandiblecrush: {
		num: 668045,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Mandible Crush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	terminate: {
		num: 668046,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Terminate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	steamblast: {
		num: 668047,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Steam Blast",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	afterburn: {
		num: 668048,
		accuracy: true,
		basePower: 100,
		category: "Special",
		name: "Afterburn",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	aquacrunch: {
		num: 668049,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Aqua Crunch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	bloom: {
		num: 668050,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Bloom",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	earthbomb: {
		num: 668051,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Earth Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Ground",
		isNonstandard: "Future",
	},
	acidspit: {
		num: 668052,
		accuracy: 90,
		basePower: 45,
		category: "Special",
		name: "Acid Spit",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	sludgepunch: {
		num: 668053,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Sludge Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	shotgunblast: {
		num: 668054,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Shotgun Blast",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	clobberclub: {
		num: 668055,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Clobber Club",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	talons: {
		num: 668056,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Talons",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	blackmagic: {
		num: 668057,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Black Magic",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	snipershot: {
		num: 668058,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Sniper Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	acidburn: {
		num: 668059,
		accuracy: 85,
		basePower: 85,
		category: "Special",
		name: "Acid Burn",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	arcticspear: {
		num: 668060,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Arctic Spear",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	stellarrush: {
		num: 668061,
		accuracy: 95,
		basePower: 40,
		category: "Physical",
		name: "Stellar Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	iceberg: {
		num: 668062,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Iceberg",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	meteorrain: {
		num: 668063,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Meteor Rain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, above: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	lightningball: {
		num: 668064,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Lightning Ball",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	fairyring: {
		num: 668065,
		accuracy: 35,
		basePower: 1,
		category: "Special",
		name: "Fairy Ring",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	freezepoint: {
		num: 668066,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Freeze Point",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Ice",
		isNonstandard: "Future",
	},
	vinehold: {
		num: 668067,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Vine Hold",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	scorchingsand: {
		num: 668068,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Scorching Sand",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	dazzlingpetals: {
		num: 668070,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Dazzling Petals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	icecage: {
		num: 668071,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Ice Cage",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	magmatail: {
		num: 668072,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Magma Tail",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	thawing: {
		num: 668073,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Thawing",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Fire",
		isNonstandard: "Future",
	},
	spikedarmor: {
		num: 668074,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spiked Armor",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	greenthumb: {
		num: 668075,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Green Thumb",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	heartpunch: {
		num: 668077,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Heart Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	sexytackle: {
		num: 668078,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Sexy Tackle",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	sandpaper: {
		num: 668079,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Sandpaper",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	sonicblade: {
		num: 668080,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Sonic Blade",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	deathnote: {
		num: 668081,
		accuracy: 35,
		basePower: 1,
		category: "Special",
		name: "Death Note",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	pullwool: {
		num: 668082,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Pull Wool",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (this.field.getPseudoWeather('fabricworld')) {
				this.boost({
					accuracy: -3,
				});
			} else {
				this.boost({
					accuracy: -2,
				});
			}
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	laughgas: {
		num: 668083,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Laugh Gas",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	roundhousekick: {
		num: 668084,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Roundhouse Kick",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, kick: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fighting",
		isNonstandard: "Future",
	},
	wormhole: {
		num: 668085,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Wormhole",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	moltenrock: {
		num: 668086,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Molten Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	stampede: {
		num: 668087,
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		name: "Stampede",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	sledrush: {
		num: 668088,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Sled Rush",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	antennatracker: {
		num: 668089,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Antenna Tracker",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Bug",
		isNonstandard: "Future",
	},
	terrakinesis: {
		num: 668090,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Terrakinesis",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Psychic",
		isNonstandard: "Future",
	},
	backstroke: {
		num: 668091,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Backstroke",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	smokeout: {
		num: 668092,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Smoke Out",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	staticslash: {
		num: 668093,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Static Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	squirm: {
		num: 668094,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Squirm",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 70,
			self: {
				boosts: {
					evasion: 1,
				},
			},
		},
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	poisoncoat: {
		num: 668095,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Poison Coat",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Poison",
		isNonstandard: "Future",
	},
	leadcoat: {
		num: 668096,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lead Coat",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	daydream: {
		num: 668097,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Daydream",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	rottingburst: {
		num: 668098,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Rotting Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombietongue: {
		num: 668099,
		accuracy: 85,
		basePower: 70,
		category: "Physical",
		name: "Zombie Tongue",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	staticcling: {
		num: 668100,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Static Cling",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Static Cling', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Static Cling', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	cloudguard: {
		num: 668101,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cloud Guard",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Wind",
		isNonstandard: "Future",
	},
	futurepower: {
		num: 668102,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "FuturePower",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	leafcanopy: {
		num: 668103,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Leaf Canopy",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Grass",
		isNonstandard: "Future",
	},
	serenade: {
		num: 668104,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Serenade",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	pillowpile: {
		num: 668105,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pillow Pile",
		pp: 5,
		priority: -1,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'pillowpile',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Pillow Pile');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Fabric')) {
					this.add('-sideend', pokemon.side, 'move: Pillow Pile', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('pillowpile');
				} else if (pokemon.hasItem('heavydutyboots')) {
					return;
				} else {
					pokemon.addVolatile('yawn', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Fabric",
		isNonstandard: "Future",
	},
	wiretrap: {
		num: 668106,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wire Trap",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'wiretrap',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Wire Trap');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Electric') || pokemon.hasType('Rubber') || pokemon.hasType('Ground') || pokemon.hasType('Tech') ) {
					this.add('-sideend', pokemon.side, 'move: Wire Trap', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('wiretrap');
				} else if (pokemon.hasItem('heavydutyboots')) {
					return;
				} else {
					pokemon.trySetStatus('par', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Electric",
		isNonstandard: "Future",
	},
	graverob: {
		num: 668107,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Grave Rob",
		pp: 10,
		priority: 0,
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Thief', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Thief', '[of] ' + target);
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	fadeaway: {
		num: 668108,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Fade Away",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		selfSwitch: true,
		type: "Ghost",
		isNonstandard: "Future",
	},
	dirge: {
		num: 668109,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Dirge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	shakedown: {
		num: 668110,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Shakedown",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	maul: {
		num: 668111,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "Maul",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	magnetpulse: {
		num: 668112,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Magnet Pulse",
		pp: 10,
		priority: -5,
		flags: {contact: 1, protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	auroraglow: {
		num: 668113,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aurora Glow",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Light",
		isNonstandard: "Future",
	},
	skylight: {
		num: 668114,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Skylight",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	dubiousdream: {
		num: 668115,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Dubious Dream",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	nightmareproject: {
		num: 668116,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Nightmare Project",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	cementblast: {
		num: 668117,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Cement Blast",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Rock",
		isNonstandard: "Future",
	},
	snowblind: {
		num: 668118,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Snow Blind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	silentsteps: {
		num: 668119,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Silent Steps",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Sound",
		isNonstandard: "Future",
	},
	enchant: {
		num: 668120,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Enchant",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	mistletoe: {
		num: 668121,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Mistletoe",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	claypulse: {
		num: 668122,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Clay Pulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		isNonstandard: "Future",
	},
	warmupflex: {
		num: 668123,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Warmup Flex",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
	},
	antstrength: {
		num: 668124,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Ant Strength",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	freezerburn: {
		num: 668125,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Freezer Burn",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	percussiveslap: {
		num: 668126,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Percussive Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	capoeira: {
		num: 668127,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Capoeira",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fighting",
		isNonstandard: "Future",
	},
	jailbreak: {
		num: 668128,
		accuracy: 95,
		basePower: 40,
		category: "Physical",
		name: "Jailbreak",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Jailbreak', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Jailbreak', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Jailbreak', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Jailbreak', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	tiptoe: {
		num: 668129,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tiptoe",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			evasion: 3,
			spe: -3,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	woodenfang: {
		num: 668130,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Wooden Fang",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	shipwreck: {
		num: 668131,
		accuracy: 85,
		basePower: 150,
		category: "Physical",
		name: "Shipwreck",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	weld: {
		num: 668132,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Weld",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Fire",
		isNonstandard: "Future",
	},
	finalsting: {
		num: 668133,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Final Sting",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	sharkbite: {
		num: 668134,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Shark Bite",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	chainrattle: {
		num: 668135,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Chain Rattle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	paddedroom: {
		num: 668136,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Padded Room",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		pseudoWeather: 'paddedroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onFieldStart(target, source) {
				if (source?.hasAbility('persistent')) {
					this.add('-fieldstart', 'move: Padded Room', '[of] ' + source, '[persistent]');
				} else {
					this.add('-fieldstart', 'move: Padded Room', '[of] ' + source);
				}
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('paddedroom');
			},
			
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					const move = this.dex.moves.get(moveSlot.id);
					if (move.flags['contact'] && move.id !== 'mefirst') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && !move.isMax && move.flags['contact'] && move.id !== 'mefirst') {
					this.add('cant', attacker, 'move: Padded Room', move);
					return false;
				}
			},
			
		},
		secondary: null,
		target: "scripted",
		type: "Fabric",
		isNonstandard: "Future",
	},
	healingcircle: {
		num: 668137,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Healing Circle",
		pp: 5,
		priority: 0,
		slotCondition: 'Healing Circle',
		condition: {
			duration: 2,
			onStart(pokemon, source) {
				this.effectState.hp = source.maxhp / 2;
			},
			onResidualOrder: 4,
			onEnd(target) {
				if (target && !target.fainted) {
					const damage = this.heal(this.effectState.hp, target, target);
					if (damage) {
						this.add('-heal', target, target.getHealth, '[from] move: Healing Circle', '[wisher] ' + this.effectState.source.name);
					}
				}
			},
		},
		flags: {reflectable: 1},
		secondary: null,
		target: "allySide",
		type: "Magic",
		isNonstandard: "Future",
	},
	mowdown: {
		num: 668138,
		accuracy: 100,
		basePower: 135,
		category: "Physical",
		name: "Mow Down",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	speedsap: {
		num: 668139,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Speed Sap",
		pp: 10,
		priority: 0,
		onHit(target, source) {
			if (target.boosts.spe === -6) return false;
			const spe = target.getStat('spe', false, true);
			const success = this.boost({spe: -1}, target, source, null, false, true);
			return !!(this.heal(spe, source, target) || success);
		},
		flags: {protect: 1, reflectable: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	skitter: {
		num: 668140,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Skitter",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	elegy: {
		num: 668141,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Elegy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	grapple: {
		num: 668142,
		accuracy: 90,
		basePower: 105,
		category: "Physical",
		name: "Grapple",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	rustspray: {
		num: 668143,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Rust Spray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	heatsap: {
		num: 668144,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Heat Sap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	hardeningtackle: {
		num: 668145,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Hardening Tackle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	heartless: {
		num: 668146,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Heartless",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	jackpot: {
		num: 668147,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Jackpot",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	steam: {
		num: 668148,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Steam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	ignite: {
		num: 668149,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Ignite",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	icyterrain: {
		num: 668150,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Icy Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Ice",
		isNonstandard: "Future",
	},
	figureeight: {
		num: 668151,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Figure Eight",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Ice",
		isNonstandard: "Future",
	},
	passion: {
		num: 668152,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Passion",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	soakhorn: {
		num: 668153,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Soak Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	scarletrhapsody: {
		num: 668154,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Scarlet Rhapsody",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	dragonjewels: {
		num: 668155,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Dragon Jewels",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	buddhasbowl: {
		num: 668156,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "Buddha's Bowl",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	fireratrobe: {
		num: 668157,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Fire Rat Robe",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	cowrieshell: {
		num: 668158,
		accuracy: 95,
		basePower: 150,
		category: "Special",
		name: "Cowrie Shell",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	sakedrink: {
		num: 668159,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sake Drink",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	cryptid: {
		num: 668160,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Cryptid",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	itembox: {
		num: 668161,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Item Box",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	greenshell: {
		num: 668162,
		accuracy: 95,
		basePower: 40,
		category: "Physical",
		name: "Green Shell",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	"3greenshells": {
		num: 668163,
		accuracy: 85,
		basePower: 40,
		category: "Physical",
		name: "3 Green Shells",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	redshell: {
		num: 668164,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Red Shell",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	"3redshells": {
		num: 668165,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "3 Red Shells",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	bananapeel: {
		num: 668166,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Banana Peel",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	triplebananas: {
		num: 668167,
		accuracy: 85,
		basePower: 40,
		category: "Physical",
		name: "Triple Bananas",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	mushroomboost: {
		num: 668168,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Mushroom Boost",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	triplemushroom: {
		num: 668169,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Triple Mushroom",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	goldenmushroom: {
		num: 668170,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Golden Mushroom",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	fireflower: {
		num: 668171,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Fire Flower",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	starman: {
		num: 668172,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Starman",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	blooper: {
		num: 668173,
		accuracy: 95,
		basePower: 50,
		category: "Special",
		name: "Blooper",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	spinyshell: {
		num: 668174,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Spiny Shell",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	bobomb: {
		num: 668175,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Bob-Omb",
		pp: 5,
		priority: -1,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	bulletbill: {
		num: 668176,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Bullet Bill",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	boomerangflower: {
		num: 668177,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Boomerang Flower",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	superhorn: {
		num: 668178,
		accuracy: 90,
		basePower: 125,
		category: "Special",
		name: "Super Horn",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Sound",
		isNonstandard: "Future",
	},
	ghost: {
		num: 668179,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	fakeitembox: {
		num: 668180,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Fake Item Box",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	submerge: {
		num: 668182,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Submerge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	springcleaning: {
		num: 668183,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spring Cleaning",
		pp: 5,
		priority: 0,
		onHit(target, source, move) {
			let success = false;
			if (!target.volatiles['substitute'] || move.infiltrates) success = !!this.boost({});
			const removeTarget = [
				'reflect', 'lightscreen', 'auroraveil', 'mirageveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			const removeAll = [
				'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			for (const targetCondition of removeTarget) {
				if (target.side.removeSideCondition(targetCondition)) {
					if (!removeAll.includes(targetCondition)) continue;
					this.add('-sideend', target.side, this.dex.conditions.get(targetCondition).name, '[from] move: Spring Cleaning', '[of] ' + source);
					success = true;
				}
			}
			for (const sideCondition of removeAll) {
				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: Spring Cleaning', '[of] ' + source);
					success = true;
				}
			}
			this.field.clearTerrain();
			return success;
		},
		flags: {protect: 1, reflectable: 1, mirror: 1, bypasssub: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	acidtrap: {
		num: 668184,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Trap",
		pp: 15,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'acidtrap',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Acid Trap');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Poison')) {
					this.add('-sideend', pokemon.side, 'move: Acid Trap', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('acidtrap');
					
				} else if (pokemon.hasItem('heavydutyboots')) {
					return;
				} else if (pokemon.hasType('Food') ) {
					const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('acidtrap')), -6, 6);
					this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
				} else {
					pokemon.addVolatile('gastroacid', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Poison",
		isNonstandard: "Future",
	},
	hotcoals: {
		num: 668185,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hot Coals",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1, defrost: 1, nonsky: 1},
		sideCondition: 'hotcoals',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Hot Coals');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Magma') || pokemon.hasType('Fire')) {
					this.add('-sideend', pokemon.side, 'move: Hot Coals', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('hotcoals');
				} else if (pokemon.hasItem('heavydutyboots')) {
					return;
				} else {
					pokemon.trySetStatus('brn', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Magma",
		isNonstandard: "Future",
	},
	aciddrip: {
		num: 668186,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Acid Drip",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Poison",
		isNonstandard: "Future",
	},
	acidrain: {
		num: 668187,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Rain",
		pp: 5,
		priority: 0,
		flags: {},
		weather: 'AcidRain',
		secondary: null,
		target: "all",
		type: "Poison",
		isNonstandard: "Future",
	},
	aerialvirus: {
		num: 668188,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Aerial Virus",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		volatileStatus: 'smackdown',
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	smokestack: {
		num: 668189,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Smoke Stack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	nightcall: {
		num: 668190,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Night Call",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	bury: {
		num: 668191,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Bury",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	greenhousegas: {
		num: 668192,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Greenhouse Gas",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Poison",
		isNonstandard: "Future",
	},
	marshyterrain: {
		num: 668193,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Marshy Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Ground",
		isNonstandard: "Future",
	},
	muffa: {
		num: 668194,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Muffa",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Ground",
		isNonstandard: "Future",
	},
	bonewand: {
		num: 668195,
		accuracy: 90,
		basePower: 75,
		category: "Special",
		name: "Bone Wand",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bone: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	bonesword: {
		num: 668196,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Bone Sword",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bone: 1, coral: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	mudslide: {
		num: 668197,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Mudslide",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ground",
		isNonstandard: "Future",
	},
	gasoline: {
		num: 668198,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Gasoline",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	oildrench: {
		num: 668199,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Oil Drench",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	pacify: {
		num: 668200,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Pacify",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		volatileStatus: 'pacify',
		condition: {
			duration: 4,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'move: Pacify');
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'move: Pacify');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					const move = this.dex.moves.get(moveSlot.id);
					if (move.category !== 'Status' && move.id !== 'mefirst') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && !move.isMax && move.category !== 'Status' && move.id !== 'mefirst') {
					this.add('cant', attacker, 'move: Pacify', move);
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	bonfire: {
		num: 668201,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bonfire",
		pp: 10,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "allySide",
		type: "Fire",
		isNonstandard: "Future",
	},
	magnetize: {
		num: 668202,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Magnetize",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	metallurgy: {
		num: 668203,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Metallurgy",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	rockgather: {
		num: 668204,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rock Gather",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		heal: [1, 3],
		boosts: {
			def: 1,
		},
		secondary: null,
		target: "self",
		type: "Rock",
		isNonstandard: "Future",
	},
	whet: {
		num: 668205,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Whet",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Rock",
		isNonstandard: "Future",
	},
	illusionarydominance: {
		num: 668206,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "IllusionaryDominance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	spelunk: {
		num: 668207,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Spelunk",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	batteringram: {
		num: 668208,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Battering Ram",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	tailclub: {
		num: 668209,
		accuracy: 75,
		basePower: 70,
		category: "Physical",
		name: "Tail Club",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	fantasynature: {
		num: 668210,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Fantasy Nature",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	coinflipheads: {
		num: 668211,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coin Flip Heads",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	coinfliptails: {
		num: 668212,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coin Flip Tails",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	tails: {
		num: 668213,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Tails",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	heads: {
		num: 668214,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Heads",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	sealbreak: {
		num: 668217,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Seal Break",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Dark",
		isNonstandard: "Future",
	},
	umbrella: {
		num: 668218,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Umbrella",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Water",
		isNonstandard: "Future",
	},
	dragonjet: {
		num: 668219,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Dragon Jet",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	telepathy: {
		num: 668220,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Telepathy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	christmasspirit: {
		num: 668221,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Christmas Spirit",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Ice",
		isNonstandard: "Future",
	},
	rubbercoat: {
		num: 668222,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rubber Coat",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberpower: {
		num: 668223,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Rubber Power",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	steampunch: {
		num: 668224,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Steam Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	terrahammer: {
		num: 668225,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Terra Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		recoil: [33, 100],
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	icebreaker: {
		num: 668226,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Icebreaker",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Ice Breaker only works on your first turn out.");
				return false;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	rosecannon: {
		num: 668227,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Rose Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	timeloop: {
		num: 668228,
		accuracy: 90,
		basePower: 55,
		category: "Special",
		name: "Time Loop",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	eraser: {
		num: 668230,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Eraser",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberbullets: {
		num: 668231,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		name: "Rubber Bullets",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubout: {
		num: 668232,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Rub Out",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	elasticbind: {
		num: 668233,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Elastic Bind",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	bandshot: {
		num: 668234,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Band Shot",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberwhip: {
		num: 668235,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Rubber Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubbermallet: {
		num: 668236,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Rubber Mallet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberbeams: {
		num: 668237,
		accuracy: 95,
		basePower: 25,
		category: "Special",
		name: "Rubber Beams",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	seasoning: {
		num: 668238,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Seasoning",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	flourtoss: {
		num: 668239,
		accuracy: 100,
		basePower: 25,
		category: "Special",
		name: "Flour Toss",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	poundcake: {
		num: 668240,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Pound Cake",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	snackbait: {
		num: 668241,
		accuracy: 70,
		basePower: 0,
		category: "Status",
		name: "Snack Bait",
		pp: 5,
		priority: -1,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	foodfight: {
		num: 668242,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Food Fight",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	creamwhip: {
		num: 668243,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Cream Whip",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	skyfang: {
		num: 668244,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Sky Fang",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	sharpeningfang: {
		num: 668245,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Sharpening Fang",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	specialorder: {
		num: 668246,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Special Order",
		pp: 15,
		priority: 0,
		flags: {},onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Food' && move.id !== 'specialorder'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	mortalcoil: {
		num: 668247,
		accuracy: 85,
		basePower: 70,
		category: "Special",
		name: "Mortal Coil",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	fellswoop: {
		num: 668248,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Fell Swoop",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	overflow: {
		num: 668249,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Overflow",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	flintstrike: {
		num: 668250,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Flint Strike",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	brambles: {
		num: 668251,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Brambles",
		pp: 10,
		priority: 0,
		flags: {reflectable: 1},
		sideCondition: 'brambles',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Brambles');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('brambles')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Grass",
		isNonstandard: "Future",
	},
	terrify: {
		num: 668252,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Terrify",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	lightspeed: {
		num: 668253,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Light Speed",
		pp: 5,
		priority: 3,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	pollenseason: {
		num: 668254,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Pollen Season",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Grass",
		isNonstandard: "Future",
	},
	lastjudgement: {
		num: 668255,
		accuracy: 90,
		basePower: 200,
		category: "Special",
		name: "Last Judgement",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	abyssnova: {
		num: 668256,
		accuracy: 95,
		basePower: 180,
		category: "Special",
		name: "Abyss Nova",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	waveleaderfan: {
		num: 668257,
		accuracy: 90,
		basePower: 200,
		category: "Special",
		name: "Wave Leader Fan",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	phoebuscatastrophe: {
		num: 668258,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Phoebus Catastrophe",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	agriusmetamorphosis: {
		num: 668259,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "AgriusMetamorphosis",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			atk: 3,
			spa: 3,
		},
		volatileStatus: 'confusion',
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	stonersunshine: {
		num: 668260,
		accuracy: 90,
		basePower: 200,
		category: "Special",
		name: "STONER SUNSHINE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	swordcounter: {
		num: 668261,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Sword Counter",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	forwardsmash: {
		num: 668262,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Forward Smash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	bladedance: {
		num: 668263,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Blade Dance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	shieldbreaker: {
		num: 668266,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Shieldbreaker",
		pp: 10,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	doubleedgedance: {
		num: 668267,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "DoubleEdgeDance",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	flareblade: {
		num: 668268,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "Flare Blade",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	bedrockpress: {
		num: 668269,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Bedrock Press",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	barrierattack: {
		num: 668270,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Barrier Attack",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	soniccharge: {
		num: 668271,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Sonic Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	foulnote: {
		num: 668272,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Foul Note",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	sirensong: {
		num: 668273,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Siren Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	vibrato: {
		num: 668274,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Vibrato",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	beatmatch: {
		num: 668275,
		accuracy: 95,
		basePower: 40,
		category: "Special",
		name: "Beatmatch",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	risingsun: {
		num: 668277,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Rising Sun",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	sunrise: {
		num: 668278,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Sunrise",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	magmaclamp: {
		num: 668279,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Magma Clamp",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	rake: {
		num: 668280,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Rake",
		pp: 15,
		priority: 0,
		secondary: {
			chance: 15,
			volatileStatus: 'bleed',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	hotblooded: {
		num: 668281,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hot Blooded",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodyrage: {
		num: 668282,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Bloody Rage",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodbath: {
		num: 668283,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Bloodbath",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Blood",
		isNonstandard: "Future",
	},
	clarentbloodarthur: {
		num: 668284,
		accuracy: 90,
		basePower: 165,
		category: "Special",
		name: "ClarentBloodArthur",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bridalchest: {
		num: 668285,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Bridal Chest",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	summonminions: {
		num: 668286,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Minions",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	summonhorrors: {
		num: 668287,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Horrors",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		overrideDefensiveStat: 'def',
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	viaexpugnatio: {
		num: 668288,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Via Expugnatio",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 10],
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	fieryheaven: {
		num: 668289,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Fiery Heaven",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	chaosheaven: {
		num: 668290,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Chaos Heaven",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	frigidheaven: {
		num: 668291,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Frigid Heaven",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Ice', type);
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	amaterasublessing: {
		num: 668292,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "AmaterasuBlessing",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	unlimitedbladeworks: {
		num: 668293,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "UnlimitedBladeWorks",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Steel",
		isNonstandard: "Future",
	},
	lablackluna: {
		num: 668294,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "La Black Luna",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	trapofargalia: {
		num: 668295,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "TrapOfArgalia",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	hippogriff: {
		num: 668296,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Hippogriff",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	casseurdelogistelle: {
		num: 668297,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "CasseurDeLogistelle",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	crossfirehurricane: {
		num: 668298,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "CrossfireHurricane",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	oraora: {
		num: 668299,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Ora Ora",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	aargh: {
		num: 668300,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "AARGH",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	cruciatu: {
		num: 668301,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Cruciatu",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	lapucelle: {
		num: 668302,
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "La Pucelle",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	grondementduhaine: {
		num: 668303,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "GrondementDuHaine",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	legendofdracula: {
		num: 668304,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Legend of Dracula",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	ninelives: {
		num: 668305,
		accuracy: 90,
		basePower: 9,
		category: "Physical",
		name: "Nine Lives",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	rangingshot: {
		num: 668306,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Ranging Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	divinearrows: {
		num: 668307,
		accuracy: 90,
		basePower: 20,
		category: "Special",
		name: "Divine Arrows",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	scouting: {
		num: 668308,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Scouting",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	antaressnipe: {
		num: 668309,
		accuracy: true,
		basePower: 100,
		category: "Special",
		name: "Antares Snipe",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	warshout: {
		num: 668310,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "War Shout",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fighting",
		isNonstandard: "Future",
	},
	pindown: {
		num: 668311,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Pin Down",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	headshot: {
		num: 668312,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Headshot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	marktarget: {
		num: 668313,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Mark Target",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	steadyshot: {
		num: 668314,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Steady Shot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	shootdown: {
		num: 668315,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Shoot Down",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	arrowvolley: {
		num: 668316,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Arrow Volley",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		isNonstandard: "Future",
	},
	summongolems: {
		num: 668317,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Golems",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	kanshoubakuya: {
		num: 668318,
		accuracy: 90,
		basePower: 55,
		category: "Physical",
		name: "Kanshou Bakuya",
		pp: 10,
		priority: 0,
		multihit: 2,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	enkidu: {
		num: 668319,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Enkidu",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	vimana: {
		num: 668320,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Vimana",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	electricchair: {
		num: 668321,
		accuracy: 30,
		basePower: 1,
		category: "Special",
		name: "Electric Chair",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	hangmannoose: {
		num: 668322,
		accuracy: 30,
		basePower: 1,
		category: "Physical",
		name: "Hangman Noose",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		ohko: true,
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	lethalinjection: {
		num: 668323,
		accuracy: 30,
		basePower: 1,
		category: "Physical",
		name: "Lethal Injection",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	thuanthien: {
		num: 668324,
		accuracy: 90,
		basePower: 165,
		category: "Physical",
		name: "Thuan Thien",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	mariatheripper: {
		num: 668325,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Maria the Ripper",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	ketermalkuth: {
		num: 668326,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Keter Malkuth",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	troiastragoidia: {
		num: 668327,
		accuracy: 100,
		basePower: 0,
		category: "Physical",
		name: "Troias Tragoidia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		basePowerCallback(pokemon, target) {
			let ratio = Math.floor(pokemon.getStat('spe') / target.getStat('spe'));
			if (!isFinite(ratio)) ratio = 0;
			const bp = [40, 60, 80, 120, 150][Math.min(ratio, 4)];
			this.debug('BP: ' + bp);
			return bp;
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	akhilleuskosmos: {
		num: 668328,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Akhilleus Kosmos",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	pumpup: {
		num: 668329,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pump Up",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Fighting",
		isNonstandard: "Future",
	},
	charisma: {
		num: 668330,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Charisma",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "adjacentAlly",
		type: "Heart",
		isNonstandard: "Future",
	},
	hanginggardenbabylon: {
		num: 668331,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "HangingGardenBabylon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Magic",
		isNonstandard: "Future",
	},
	basmu: {
		num: 668332,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Basmu",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	dovescouts: {
		num: 668333,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Dove Scouts",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	gigantomachia: {
		num: 668334,
		accuracy: 90,
		basePower: 180,
		category: "Physical",
		name: "Gigantomachia",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	vortigern: {
		num: 668335,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Vortigern",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	hrunting: {
		num: 668336,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "Hrunting",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	caladbolgii: {
		num: 668337,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Caladbolg II",
		pp: 5,
		priority: 2,
		flags: {arrow: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	zarich: {
		num: 668338,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Zarich",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	tawrich: {
		num: 668339,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Tawrich",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	blackkey: {
		num: 668340,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Black Key",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	twinarmbigcrunch: {
		num: 668341,
		accuracy: true,
		basePower: 70,
		category: "Special",
		name: "TwinArm BigCrunch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Chaos",
		isNonstandard: "Future",
	},
	leftarmxanadumatrix: {
		num: 668342,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "LeftArmXanaduMatrix",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	rightarmevileater: {
		num: 668343,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "RightArmEvilEater",
		pp: 10,
		priority: 2,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	saintwarorder: {
		num: 668344,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Saint War Order",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	stella: {
		num: 668345,
		accuracy: 100,
		basePower: 250,
		category: "Physical",
		name: "Stella",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		selfdestruct: "always",
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	abyssusdraconis: {
		num: 668346,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Abyssus Draconis",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	bayard: {
		num: 668347,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Bayard",
		pp: 10,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	ascalon: {
		num: 668348,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Ascalon",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	interfectumdracones: {
		num: 668349,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Interfectum Dracones",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	dragonaxe: {
		num: 668350,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Dragon Axe",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	uprising: {
		num: 668351,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Uprising",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	laststand: {
		num: 668352,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Last Stand",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	bathoryerzsebet: {
		num: 668353,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Bathory Erzsebet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
	},
	tyrantroar: {
		num: 668354,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Tyrant Roar",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	marvelousexploits: {
		num: 668355,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Marvelous Exploits",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Wood",
		isNonstandard: "Future",
	},
	wisconsindeathtrip: {
		num: 668356,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "WisconsinDeathTrip",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	beansouplake: {
		num: 668357,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bean Soup Lake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "allySide",
		type: "Food",
		isNonstandard: "Future",
	},
	popcornstorm: {
		num: 668358,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Popcorn Storm",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	lifesurge: {
		num: 668359,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Life Surge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "allySide",
		type: "Fairy",
		isNonstandard: "Future",
	},
	eyeofeuryale: {
		num: 668360,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Eye of Euryale",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	smileofstheno: {
		num: 668361,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Smile of Stheno",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	divinebeauty: {
		num: 668362,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Divine Beauty",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 70,
			volatileStatus: 'attract',
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	cupidarrow: {
		num: 668363,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Cupid Arrow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	brokenheart: {
		num: 668364,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Broken Heart",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	goldwildhunt: {
		num: 668365,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Gold Wild Hunt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	piratecharge: {
		num: 668366,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Pirate Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Pirate Charge', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Pirate Charge', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	opulencecatnap: {
		num: 668367,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Opulence Catnap",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	collapse: {
		num: 668368,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Collapse",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		isNonstandard: "Future",
	},
	ageofbabylon: {
		num: 668369,
		accuracy: 90,
		basePower: 1,
		category: "Special",
		name: "Age of Babylon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	attackup: {
		num: 668371,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Attack Up",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Normal",
		isNonstandard: "Future",
	},
	dualscreens: {
		num: 668372,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dual Screens",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		isNonstandard: "Future",
	},
	critup: {
		num: 668373,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Crit Up",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Normal",
		isNonstandard: "Future",
	},
	healparty: {
		num: 668374,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heal Party",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Normal",
		isNonstandard: "Future",
	},
	marchenmeineslebens: {
		num: 668375,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "MarchenMeinesLebens",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Paper",
		isNonstandard: "Future",
	},
	yewbow: {
		num: 668376,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Yew Bow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	poisonarrow: {
		num: 668377,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Poison Arrow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	explosivearrow: {
		num: 668378,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Explosive Arrow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	mayking: {
		num: 668379,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "May King",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	sabotage: {
		num: 668380,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Sabotage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	poisondart: {
		num: 668381,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		name: "Poison Dart",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	cryaa: {
		num: 668382,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Cryaa",
		pp: 40,
		priority: 3,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	bloodsoldiers: {
		num: 668383,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Blood Soldiers",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	myredmead: {
		num: 668384,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "My Red Mead",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	chariotmylove: {
		num: 668385,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Chariot My Love",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	aaryc: {
		num: 668386,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "aaryC",
		pp: 40,
		priority: 3,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	glitchguard: {
		num: 668387,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Glitch Guard",
		pp: 1,
		priority: 3,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Cyber",
		isNonstandard: "Future",
	},
	delusionalpoisonbody: {
		num: 668388,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "DelusionalPoisonBody",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	poisonexplosion: {
		num: 668389,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Poison Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Poison",
		isNonstandard: "Future",
	},
	poisondagger: {
		num: 668390,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Poison Dagger",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	nurseryrhyme: {
		num: 668391,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Nursery Rhyme",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	junglefever: {
		num: 668392,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Jungle Fever",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Grass",
		isNonstandard: "Future",
	},
	comfycoil: {
		num: 668393,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Comfy Coil",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fabric",
		isNonstandard: "Future",
	},
	queensglassgame: {
		num: 668394,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Queens Glass Game",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Time",
		isNonstandard: "Future",
	},
	dragonslash: {
		num: 668395,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Dragon Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	rhongomyniad: {
		num: 668396,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Rhongomyniad",
		pp: 5,
		priority: 2,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	asteroid: {
		num: 668397,
		accuracy: 90,
		basePower: 160,
		category: "Physical",
		name: "Asteroid",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	warpdrive: {
		num: 668398,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Warp Drive",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	solarflare: {
		num: 668399,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Solar Flare",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	deepimpact: {
		num: 668400,
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		name: "Deep Impact",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	icecomet: {
		num: 668401,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Ice Comet",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	moonjump: {
		num: 668402,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Moon Jump",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bounce: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	closeencounter: {
		num: 668403,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Close Encounter",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	jabberwock: {
		num: 668404,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Jabberwock",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	godforce: {
		num: 668405,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "God Force",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	doublepeck: {
		num: 668406,
		accuracy: 95,
		basePower: 35,
		category: "Physical",
		name: "Double Peck",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	witherbreath: {
		num: 668407,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Wither Breath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	ghastlyhand: {
		num: 668408,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Ghastly Hand",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Ghastly Hand only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	deadweight: {
		num: 668410,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Dead Weight",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	heavenshole: {
		num: 668411,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Heaven's Hole",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "allAdjacentFoes",
		type: "Chaos",
		isNonstandard: "Future",
	},
	angramainyuccc: {
		num: 668412,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "AngraMainyu CCC",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Heart",
		isNonstandard: "Future",
	},
	sinpulse: {
		num: 668413,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Sin Pulse",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	failnaught: {
		num: 668414,
		accuracy: true,
		basePower: 120,
		category: "Special",
		name: "Failnaught",
		pp: 5,
		priority: 0,
		flags: {arrow: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	harpofhealing: {
		num: 668415,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Harp of Healing",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "allySide",
		type: "Sound",
		isNonstandard: "Future",
	},
	paintball: {
		num: 668416,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Paintball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	paint: {
		num: 668417,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Paint",
		pp: 10,
		priority: 0,
		volatileStatus: 'paint',
		condition: {
			duration: 6,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'Paint');
			},
			onEffectivenessPriority: -2,
			onEffectiveness(typeMod, target, type, move) {
				if (move.type !== 'Paint') return;
				if (!target) return;
				if (type !== target.getTypes()[0]) return;
				return typeMod + 1;
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'move: Paint');
			},
		},
		secondary: {
			chance: 100,
			
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						def: -2,
						spd: -2
						
					});
					
				} else {
						
					};
				}
			},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	heavyhue: {
		num: 668418,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Heavy Hue",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'paint',
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						def: -1,
						
					});
					
				} else {
						
					};
				}
			},
		
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	bucketbomb: {
		num: 668419,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Bucket Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 40,
			volatileStatus: 'paint',
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						spd: -1
					});
				} else {
					this.boost({
						
					});
				}
		},
		},
		target: "allAdjacent",
		type: "Paint",
		isNonstandard: "Future",
	},
	paintroller: {
		num: 668420,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Paint Roller",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 50,
			onHit(target) {
				if (this.field.getPseudoWeather('artgallery')) {
					this.boost({
						atk: 1,
						spe: 1,
					});
				} else {
					this.boost({
						atk: 1,
					});
				}
			},
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	dragonlance: {
		num: 668421,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Dragon Lance",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	shadowjavelin: {
		num: 668422,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Shadow Javelin",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	gardenofavalon: {
		num: 668424,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Garden of Avalon",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Magic",
		isNonstandard: "Future",
	},
	mesektet: {
		num: 668425,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Mesektet",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	summonsphinx: {
		num: 668427,
		accuracy: 85,
		basePower: 30,
		category: "Special",
		name: "Summon Sphinx",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	ramesseumtentyris: {
		num: 668428,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Ramesseum Tentyris",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 80,
			volatileStatus: 'disable',
		},
		status: 'psn',
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	nosecondstrike: {
		num: 668429,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "No Second Strike",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	sphereboundary: {
		num: 668430,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sphere Boundary",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	wardance: {
		num: 668431,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "War Dance",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "randomNormal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	grendelbuster: {
		num: 668432,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Grendel Buster",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	naegling: {
		num: 668433,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Naegling",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	excaliburgalatine: {
		num: 668434,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Excalibur Galatine",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},
	shinecharge: {
		num: 668435,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Shine Charge",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	tectonicslam: {
		num: 668436,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Tectonic Slam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	loosegoose: {
		num: 668437,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Loose Goose",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Flying",
		isNonstandard: "Future",
	},
	greasesplat: {
		num: 668438,
		accuracy: 95,
		basePower: 76,
		category: "Special",
		name: "Grease Splat",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	brynhildrromantia: {
		num: 668439,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "BrynhildrRomantia",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	freyjavenus: {
		num: 668440,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Freyja Venus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	brynhildrkomedia: {
		num: 668441,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "BrynhildrKomedia",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	agecurse: {
		num: 668442,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Age Curse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	decaytouch: {
		num: 668443,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Decay Touch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	dusttodust: {
		num: 668444,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Dust to Dust",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	darkerpulse: {
		num: 668445,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Darker Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	azrael: {
		num: 668446,
		accuracy: 65,
		basePower: 100,
		category: "Physical",
		name: "Azrael",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	ghostcamera: {
		num: 668447,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Ghost Camera",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	computercrash: {
		num: 668448,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Computer Crash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Cyber",
		isNonstandard: "Future",
	},
	dialup: {
		num: 668449,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Dial Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	pentagramstamp: {
		num: 668450,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Pentagram Stamp",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	heavenlight: {
		num: 668451,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Heaven Light",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	degreeburn: {
		num: 668452,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Degree Burn",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},
	vomit: {
		num: 668453,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Vomit",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	spiritsquash: {
		num: 668454,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Spirit Squash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	sledgehammer: {
		num: 668455,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Sledge Hammer",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	slowdown: {
		num: 668456,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Slowdown",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	megadrill: {
		num: 668457,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Megadrill",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	volttrap: {
		num: 668458,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "Volt Trap",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	psypunch: {
		num: 668459,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Psypunch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	contaminate: {
		num: 668460,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Contaminate",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Virus",
		isNonstandard: "Future",
	},
	vinechain: {
		num: 668461,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Vine Chain",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	extract: {
		num: 668462,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Extract",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	pixelcannon: {
		num: 668463,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Pixel Cannon",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	datastorm: {
		num: 668464,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Data Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cyber",
		isNonstandard: "Future",
	},
	greedincarnate: {
		num: 668465,
		accuracy: 95,
		basePower: 125,
		category: "Physical",
		name: "Greed Incarnate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Greed Incarnate', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Greed Incarnate', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	freezethem: {
		num: 668466,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Freeze Them",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	blitzkreig: {
		num: 668467,
		accuracy: 95,
		basePower: 28,
		category: "Physical",
		name: "Blitzkreig",
		pp: 10,
		priority: 1,
		multihit: [2, 5],
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	curveball: {
		num: 668469,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Curve Ball",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	lasso: {
		num: 668470,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Lasso",
		pp: 20,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	powernap: {
		num: 668471,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Nap",
		pp: 10,
		priority: 0,
		onTry(source) {
			if (source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz')) return false;

			if (source.hp === source.maxhp) {
				this.add('-fail', source, 'heal');
				return null;
			}
			if (source.hasAbility(['insomnia', 'vitalspirit'])) {
				this.add('-fail', source, '[from] ability: ' + source.getAbility().name, '[of] ' + source);
				return null;
			}
		},
		onHit(target, source, move) {
			const result = target.setStatus('slp', source, move);
			if (!result) return result;
			target.statusState.time = 2;
			target.statusState.startTime = 2;
			this.heal(target.baseMaxhp / 2); // Aesthetic only as the healing happens after you fall asleep in-game
		},
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	icarussoar: {
		num: 668472,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Icarus Soar",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	library: {
		num: 668473,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Library",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Paper",
		isNonstandard: "Future",
	},
	dizzyray: {
		num: 668474,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Dizzy Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	teardropphotonray: {
		num: 668475,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "TeardropPhotonRay",
		pp: 5,
		priority: 0,
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		flags: {protect: 1, mirror: 1},
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	guillotinebreaker: {
		num: 668476,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Guillotine Breaker",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Glass",
		isNonstandard: "Future",
	},
	crystalpalace: {
		num: 668477,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Crystal Palace",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Crystal",
		isNonstandard: "Future",
	},
	princessloveliness: {
		num: 668478,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Princess Loveliness",
		pp: 10,
		priority: 4,
		flags: {},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	lightsaber: {
		num: 668479,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Light Saber",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	boyiiman: {
		num: 668480,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Boy II Man",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	uraniumheatbeam: {
		num: 668481,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Uranium Heat Beam",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	drown: {
		num: 668493,
		accuracy: 40,
		basePower: 1,
		category: "Special",
		name: "Drown",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	halo: {
		num: 668494,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Halo",
		pp: 10,
		priority: 0,
		volatileStatus: 'halo',
		condition: {
			onStart(pokemon) {
				this.add('-start', pokemon, 'Halo');
			},
			onResidualOrder: 6,
			onResidual(pokemon) {
				this.heal(pokemon.baseMaxhp / 14);
			},
		},
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	wickerman: {
		num: 668495,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Wickerman",
		volatileStatus: 'partiallytrapped',
		status: 'brn',
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	ochddeugodin: {
		num: 668496,
		accuracy: true,
		basePower: 70,
		category: "Special",
		name: "Ochd Deug Odin",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	thecut: {
		num: 668497,
		accuracy: 95,
		basePower: 105,
		category: "Physical",
		name: "The Cut",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	rootdrain: {
		num: 668498,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Root Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	corpsecart: {
		num: 668499,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Corpse Cart",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	soulsword: {
		num: 668500,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Soul Sword",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	crystalize: {
		num: 668501,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Crystalize",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Crystal",
		isNonstandard: "Future",
	},
	faedance: {
		num: 668502,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Fae Dance",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, dance: 1},
		secondary: null,
		target: "randomNormal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	powerdrain: {
		num: 668503,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Power Drain",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	hibernation: {
		num: 668504,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hibernation",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	eldritchpower: {
		num: 668505,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "EldritchPower",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	steamvortex: {
		num: 668506,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Steam Vortex",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	cutebetrayal: {
		num: 668507,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Cute Betrayal",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	filthbomb: {
		num: 668508,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Filth Bomb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: {
			chance: 100,
			status: 'psn',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	insectdecay: {
		num: 668509,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Insect Decay",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	nanobotbarrier: {
		num: 668510,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nanobot Barrier",
		pp: 1,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	ragingchaos: {
		num: 668511,
		accuracy: 95,
		basePower: 10,
		category: "Physical",
		name: "Raging Chaos",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	divinefacade: {
		num: 668512,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Divine Facade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.status && pokemon.status !== 'slp') {
				return this.chainModify(2);
			}
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	demonsdeath: {
		num: 668513,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Demons Death",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('bleed');
				target.addVolatile('curse');
				target.addVolatile('block');
				target.addVolatile('healblock');
			}
		},
		secondary: null,
		status: 'psn',
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	creammissiles: {
		num: 668514,
		accuracy: 95,
		basePower: 20,
		category: "Special",
		name: "Cream Missiles",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			volatileStatus: 'confusion',
		},
		multihit: [2, 5],
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	creamfinale: {
		num: 668515,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "CREAMFINALE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	windrage: {
		num: 668516,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "WINDRAGE",
		pp: 5,
		priority: 0,
		onHit(target, source, move) {
			let success = false;
			if (!target.volatiles['substitute'] || move.infiltrates) success = !!this.boost({evasion: -1});
			const removeTarget = [
				'reflect', 'lightscreen', 'auroraveil', 'mirageveil', 'safeguard', 'mist', 'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			const removeAll = [
				'spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
				'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles',
			];
			for (const targetCondition of removeTarget) {
				if (target.side.removeSideCondition(targetCondition)) {
					if (!removeAll.includes(targetCondition)) continue;
					this.add('-sideend', target.side, this.dex.conditions.get(targetCondition).name, '[from] move: WINDRAGE', '[of] ' + source);
					success = true;
				}
			}
			for (const sideCondition of removeAll) {
				if (source.side.removeSideCondition(sideCondition)) {
					this.add('-sideend', source.side, this.dex.conditions.get(sideCondition).name, '[from] move: WINDRAGE', '[of] ' + source);
					success = true;
				}
			}
			this.field.clearTerrain();
			return success;
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Flying",
		isNonstandard: "Future",
	},
	stonesurge: {
		num: 668517,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "STONESURGE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	parasitevirus: {
		num: 668518,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Parasite Virus",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	thousandyoung: {
		num: 668519,
		accuracy: 90,
		basePower: 6,
		category: "Special",
		name: "Thousand Young",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	rerorero: {
		num: 668520,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Rero Rero",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	nuclearsting: {
		num: 668521,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Nuclear Sting",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	arcticwind: {
		num: 668522,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Arctic Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	glassball: {
		num: 668523,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Glass Ball",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	glassdefense: {
		num: 668524,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Glass Defense",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Glass",
		isNonstandard: "Future",
	},
	glasssparkle: {
		num: 668525,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Glass Sparkle",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	tubebind: {
		num: 668526,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Tube Bind",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	breaststroke: {
		num: 668527,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Breast Stroke",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	colorwheel: {
		num: 668528,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Color Wheel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	paintprint: {
		num: 668529,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Paint Print",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	warpaway: {
		num: 668530,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Warp Away",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	gentlyweeps: {
		num: 668531,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Gently Weeps",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	fishingrod: {
		num: 668532,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Fishing Rod",
		pp: 20,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	beachboy: {
		num: 668533,
		accuracy: 85,
		basePower: 70,
		category: "Physical",
		name: "Beach Boy",
		pp: 10,
		priority: 1,
		flags: {contact: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	mirrordimension: {
		num: 668535,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mirror Dimension",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Glass",
		isNonstandard: "Future",
	},
	deflate: {
		num: 668536,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Deflate",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	decayspray: {
		num: 668537,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Decay Spray",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	agingcurse: {
		num: 668538,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Aging Curse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	oldfist: {
		num: 668539,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Old Fist",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	agingburst: {
		num: 668540,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Aging Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Zombie",
		isNonstandard: "Future",
	},
	aging: {
		num: 668541,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Aging",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	bugnet: {
		num: 668542,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Bug Net",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	handcuffs: {
		num: 668543,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Handcuffs",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	shrink: {
		num: 668544,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Shrink",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	stompcrush: {
		num: 668545,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Stomp Crush",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	standarrow: {
		num: 668546,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stand Arrow",
		pp: 5,
		priority: 0,
		flags: {arrow: 1},
		secondary: null,
		target: "scripted",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	notchosen: {
		num: 668547,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Not Chosen",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	getstand: {
		num: 668548,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Get Stand",
		pp: 40,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	rollingstones: {
		num: 668549,
		accuracy: 50,
		basePower: 1,
		category: "Physical",
		name: "Rolling Stones",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	achtungbaby: {
		num: 668550,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Achtung Baby",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	moldburst: {
		num: 668551,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Mold Burst",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	thermalburn: {
		num: 668552,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Thermal Burn",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	anneaaa: {
		num: 668553,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "AnneAAA",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	annes: {
		num: 668554,
		accuracy: 95,
		basePower: 40,
		category: "Special",
		name: "Annes",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	crystaltail: {
		num: 668555,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Crystal Tail",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	cosmichorror: {
		num: 668556,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Cosmic Horror",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	flavortown: {
		num: 668557,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Flavor Town",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	dusttornado: {
		num: 668558,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Dust Tornado",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 50,
			boosts: {
				accuracy: -1,
			},
		},
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	cosmicgas: {
		num: 668559,
		accuracy: 75,
		basePower: 100,
		category: "Special",
		name: "Cosmic Gas",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	endtime: {
		num: 668560,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "End Time",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	saturnrings: {
		num: 668561,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Saturn Rings",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	aquabolt: {
		num: 668562,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Aquabolt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	corner: {
		num: 668563,
		accuracy: true,
		basePower: 55,
		category: "Physical",
		name: "Corner",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	dazzlepowder: {
		num: 668564,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Dazzle Powder",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	metalblast: {
		num: 668565,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Metal Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	cosmicgrasp: {
		num: 668566,
		accuracy: 90,
		basePower: 55,
		category: "Physical",
		name: "Cosmic Grasp",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	sanityleech: {
		num: 668567,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Sanity Leech",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	brandingkiss: {
		num: 668568,
		accuracy: 100,
		basePower: 25,
		category: "Special",
		name: "Branding Kiss",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	scendscale: {
		num: 668569,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Scendscale",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	eighthoctave: {
		num: 668571,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Eighth Octave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	bugzap: {
		num: 668572,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Bug Zap",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	angaltakigalshe: {
		num: 668573,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "AnGalTaKigalShe",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Heart",
		isNonstandard: "Future",
	},
	gugalannastrike: {
		num: 668574,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "GugalannaStrike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	secretcalibur: {
		num: 668575,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Secret Calibur",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	caliburn: {
		num: 668576,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Caliburn",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	dimensionofsteam: {
		num: 668577,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "DimensionOfSteam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Steam",
		isNonstandard: "Future",
	},
	summonrobots: {
		num: 668578,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Robots",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	plastichammer: {
		num: 668580,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Plastic Hammer",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	magmahammer: {
		num: 668581,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Magma Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	excaliburvivian: {
		num: 668582,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "ExcaliburVivian",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	fairytail: {
		num: 668583,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Fairy Tail",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	heartblade: {
		num: 668584,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Heart Blade",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	woodtornado: {
		num: 668585,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Wood Tornado",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	necksnap: {
		num: 668586,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Neck Snap",
		pp: 20,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	vaporguard: {
		num: 668587,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Vapor Guard",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Steam",
		isNonstandard: "Future",
	},
	venipuncture: {
		num: 668588,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Venipuncture",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	sanguinefang: {
		num: 668589,
		accuracy: 50,
		basePower: 100,
		category: "Physical",
		name: "Sanguine Fang",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	twinshit: {
		num: 668590,
		accuracy: 95,
		basePower: 1,
		category: "Physical",
		name: "Twinshit",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	mindcontrol: {
		num: 668591,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Mind Control",
		pp: 15,
		priority: 0,
		overrideOffensivePokemon: 'target',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	hallucisting: {
		num: 668592,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Hallucisting",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	pleasejusthelpme: {
		num: 668593,
		accuracy: 85,
		basePower: 80,
		category: "Special",
		name: "PleaseJustHelpMe",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				spa: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	returntozero: {
		num: 668594,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Return to Zero",
		pp: 1,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	switchblade: {
		num: 668595,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Switch Blade",
		pp: 20,
		priority: 0,
		selfSwitch: true,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	kingshammer: {
		num: 668596,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "King's Hammer",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (target.getAbility().isPermanent) return;
			target.addVolatile('gastroacid');
		},
		onAfterSubDamage(damage, target) {
			if (target.getAbility().isPermanent) return;
			target.addVolatile('gastroacid');
		},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	weakeningswipe: {
		num: 668597,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Weakening Swipe",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Normal",
		isNonstandard: "Future",
	},
	calmingpulse: {
		num: 668598,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Calming Pulse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Heart",
		isNonstandard: "Future",
	},
	nibble: {
		num: 668599,
		accuracy: 50,
		basePower: 1,
		category: "Physical",
		name: "Nibble",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	agoraphobia: {
		num: 668600,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Agoraphobia",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	hysteria: {
		num: 668601,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Hysteria",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fear",
		isNonstandard: "Future",
	},
	peanutbutter: {
		num: 668602,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Peanut Butter",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	peanutcrash: {
		num: 668603,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Peanut Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	backtothefuture: {
		num: 668604,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "BackToTheFuture",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	timeswap: {
		num: 668605,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Time Swap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	paperplane: {
		num: 668606,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Paper Plane",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	cleavage: {
		num: 668607,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Cleavage",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	undyingspear: {
		num: 668608,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Undying Spear",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	gasterblaster: {
		num: 668609,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Gaster Blaster",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	twinsteam: {
		num: 668610,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Twin Steam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	steamspout: {
		num: 668611,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Steam Spout",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Steam",
		isNonstandard: "Future",
	},
	rogafufuken: {
		num: 668612,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Roga Fufuken",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	kick: {
		num: 668613,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Kick",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	sokidan: {
		num: 668614,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Sokidan",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	jetkick: {
		num: 668615,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "Jet Kick",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	haunterdark: {
		num: 668617,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Haunter Dark",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	killingbite: {
		num: 668618,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Killing Bite",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	steamguns: {
		num: 668619,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Steam Guns",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	avasculate: {
		num: 668620,
		accuracy: 85,
		basePower: 0,
		category: "Special",
		name: "Avasculate",
		pp: 5,
		priority: 0,
		damageCallback(pokemon, target) {
			return this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 2), 1);
		},
		status: 'par',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	arcaneeye: {
		num: 668621,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Arcane Eye",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	antimagicfield: {
		num: 668622,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Antimagic Field",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	barkskin: {
		num: 668623,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Barkskin",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Wood",
		isNonstandard: "Future",
	},
	steamup: {
		num: 668624,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Steamup",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Steam",
		isNonstandard: "Future",
	},
	chaosbolt: {
		num: 668625,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Chaos Bolt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	coneofcold: {
		num: 668626,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Cone of Cold",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Magic",
		isNonstandard: "Future",
	},
	summonfey: {
		num: 668627,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Fey",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	summondragons: {
		num: 668628,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Dragons",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	summoninsects: {
		num: 668629,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Insects",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	summon: {
		num: 668630,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Summon",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Magic",
		isNonstandard: "Future",
	},
	earthbind: {
		num: 668631,
		accuracy: 90,
		basePower: 55,
		category: "Special",
		name: "Earth Bind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	inflictwounds: {
		num: 668632,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Inflict Wounds",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	farenheit451: {
		num: 668633,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Farenheit 451",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	agitatewound: {
		num: 668634,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Agitate Wound",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	undeadagony: {
		num: 668635,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Undead Agony",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	summonundead: {
		num: 668636,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Undead",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	enfeebleray: {
		num: 668637,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Enfeeble Ray",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	avadakedavra: {
		num: 668638,
		accuracy: 30,
		basePower: 1,
		category: "Special",
		name: "Avada Kedavra",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	sandwichstack: {
		num: 668639,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Sandwich Stack",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	invocation: {
		num: 668640,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Invocation",
		pp: 5,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Cosmic' && move.id !== 'astronomy'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	bloodboil: {
		num: 668641,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Blood Boil",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodorb: {
		num: 668642,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Blood Orb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	paperorb: {
		num: 668643,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Paper Orb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bloodspikes: {
		num: 668644,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Blood Spikes",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	brainrot: {
		num: 668645,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Brainrot",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	necrochannel: {
		num: 668646,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Necrochannel",
		pp: 15,
		priority: 0,
		flags: {},onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Zombie' && move.id !== 'necrochannel'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Zombie",
		isNonstandard: "Future",
	},
	dawnofthedead: {
		num: 668647,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "DawnOfTheDead",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	legotrap: {
		num: 668648,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lego Trap",
		pp: 15,
		priority: 0,
		flags: {reflectable: 1, nonsky: 1},
		sideCondition: 'legotrap',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Lego Trap');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded() || pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('legotrap')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Plastic",
		isNonstandard: "Future",
	},
	rigormortis: {
		num: 668649,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Rigor Mortis",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	coldcorpse: {
		num: 668650,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Cold Corpse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	summonspirits: {
		num: 668651,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Spirits",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	zombieapocalypse: {
		num: 668652,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Zombie Apocalypse",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	zombiehammer: {
		num: 668653,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Zombie Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	"5impossiblerequests": {
		num: 668654,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "5ImpossibleRequests",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Divine",
		isNonstandard: "Future",
	},
	houraibranch: {
		num: 668655,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Hourai Branch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	mysterium: {
		num: 668656,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Mysterium",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	kinkakujiceiling: {
		num: 668657,
		accuracy: true,
		basePower: 120,
		category: "Special",
		name: "Kinkakuji Ceiling",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Steel",
		isNonstandard: "Future",
	},
	lunarilmenite: {
		num: 668658,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Lunar Ilmenite",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	redstoneaja: {
		num: 668659,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Red Stone Aja",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	spiritaway: {
		num: 668660,
		accuracy: 40,
		basePower: 1,
		category: "Special",
		name: "Spirit Away",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	dollarmy: {
		num: 668661,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Doll Army",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	fourofakind: {
		num: 668662,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Four of a Kind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	fourbirthssword: {
		num: 668663,
		accuracy: 80,
		basePower: 90,
		category: "Physical",
		name: "FourBirthsSword",
		pp: 10,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	hesitationdeparture: {
		num: 668664,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Hesitation Departure",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	matsuyoireflectslash: {
		num: 668665,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "MatsuyoiReflectSlash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	borderoflifeanddeath: {
		num: 668666,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "BorderOfLifeAndDeath",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	borderoflightanddark: {
		num: 668667,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "BorderOfLightAndDark",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		onEffectiveness(typeMod, target, type, move) {
			return typeMod + this.dex.getEffectiveness('Dark', type);
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	twindeath: {
		num: 668668,
		accuracy: 95,
		basePower: 200,
		category: "Physical",
		name: "Twindeath",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	eventhorizon: {
		num: 668669,
		accuracy: 90,
		basePower: 85,
		category: "Special",
		name: "Event Horizon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	curseofyig: {
		num: 668672,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Curse of Yig",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	yellowsign: {
		num: 668673,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "Yellow Sign",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	archbtyrophbia: {
		num: 668674,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Archbtyrophbia",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	antiquitypunch: {
		num: 668675,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Antiquity Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	expulsion: {
		num: 668676,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Expulsion",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	sarnathsdoom: {
		num: 668677,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sarnaths Doom",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	thalassowave: {
		num: 668678,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Thalassowave",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	thalassosurge: {
		num: 668679,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Thalassosurge",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	woodball: {
		num: 668680,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Wood Ball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	dimensionwarp: {
		num: 668681,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Dimension Warp",
		pp: 15,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	dimensionshamble: {
		num: 668682,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "DimensionShamble",
		pp: 15,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	timeleech: {
		num: 668683,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Time Leech",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	chronophage: {
		num: 668684,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Chronophage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	timehound: {
		num: 668685,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Time Hound",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	fanblast: {
		num: 668686,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Fan Blast",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	bloodytongue: {
		num: 668687,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Bloody Tongue",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	unknowncolor: {
		num: 668688,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Unknown Color",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 60,
			volatileStatus: 'confusion',
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	colordrain: {
		num: 668689,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Color Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	necrosplat: {
		num: 668690,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "NecroSplat",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	lifesap: {
		num: 668691,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Life Sap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	ghatanovisage: {
		num: 668692,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Ghatanovisage",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	awakening: {
		num: 668693,
		accuracy: 75,
		basePower: 1,
		category: "Special",
		name: "Awakening",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	woodenhoof: {
		num: 668694,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Wooden Hoof",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	ancienttsunami: {
		num: 668695,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Ancient Tsunami",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	rubbertongue: {
		num: 668696,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Rubber Tongue",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	rubberpunch: {
		num: 668697,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Rubber Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	stinkymove: {
		num: 668698,
		accuracy: 90,
		basePower: 1,
		category: "Physical",
		name: "Stinky Move",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	levitation: {
		num: 668699,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Levitation",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, gravity: 1},
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	mistywave: {
		num: 668700,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Misty Wave",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	antlerleech: {
		num: 668701,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Antler Leech",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	everexpanding: {
		num: 668702,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Ever Expanding",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	identitytheft: {
		num: 668703,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Identity Theft",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	illusionarystrike: {
		num: 668704,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Illusionary Strike",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	bottledive: {
		num: 668705,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Bottle Dive",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	rowyourboat: {
		num: 668706,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "RowYourBoat",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Wood",
		isNonstandard: "Future",
	},
	flytrap: {
		num: 668707,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Fly Trap",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	tripleshot: {
		num: 668708,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Triple Shot",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	determination: {
		num: 668709,
		accuracy: 80,
		basePower: 110,
		category: "Physical",
		name: "Determination",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	seduction: {
		num: 668710,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Seduction",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	edenfruit: {
		num: 668711,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Eden Fruit",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	temptations: {
		num: 668712,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Temptations",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	clearingwind: {
		num: 668713,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Clearing Wind",
		pp: 10,
		priority: 0,
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Clearing Wind', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Clearing Wind', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Clearing Wind', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Clearing Wind', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	typebeam: {
		num: 668714,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Type Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	bedtimestory: {
		num: 668715,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Bedtime Story",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fairy",
		isNonstandard: "Future",
	},
	dreamswallow: {
		num: 668716,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Dream Swallow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	tossandturn: {
		num: 668717,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "TossandTurn",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	dragondream: {
		num: 668718,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Dragon Dream",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	firehorn: {
		num: 668719,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Fire Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	meltinghorn: {
		num: 668720,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Melting Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	dragonhorn: {
		num: 668721,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Dragon Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	pizzatime: {
		num: 668722,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Pizza Time",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Food",
		isNonstandard: "Future",
	},
	pizzabite: {
		num: 668723,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Pizza-bite",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	delivery: {
		num: 668724,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "Delivery",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	gaebolgalt: {
		num: 668725,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Gae Bolg Alt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	gateofskye: {
		num: 668726,
		accuracy: 45,
		basePower: 1,
		category: "Special",
		name: "Gate of Skye",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	godslayer: {
		num: 668727,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "God Slayer",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	whirlpaint: {
		num: 668728,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Whirlpaint",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		volatileStatus: 'partiallytrapped',
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	paintingworld: {
		num: 668729,
		accuracy: 90,
		basePower: 105,
		category: "Special",
		name: "Painting World",
		pp: 5,
		priority: 0,
		volatileStatus: 'partiallytrapped',
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	artgallery: {
		num: 668730,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Art Gallery",
		pp: 5,
		priority: 0,
		flags: {},
		pseudoWeather: 'artgallery',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('paintedrock') ) {
					return 10;
				}
				return 5;
			},
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Art Gallery', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'paint') {
					this.debug('art gallery increase');
					return this.chainModify([1.5]);
				}
			},
			
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Art Gallery');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Paint",
		isNonstandard: "Future",
	},
	cosmicweb: {
		num: 668731,
		accuracy: 85,
		basePower: 110,
		category: "Special",
		name: "Cosmic Web",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, web: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	greasygrasp: {
		num: 668732,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Greasy Grasp",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	feardrain: {
		num: 668733,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Fear Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	bonebreaker: {
		num: 668734,
		accuracy: 90,
		basePower: 125,
		category: "Physical",
		name: "BONE BREAKER",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bone: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	sniffing: {
		num: 668735,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sniffing",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	featherblade: {
		num: 668736,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Featherblade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	counterwing: {
		num: 668737,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Counter Wing",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	drilldive: {
		num: 668739,
		accuracy: 80,
		basePower: 110,
		category: "Physical",
		name: "Drill Dive",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	hurricanepunch: {
		num: 668740,
		accuracy: 70,
		basePower: 110,
		category: "Physical",
		name: "Hurricane Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	trojanhorse: {
		num: 668741,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Trojan Horse",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	flavorburst: {
		num: 668742,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Flavor Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	branchblow: {
		num: 668743,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Branch Blow",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Wood",
		isNonstandard: "Future",
	},
	faerieorb: {
		num: 668744,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Faerie Orb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	tacoroll: {
		num: 668745,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Taco Roll",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	pillowdrain: {
		num: 668746,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Pillow Drain",
		pp: 15,
		priority: 0,
		drain: [1, 2],
		onTryImmunity(target) {
			return target.status === 'slp' || target.hasAbility('comatose') || target.hasAbility('boardpowerz');
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	meteorhammer: {
		num: 668747,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Meteor Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	wakingchant: {
		num: 668748,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Waking Chant",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "randomNormal",
		type: "Fear",
		isNonstandard: "Future",
	},
	steamsale: {
		num: 668749,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Steam Sale",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Steam Sale', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	magiccharge: {
		num: 668750,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Magic Charge",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	babilu: {
		num: 668751,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Bab ilu",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	enki: {
		num: 668752,
		accuracy: 90,
		basePower: 160,
		category: "Physical",
		name: "Enki",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	karmarush: {
		num: 668753,
		accuracy: 90,
		basePower: 1,
		category: "Physical",
		name: "Karma Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	goldrush: {
		num: 668754,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Goldrush",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		isNonstandard: "Future",
	},
	maxvoltcrash: {
		num: 668756,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Max Volt Crash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
		isNonstandard: "Future",
	},
	maxcuddle: {
		num: 668757,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Max Cuddle",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	emojibeam: {
		num: 668758,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Emoji Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	pisces: {
		num: 668759,
		accuracy: 90,
		basePower: 55,
		category: "Special",
		name: "Pisces",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	hollowburst: {
		num: 668760,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Hollow Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	fleetingstar: {
		num: 668761,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Fleeting Star",
		pp: 5,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	starbeam: {
		num: 668762,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Star Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	cosmicray: {
		num: 668763,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Cosmic Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	swansong: {
		num: 668764,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Swan Song",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Sound",
		isNonstandard: "Future",
	},
	blacktruth: {
		num: 668765,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Black Truth",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	massacre: {
		num: 668766,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Massacre",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Blood",
		isNonstandard: "Future",
	},
	machinegun: {
		num: 668767,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		name: "Machine Gun",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	redtruth: {
		num: 668768,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Red Truth",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	spellorb: {
		num: 668769,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Spell Orb",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	goldtruth: {
		num: 668770,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Gold Truth",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	memoryerase: {
		num: 668771,
		accuracy: true,
		basePower: 90,
		category: "Special",
		name: "Memory Erase",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	bonddestiny: {
		num: 668772,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bond Destiny",
		pp: 35,
		priority: 0,
		flags: {},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	sabbath: {
		num: 668773,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Sabbath",
		pp: 5,
		priority: 0,
		self: {
			volatileStatus: 'lockedmove',
		},
		onAfterMove(pokemon) {
			if (pokemon.volatiles['lockedmove'] && pokemon.volatiles['lockedmove'].duration === 1) {
				pokemon.removeVolatile('lockedmove');
			}
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Magic",
		isNonstandard: "Future",
	},
	magmaraze: {
		num: 668774,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Magma Raze",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	hiberslam: {
		num: 668775,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Hiberslam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ice",
		isNonstandard: "Future",
	},
	winterburst: {
		num: 668776,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Winter Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	boomerang: {
		num: 668777,
		accuracy: 90,
		basePower: 35,
		category: "Physical",
		name: "Boomerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Flying",
		isNonstandard: "Future",
	},
	coldfront: {
		num: 668778,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Cold Front",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Ice",
		isNonstandard: "Future",
	},
	deluge: {
		num: 668779,
		accuracy: true,
		basePower: 80,
		category: "Special",
		name: "Deluge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		isNonstandard: "Future",
	},
	demonsurge: {
		num: 668780,
		accuracy: 90,
		basePower: 36,
		category: "Physical",
		name: "Demon Surge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	elvenarrow: {
		num: 668781,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Elven Arrow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	foghorn: {
		num: 668782,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Foghorn",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	gaiapulse: {
		num: 668783,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Gaia Pulse",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	jealousy: {
		num: 668784,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Jealousy",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	heatmirage: {
		num: 668785,
		accuracy: 70,
		basePower: 0,
		category: "Status",
		name: "Heat Mirage",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	mischief: {
		num: 668786,
		accuracy: 95,
		basePower: 60,
		category: "Special",
		name: "Mischief",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	pincercrush: {
		num: 668787,
		accuracy: 80,
		basePower: 100,
		category: "Physical",
		name: "Pincer Crush",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	pirouette: {
		num: 668788,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Pirouette",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	bloodcurdling: {
		num: 668789,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Bloodcurdling",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	razorfin: {
		num: 668790,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Razor Fin",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	steamclean: {
		num: 668791,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Steam Clean",
		pp: 5,
		priority: 0,
		onHit(target, source) {
			this.add('-activate', source, 'move: Steam Clean');
			let success = false;
			const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];
			for (const ally of allies) {
				if (ally !== source && ally.hasAbility(['soundproof', 'cacophony'])) continue;
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		flags: {snatch: 1},
		secondary: null,
		target: "allyTeam",
		type: "Steam",
		isNonstandard: "Future",
	},
	roothold: {
		num: 668792,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Root Hold",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	terraform: {
		num: 668793,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Terraform",
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	titanfang: {
		num: 668794,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Titan Fang",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	valentine: {
		num: 668795,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "Valentine",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	treeoflife: {
		num: 668796,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Tree of Life",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	mummywrap: {
		num: 668797,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Mummy Wrap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	papercounter: {
		num: 668798,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Paper Counter",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "scripted",
		type: "Paper",
		isNonstandard: "Future",
	},
	carpetslam: {
		num: 668799,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Carpet Slam",
		pp: 30,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 15,
			status: 'par',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	rrrray: {
		num: 668800,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "RRR Ray",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	galeofdarkness: {
		num: 668801,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Gale of Darkness",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadownova: {
		num: 668802,
		accuracy: 90,
		basePower: 130,
		category: "Special",
		name: "Shadow Nova",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	bloodwhip: {
		num: 668807,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Blood Whip",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'bleed',
		},
		critRatio: 2,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	fishpunch: {
		num: 668808,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Fish Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	firstblood: {
		num: 668809,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "First Blood",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("First Blood only works on your first turn out.");
				return false;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	delete: {
		num: 668810,
		accuracy: 30,
		basePower: 1,
		category: "Special",
		name: "Delete",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	mutualdestruction: {
		num: 668814,
		accuracy: 95,
		basePower: 200,
		category: "Physical",
		name: "Mutual Destruction",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	burrowerbeneath: {
		num: 668815,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Burrower Beneath",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	noisepollution: {
		num: 668819,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Noise Pollution",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	cursedground: {
		num: 668821,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Cursed Ground",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	dracomissiles: {
		num: 668822,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Draco Missiles",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	giantslaying: {
		num: 668826,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Giant Slaying",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	chokegas: {
		num: 668831,
		accuracy: 95,
		basePower: 75,
		category: "Special",
		name: "Choke Gas",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	jetpack: {
		num: 668833,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Jet Pack",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	spitsand: {
		num: 668834,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Spit Sand",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	psypowder: {
		num: 668836,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Psy Powder",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	everlastinglight: {
		num: 668840,
		accuracy: 90,
		basePower: 180,
		category: "Physical",
		name: "Everlasting Light",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			volatileStatus: 'mustrecharge',
		},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	throwup: {
		num: 668841,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Throw Up",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	fieryexplosion: {
		num: 668842,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "FieryExplosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},
	invertedroom: {	/* TODO **/
		num: 668843,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Inverted Room",
		pp: 5,
		pseudoWeather: 'invertedroom',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasAbility(['persistent', 'moreroom'])) {
					this.add('-activate', source, `ability: ${source.ability}`, effect);
					return 7;
				}
				return 5;
			},
			onNegateImmunity: false,
			onEffectivenessPriority: 1,
			onEffectiveness(typeMod, target, type, move) {
				// The effectiveness of Freeze Dry on Water isn't reverted
				if (move && move.id === 'freezedry' && type === 'Water') return;
				if (move && move.id === '1000folds' && type === 'Steel') return;
				if (move && move.id === 'airshooter' && type === 'Flying') return;
				if (move && !this.dex.getImmunity(move, type)) return 1;
				return -typeMod;
			},
			onFieldStart(target, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Inverted Room', '[from] ability: ' + effect, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Inverted Room');
				}
				this.add('-message', 'The battlefield became upside down!');
			},
			onFieldRestart(target, source) {
				this.field.removePseudoWeather('invertedroom');
			},
			onFieldResidualOrder: 23,
			onFieldEnd() {
				this.add('-fieldend', 'move: Inverted Room');
			},
		},
		priority: -7,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Chaos",
		isNonstandard: "Future",
	},
	streamline: {
		num: 668844,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Streamline",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	vaporform: {
		num: 668845,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Vaporform",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Steam",
		isNonstandard: "Future",
	},
	frozenwall: {
		num: 668846,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Frozen Wall",
		pp: 10,
		priority: 4,
		flags: {},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	fishingdive: {
		num: 668847,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Fishing Dive",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	stonehammer: {
		num: 668848,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Stone Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	boulderbash: {
		num: 668849,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Boulder Bash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	magmacannon: {
		num: 668850,
		accuracy: 65,
		basePower: 130,
		category: "Special",
		name: "Magma Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	nettleknife: {
		num: 668851,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Nettle Knife",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	slushcrush: {
		num: 668852,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Slush Crush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	pixiedust: {
		num: 668853,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pixie Dust",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	mudcover: {
		num: 668854,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mud Cover",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	windcover: {
		num: 668855,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Wind Cover",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	rudebuster: {
		num: 668858,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Rude Buster",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	redbuster: {
		num: 668859,
		accuracy: 80,
		basePower: 110,
		category: "Physical",
		name: "Red Buster",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	adaptivebody: {
		num: 668860,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Adaptive Body",
		pp: 1,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Dragon",
		isNonstandard: "Future",
	},
	befuddlepowder: {
		num: 668861,
		accuracy: 80,
		basePower: 100,
		category: "Special",
		name: "Befuddle Powder",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	infernowind: {
		num: 668862,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Inferno Wind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	steambomb: {
		num: 668863,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Steam Bomb",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Steam",
		isNonstandard: "Future",
	},
	overdrivesong: {
		num: 668866,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Overdrive Song",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
		isNonstandard: "Future",
	},
	strangesmoke: {
		num: 668867,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Strange Smoke",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	foamburst: {
		num: 668869,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Foam Burst",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	idolatry: {
		num: 668870,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Idolatry",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	takeflight: {
		num: 668871,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Take Flight",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, gravity: 1},
		secondary: null,
		target: "self",
		type: "Flying",
		isNonstandard: "Future",
	},
	shouldsleep: {
		num: 668872,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Should Sleep",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		isNonstandard: "Future",
	},
	compost: {
		num: 668873,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Compost",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	freestyle: {
		num: 668874,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Freestyle",
		pp: 10,
		priority: 0,
		flags: {},
		onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.flags.dance === 1 && move.id !== 'freestyle'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	egoinflate: {
		num: 668875,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ego Inflate",
		pp: 10,
		priority: 4,
		flags: {},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	pepperbreath: {
		num: 668876,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Pepper Breath",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	novablast: {
		num: 668877,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Nova Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	megaclaw: {
		num: 668878,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Mega Claw",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	gigadestroyer: {
		num: 668879,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Giga Destroyer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	terradestroyer: {
		num: 668880,
		accuracy: 80,
		basePower: 65,
		category: "Physical",
		name: "Terra Destroyer",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	overflame: {
		num: 668881,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Overflame",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	revengeflame: {
		num: 668882,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Revenge Flame",
		pp: 10,
		priority: -4,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	megatonpunch: {
		num: 668883,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Megaton Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	hailball: {
		num: 668885,
		accuracy: 85,
		basePower: 60,
		category: "Physical",
		name: "Hail Ball",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	fieryslash: {
		num: 668887,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Fiery Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	gaiaforce: {
		num: 668888,
		accuracy: 85,
		basePower: 140,
		category: "Special",
		name: "Gaia Force",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
	},
	greattornado: {
		num: 668889,
		accuracy: 100,
		basePower: 45,
		category: "Physical",
		name: "Great Tornado",
		pp: 5,
		priority: 2,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	groundzero: {
		num: 668890,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Ground Zero",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	buffalobreathe: {
		num: 668891,
		accuracy: 90,
		basePower: 70,
		category: "Special",
		name: "Buffalo Breathe",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	thiefstar: {
		num: 668892,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Thief Star",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onAfterHit(target, source, move) {
			if (source.item || source.volatiles['gem']) {
				return;
			}
			const yourItem = target.takeItem(source);
			if (!yourItem) {
				return;
			}
			if (!this.singleEvent('TakeItem', yourItem, target.itemState, source, target, move, yourItem) ||
				!source.setItem(yourItem)) {
				target.item = yourItem.id; // bypass setItem so we don't break choicelock or anything
				return;
			}
			this.add('-enditem', target, yourItem, '[silent]', '[from] move: Thief Star', '[of] ' + source);
			this.add('-item', source, yourItem, '[from] move: Thief Star', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	thunderhorn: {
		num: 668893,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Thunderhorn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	samael: {
		num: 668894,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Samael",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	maxsnooze: {
		num: 668896,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "MAXSNOOZE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	chistrike: {
		num: 668897,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Chi Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	steelsurge: {
		num: 668898,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Steel Surge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	superimpact: {
		num: 668899,
		accuracy: 80,
		basePower: 140,
		category: "Physical",
		name: "Super Impact",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	derangedburst: {
		num: 668900,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Deranged Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	darkresolve: {
		num: 668901,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Dark Resolve",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	regrettrident: {
		num: 668902,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Regret Trident",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	closebook: {
		num: 668903,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Close Book",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bloodgun: {
		num: 668904,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Blood Gun",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	toyflame: {
		num: 668905,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Toy Flame",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	slowattack: {
		num: 668908,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Slow Attack",
		pp: 30,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	powerdownkick: {
		num: 668909,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "PowerDownKick",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	blasphemousice: {
		num: 668910,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Blasphemous Ice",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	conveyorbelt: {
		num: 668911,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Conveyor Belt",
		pp: 15,
		priority: 1,
		flags: {},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	pyrophobia: {
		num: 668912,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Pyrophobia",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	universation: {
		num: 668913,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Universation",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	beartrap: {
		num: 668914,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Bear Trap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	vibecheck: {
		num: 668915,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Vibe Check",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	starlightexplosion: {
		num: 668916,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Starlight Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	purgeshine: {
		num: 668917,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Purge Shine",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	howlingblaster: {
		num: 668918,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Howling Blaster",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	gracecrossfreezer: {
		num: 668919,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "GraceCrossFreezer",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	zeedcannon: {
		num: 668920,
		accuracy: 85,
		basePower: 140,
		category: "Special",
		name: "Zeed Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	sewing: {
		num: 668921,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sewing",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		heal: [1, 3],
		onHit(target) {
			if (this.field.getPseudoWeather('fabricworld')) {
				this.boost({
					def: 1,
					spd: 1,
				});
			} else {
				this.boost({
					spd: 1,
				});
			}
		},
		secondary: null,
		target: "self",
		type: "Fabric",
		isNonstandard: "Future",
	},
	wifebeater: {
		num: 668922,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Wife Beater",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.gender === 'F') {
				this.debug('BP doubled on male target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	lightninggun: {
		num: 668923,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Lightning Gun",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	coconutpunch: {
		num: 668924,
		accuracy: 90,
		basePower: 20,
		category: "Physical",
		name: "Coconut Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	kissofbreath: {
		num: 668925,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Kiss Of Breath",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	lovewhip: {
		num: 668926,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Love Whip",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	tequilapunch: {
		num: 668927,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Tequila Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	sunyaslash: {
		num: 668928,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Sunya Slash",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	doublespin: {
		num: 668929,
		accuracy: 95,
		basePower: 35,
		category: "Physical",
		name: "Double Spin",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	megashock: {
		num: 668930,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Megashock",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	devastate: {
		num: 668931,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Devastate",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	magnetforce: {
		num: 668932,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Magnet Force",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	geoimpact: {
		num: 668933,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Geo Impact",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	magmaring: {
		num: 668934,
		accuracy: true,
		basePower: 60,
		category: "Special",
		name: "Magma Ring",
		pp: 20,
		priority: -1,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	kaleidostorm: {
		num: 668935,
		accuracy: 50,
		basePower: 100,
		category: "Special",
		name: "Kaleidostorm",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	glide: {
		num: 668936,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Glide",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	ultragiga: {
		num: 668937,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Ultra Giga",
		pp: 1,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	fart: {
		num: 668938,
		accuracy: 90,
		basePower: 5,
		category: "Special",
		name: "Fart",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	holocaust: {
		num: 668939,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Holocaust",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	fabricsoftener: {
		num: 668940,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fabric Softener",
		pp: 10,
		priority: 0,
		onHit(target) {
			if (this.field.getPseudoWeather('fabricworld')) {
				this.boost({
					def: 2,
					spd: 2,
					spe: -2,
				});
			} else {
				this.boost({
					def: 1,
					spd: 1,
					spe: -1,
				});
			}
		},
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Fabric",
		isNonstandard: "Future",
	},
	kawaiilook: {
		num: 668941,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Kawaii Look",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	oceanlove: {
		num: 668942,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		name: "Ocean Love",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Water",
		isNonstandard: "Future",
	},
	mochihammer: {
		num: 668943,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Mochi Hammer",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	foodtackle: {
		num: 668944,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Food Tackle",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	draineedle: {
		num: 668945,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Draineedle",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	megalocrunch: {
		num: 668946,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Megalo Crunch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	baconrush: {
		num: 668947,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Bacon Rush",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	fastfood: {
		num: 668948,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Fast Food",
		pp: 20,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	eggacid: {
		num: 668949,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Egg Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	pizzaspin: {
		num: 668950,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		name: "Pizza Spin",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	sushimissile: {
		num: 668951,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		name: "Sushi Missile",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	foodpoisoning: {
		num: 668952,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Food Poisoning",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	noodlewhip: {
		num: 668953,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Noodle Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	prediction: {
		num: 668954,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Prediction",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source, target) {
			const action = this.queue.willMove(target);
			const move = action?.choice === 'move' ? action.move : null;
			if (!move || (move.category === 'Status' && move.id !== 'mefirst') || target.volatiles['mustrecharge']) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	spoil: {
		num: 668955,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Spoil",
		pp: 15,
		priority: 0,
		onHit(pokemon, source) {
			const item = pokemon.getItem();
			if ((item.isBerry || item.isGem) && pokemon.takeItem(source)) {
				this.add('-enditem', pokemon, item.name, '[from] move: Spoil');
			}
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	topsytackle: {
		num: 668957,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Topsy Tackle",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	barking: {
		num: 668958,
		accuracy: 90,
		basePower: 20,
		category: "Special",
		name: "Barking",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	stonehead: {
		num: 668959,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Stone Head",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	endvoiddream: {
		num: 668960,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "End Void Dream",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	searingquills: {
		num: 668961,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Searing Quills",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	desertstorm: {
		num: 668962,
		accuracy: 70,
		basePower: 110,
		category: "Special",
		name: "Desert Storm",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	sadistwhip: {
		num: 668963,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Sadist Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	whiplash: {
		num: 668964,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Whip Lash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			boosts: {
				spd: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Rubber",
		isNonstandard: "Future",
	},
	flutter: {
		num: 668965,
		accuracy: true,
		basePower: 40,
		category: "Physical",
		name: "Flutter",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	nectartap: {
		num: 668966,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nectar Tap",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		heal: [1, 3],
		boosts: {
			spe: 1,
		},
		secondary: null,
		target: "self",
		type: "Bug",
		isNonstandard: "Future",
	},
	hocuspinkus: {
		num: 668967,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Hocus Pinkus",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	exorcism: {
		num: 668968,
		accuracy: 100,
		basePower: 140,
		category: "Special",
		name: "Exorcism",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	valaura: {
		num: 668969,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Valaura",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	nosferatu: {
		num: 668970,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Nosferatu",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	finishingmove: {
		num: 668971,
		accuracy: 90,
		basePower: 130,
		category: "Physical",
		name: "Finishing Move",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	grandslam: {
		num: 668972,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Grand Slam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	freezingkiss: {
		num: 668973,
		accuracy: 80,
		basePower: 0,
		category: "Status",
		name: "Freezing Kiss",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	gaussgun: {
		num: 668974,
		accuracy: true,
		basePower: 100,
		category: "Special",
		name: "Gauss Gun",
		pp: 10,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	gnashteeth: {
		num: 668975,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gnash Teeth",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	tremble: {
		num: 668976,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Tremble",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	feverishsmooch: {
		num: 668977,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Feverish Smooch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	drainslap: {
		num: 668978,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Drain Slap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	wakeupbeam: {
		num: 668979,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Wake-Up Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	milkcannon: {
		num: 668980,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Milk Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	stormwatch: {
		num: 668981,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Storm Watch",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	rocket: {
		num: 668982,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Rocket",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	cooldownmode: {
		num: 668983,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cooldown Mode",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	darkcutter: {
		num: 668984,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Dark Cutter",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Dark",
		isNonstandard: "Future",
	},
	armageddon: {
		num: 668985,
		accuracy: 100,
		basePower: 130,
		category: "Physical",
		name: "Armageddon",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fighting",
		isNonstandard: "Future",
	},
	concentrate: {
		num: 668986,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Concentrate",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	neurotoxin: {
		num: 668987,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Neurotoxin",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Poison",
		isNonstandard: "Future",
	},
	numbingbite: {
		num: 668988,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Numbing Bite",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	firstkiss: {
		num: 668989,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "First Kiss",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("First Kiss only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	boostermode: {
		num: 668990,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Booster Mode",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	scannermode: {
		num: 668991,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Scanner Mode",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	shieldmode: {
		num: 668992,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shield Mode",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	hypermode: {
		num: 668993,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hyper Mode",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	licorwhip: {
		num: 668994,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "LicorWhip",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	appleturnover: {
		num: 668996,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Apple Turnover",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	sugarbeam: {
		num: 668997,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Sugar Beam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	karatechoc: {
		num: 668998,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Karate Choc",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	riceball: {
		num: 668999,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Rice Ball",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	randommode: {
		num: 669000,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Random Mode",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Tech",
		isNonstandard: "Future",
	},
	powerdrill: {
		num: 669001,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Power Drill",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	fryingpan: {
		num: 669002,
		accuracy: 75,
		basePower: 80,
		category: "Physical",
		name: "Frying Pan",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	grill: {
		num: 669003,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Grill",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	dineanddash: {
		num: 669004,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Dine and Dash",
		pp: 20,
		priority: 0,
		selfSwitch: true,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	pastarush: {
		num: 669005,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "Pasta Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	spoiledmilk: {
		num: 669006,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Spoiled Milk",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	spagettiwrap: {
		num: 669007,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Spagetti Wrap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	idiotsandwich: {
		num: 669008,
		accuracy: 75,
		basePower: 0,
		category: "Status",
		name: "Idiot Sandwich",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	cyberchase: {
		num: 669009,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Cyberchase",
		pp: 20,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	hiddenweapon: {
		num: 669010,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Hidden Weapon",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Hidden Weapon only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	gunsblazing: {
		num: 669011,
		accuracy: 95,
		basePower: 55,
		category: "Physical",
		name: "Guns Blazing",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Tech",
		isNonstandard: "Future",
	},
	homingbeam: {
		num: 669012,
		accuracy: true,
		basePower: 75,
		category: "Special",
		name: "Homing Beam",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	dedotatedwam: {
		num: 669013,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Dedotated Wam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		onHit(target, source, move) {
			const success = this.boost({atk: -1, spa: -1}, target, source);
			if (!success && !target.hasAbility('mirrorarmor')) {
				delete move.selfSwitch;
			}
		},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	papermissiles: {
		num: 669014,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Paper Missiles",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	magmaguard: {
		num: 669015,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magma Guard",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, defrost: 1},
		secondary: null,
		target: "self",
		type: "Magma",
		isNonstandard: "Future",
	},
	floorislava: {
		num: 669016,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Floor is Lava",
		pp: 5,
		priority: 0,
		flags: {pulse: 1, defrost: 1},
		secondary: null,
		target: "scripted",
		type: "Magma",
		isNonstandard: "Future",
	},
	volcanicterrain: {
		num: 669017,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Volcanic Terrain",
		pp: 10,
		priority: 0,
		flags: {nonsky: 1, defrost: 1},
		terrain: 'volcanicterrain',
		condition: {
			duration: 5,
			durationCallback(source, effect) {
				if (source?.hasItem('terrainextender')) {
					return 8;
				}
				return 5;
			},
			onSetStatus(status, target, source, effect) {
				if (!target.isGrounded() || target.isSemiInvulnerable()) return;
				if (status.id === 'frz') return false;
			},
			onBasePowerPriority: 6,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Magma' && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {
					this.debug('magma terrain boost');
					return this.chainModify([1.5]);
				}
			},
			onFieldStart(field, source, effect) {
				if (effect?.effectType === 'Ability') {
					this.add('-fieldstart', 'move: Volcanic Terrain', '[from] ability: ' + effect.name, '[of] ' + source);
				} else {
					this.add('-fieldstart', 'move: Volcanic Terrain');
				}
			},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 7,
			onFieldEnd() {
				this.add('-fieldend', 'move: Volcanic Terrain');
			},
		},
		secondary: null,
		target: "scripted",
		type: "Magma",
		isNonstandard: "Future",
	},
	forcefeed: {
		num: 669018,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Force Feed",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	injector: {
		num: 669019,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Injector",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	indestructible: {
		num: 669020,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Indestructible",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	rubbershield: {
		num: 669021,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rubber Shield",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Rubber",
		isNonstandard: "Future",
	},
	shiftingsands: {
		num: 669022,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Shifting Sands",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	firewhip: {
		num: 669023,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Fire Whip",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	glacialrend: {
		num: 669024,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Glacial Rend",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	woodpecker: {
		num: 669025,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Wood Pecker",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	crippleimpact: {
		num: 669026,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Cripple Impact",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	zombiespread: {
		num: 669028,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Zombie Spread",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	knockoutpunch: {
		num: 669029,
		accuracy: 30,
		basePower: 1,
		category: "Physical",
		name: "Knockout Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	flowingstrikes: {
		num: 669030,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Flowing Strikes",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	pheromones: {
		num: 669031,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Pheromones",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	gravitas: {
		num: 669032,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Gravitas",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	elastickick: {
		num: 669033,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Elastic Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	fightingurge: {
		num: 669034,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Fighting Urge",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	bladeofend: {
		num: 669035,
		accuracy: 95,
		basePower: 30,
		category: "Physical",
		name: "Blade of End",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		critRatio: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	coldheart: {
		num: 669036,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Cold Heart",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	subzerowail: {
		num: 669037,
		accuracy: 80,
		basePower: 80,
		category: "Special",
		name: "Subzero Wail",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	flamewar: {
		num: 669038,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Flame War",
		pp: 10,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "scripted",
		type: "Fire",
		isNonstandard: "Future",
	},
	infectingslash: {
		num: 669039,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Infecting Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Zombie');
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	divinetemple: {
		num: 669040,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Divine Temple",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	chaotictemple: {
		num: 669041,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Chaotic Temple",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Chaos",
		isNonstandard: "Future",
	},
	psychictemple: {
		num: 669042,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Psychic Temple",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Psychic",
		isNonstandard: "Future",
	},
	ariessmash: {
		num: 669043,
		accuracy: 80,
		basePower: 150,
		category: "Physical",
		name: "Aries Smash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	corpsewave: {
		num: 669044,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Corpse Wave",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Zombie');
			},
		},
		target: "allAdjacentFoes",
		type: "Zombie",
		isNonstandard: "Future",
	},
	eyewall: {
		num: 669045,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Eyewall",
		pp: 5,
		priority: -6,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Wind",
		isNonstandard: "Future",
	},
	magmaquake: {
		num: 669046,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Magmaquake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Magma",
		isNonstandard: "Future",
	},
	vaporwall: {
		num: 669047,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Vapor Wall",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Steam",
		isNonstandard: "Future",
	},
	leostrike: {
		num: 669048,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Leo Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	taurushorns: {
		num: 669049,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Taurus Horns",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	virgoheart: {
		num: 669050,
		accuracy: 95,
		basePower: 120,
		category: "Special",
		name: "Virgo Heart",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	capricornhorn: {
		num: 669051,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Capricorn Horn",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	geministars: {
		num: 669052,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Gemini Stars",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	cbt: {
		num: 669053,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "CBT",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		basePowerCallback(pokemon, target, move) {
			if (target.gender === 'M') {
				this.debug('BP doubled on male target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		secondary: {
			chance: 40,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	reversewounds: {
		num: 669054,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reverse Wounds",
		pp: 10,
		priority: -1,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Time",
		isNonstandard: "Future",
	},
	librabeam: {
		num: 669055,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Libra Beam",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		stealsBoosts: true,
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	shiver: {
		num: 669056,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shiver",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	bidibidibidi: {
		num: 669057,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "BiDiBiDiBiDi",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		selfBoost: {
			boosts: {
				accuracy: 1,
			},
		},
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	ornithophobia: {
		num: 669058,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Ornithophobia",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	hornyattack: {
		num: 669059,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Horny Attack",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	permafrost: {
		num: 669060,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Permafrost",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Ice",
		isNonstandard: "Future",
	},
	bodybreak: {
		num: 669061,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Body Break",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	pitfall: {
		num: 669062,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pitfall",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Ground",
		isNonstandard: "Future",
	},
	mines: {
		num: 669063,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mines",
		pp: 20,
		priority: 0,
		sideCondition: 'mines',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Mines');
			},
			onEntryHazard(pokemon) {
				if (pokemon.hasItem('heavydutyboots')) return;
				const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove('mines')), -6, 6);
				this.damage(pokemon.maxhp * Math.pow(2, typeMod) / 8);
			},
		},
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Tech",
		isNonstandard: "Future",
	},
	fastforward: {
		num: 669064,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fast Forward",
		pp: 5,
		volatileStatus: 'fastforward',
		condition: {
			duration: 5,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'move: Fast Forward');
			},
			onResidualOrder: 15,
			onEnd(target) {
				this.add('-end', target, 'move: Fast Forward');
			},
			onChargeMove(pokemon, target, move) {
				this.debug('fastforward - remove charge turn for ' + move.id);
				this.attrLastMove('[still]');
				this.addMove('-anim', pokemon, move.name, target);
				return false; // skip charge turn
			},
		},
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Time",
		isNonstandard: "Future",
	},
	aquariusflow: {
		num: 669065,
		accuracy: 85,
		basePower: 80,
		category: "Special",
		name: "Aquarius Flow",
		pp: 5,
		priority: -6,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	viruspropogate: {
		num: 669066,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Virus Propogate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	zombievirus: {
		num: 669067,
		accuracy: 90,
		basePower: 85,
		category: "Special",
		name: "Zombie Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Zombie');
			},
		},
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	cancerclaws: {
		num: 669068,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Cancer Claws",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	scorpiosting: {
		num: 669069,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Scorpio Sting",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	piscesstars: {
		num: 669070,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Pisces Stars",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	ophiuchusbind: {
		num: 669071,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Ophiuchus Bind",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	bubblebomb: {
		num: 669072,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Bubble Bomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	frothguard: {
		num: 669073,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Froth Guard",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Water",
		isNonstandard: "Future",
	},
	honeydrip: {
		num: 669074,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Honey Drip",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	honeybeam: {
		num: 669075,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Honey Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	honeydoom: {
		num: 669076,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Honey Doom",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Zombie",
		isNonstandard: "Future",
	},
	raspberrytongue: {
		num: 669077,
		accuracy: 85,
		basePower: 80,
		category: "Physical",
		name: "RaspberryTongue",
		pp: 5,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	honeydewblast: {
		num: 669078,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Honeydew Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	raspberrywhistle: {
		num: 669079,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Raspberry Whistle",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	tm50: {
		num: 669081,
		accuracy: 28,
		basePower: 56,
		category: "Physical",
		name: "TM50",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	tm05: {
		num: 669082,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "TM05",
		pp: 35,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		boosts: {
			evasion: 2,
		},
		target: "self",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	tm41: {
		num: 669083,
		accuracy: 100,
		basePower: 71,
		category: "Special",
		name: "TM41",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		boosts: {
			evasion: 2,
		},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	tm54: {
		num: 669084,
		accuracy: 8,
		basePower: 2,
		category: "Special",
		name: "TM54",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	tm18: {
		num: 669085,
		accuracy: 17,
		basePower: 7,
		category: "Physical",
		name: "TM18",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	vulcanhammer: {
		num: 669086,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Vulcan Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	birdflu: {
		num: 669087,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Bird Flu",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	steamsport: {
		num: 669088,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Steam Sport",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Steam",
		isNonstandard: "Future",
	},
	steamtail: {
		num: 669089,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Steam Tail",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, tail: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	sensingsteam: {
		num: 669090,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Sensing Steam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
		isNonstandard: "Future",
	},
	virginsgrace: {
		num: 669091,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Virgins Grace",
		pp: 10,
		priority: -1,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	handoffate: {
		num: 669092,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Hand of Fate",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	testament: {
		num: 669093,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Testament",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	sevenstarstrike: {
		num: 669094,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "SevenStarStrike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: 7,
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	hallowedknuckle: {
		num: 669095,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Hallowed Knuckle",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	catlaser: {
		num: 669096,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Cat Laser",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	onetwonekopunch: {
		num: 669097,
		accuracy: 90,
		basePower: 45,
		category: "Physical",
		name: "OneTwoNekoPunch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	nekorush: {
		num: 669098,
		accuracy: 95,
		basePower: 65,
		category: "Physical",
		name: "Neko Rush",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	nekofinish: {
		num: 669099,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Neko Finish",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	sweeping: {
		num: 669100,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Sweeping",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	angelwings: {
		num: 669101,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Angel Wings",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	holykick: {
		num: 669102,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Holy Kick",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	dragonfire: {
		num: 669103,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Dragon Fire",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	edenspear: {
		num: 669104,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Eden Spear",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	sefirotcrystal: {
		num: 669105,
		accuracy: 90,
		basePower: 10,
		category: "Special",
		name: "Sefirot Crystal",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	dragonwings: {
		num: 669106,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Dragon Wings",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	funeralpyre: {
		num: 669107,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Funeral Pyre",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	chaoslabyrintho: {
		num: 669108,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Chaos Labyrintho",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Chaos",
		isNonstandard: "Future",
	},
	electricfence: {
		num: 669109,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Electric Fence",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Electric",
		isNonstandard: "Future",
	},
	starfield: {
		num: 669110,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Starfield",
		pp: 10,
		priority: 0,
		flags: {},
		pseudoWeather: 'starfield',
		condition: {
			duration: 5,
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Starfield', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Cosmic') {
					this.debug('star field increase');
					return this.chainModify([1.5]);
				}
			},
			onModifySpDPriority: 10,
			onModifySpD(spd, pokemon) {
			if (pokemon.hasType('Cosmic')) {
				return this.chainModify([1.5]);
			}			
		},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Starfield');
			},
		},
		secondary: null,
		target: "all",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	mudbath: {
		num: 669111,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mudbath",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Ground",
		isNonstandard: "Future",
	},
	beastkingfist: {
		num: 669112,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Beast King Fist",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	oxygendestroyer: {
		num: 669113,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Oxygen Destroyer",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Tech",
		isNonstandard: "Future",
	},
	triplelightning: {
		num: 669114,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Triple Lightning",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	gravitybeams: {
		num: 669115,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Gravity Beams",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	thekingoffist: {
		num: 669116,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "TheKingOfFist",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	infinityarrow: {
		num: 669117,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Infinity Arrow",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	wetkiss: {
		num: 669118,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Wet Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	toxickiss: {
		num: 669120,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Toxic Kiss",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	noisykiss: {
		num: 669121,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Noisy Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	powderveil: {
		num: 669122,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Powder Veil",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Bug",
		isNonstandard: "Future",
	},
	healingchime: {
		num: 669123,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Healing Chime",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Sound",
		isNonstandard: "Future",
	},
	dawnlights: {
		num: 669124,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Dawn Lights",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	breakingonslaught: {
		num: 669125,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Breaking Onslaught",
		pp: 5,
		priority: 2,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	goblinbomb: {
		num: 669126,
		accuracy: 95,
		basePower: 85,
		category: "Special",
		name: "Goblin Bomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	goblinstrike: {
		num: 669127,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Goblin Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	pummelwack: {
		num: 669128,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Pummel Wack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	evilhurricane: {
		num: 669129,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Evil Hurricane",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Wind",
		isNonstandard: "Future",
	},
	invasion: {
		num: 669130,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Invasion",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	anaphylacticshock: {
		num: 669131,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Anaphylactic Shock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	anxiety: {
		num: 669132,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Anxiety",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	nightmaresyndrome: {
		num: 669134,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Nightmare Syndrome",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	gigo: {
		num: 669135,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "GIGO",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	blackdeathcloud: {
		num: 669136,
		accuracy: 90,
		basePower: 40,
		category: "Special",
		name: "Black Death Cloud",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Chaos",
		isNonstandard: "Future",
	},
	kooumeijin: {
		num: 669137,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Koou Meijin",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	genbamukon: {
		num: 669138,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Genba Mukon",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'bleed',
		},
		critRatio: 2,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	soulcoreattack: {
		num: 669139,
		accuracy: 85,
		basePower: 30,
		category: "Physical",
		name: "Soul Core Attack",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	flowerward: {
		num: 669140,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Flower Ward",
		pp: 15,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "allySide",
		type: "Grass",
		isNonstandard: "Future",
	},
	madnessmerrygoround: {
		num: 669141,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "MadnessMerrygoround",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacent",
		type: "Wind",
		isNonstandard: "Future",
	},
	olympiaslash: {
		num: 669142,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Olympia Slash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	shrinkwrap: {
		num: 669143,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Shrink Wrap",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Plastic",
		isNonstandard: "Future",
	},
	spacevirus: {
		num: 669144,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Space Virus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	blowkiss: {
		num: 669145,
		accuracy: 95,
		basePower: 50,
		category: "Special",
		name: "Blow Kiss",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	applylipstick: {
		num: 669146,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Apply Lipstick",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Heart",
		isNonstandard: "Future",
	},
	speakerblast: {
		num: 669147,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Speaker Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Tech",
		isNonstandard: "Future",
	},
	guardianleaf: {
		num: 669148,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Guardian Leaf",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	rapidgrowth: {
		num: 669149,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Rapid Growth",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	sharpshoot: {
		num: 669150,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Sharpshoot",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	volcanoburst: {
		num: 669151,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Volcano Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		basePowerCallback(source, target, move) {
			if (this.field.isTerrain('volcanicterrain') && target.isGrounded()) {
				if (!source.isAlly(target)) this.hint(`${move.name}'s BP doubled on grounded target.`);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	plasticwrap: {
		num: 669152,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Plastic Wrap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	quarry: {
		num: 669153,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Quarry",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	coldshoulder: {
		num: 669154,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Cold Shoulder",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		onHit(target, source, move) {
			const success = this.boost({spe: -3}, target, source);
			if (!success && !target.hasAbility('mirrorarmor')) {
				delete move.selfSwitch;
			}
		},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	arboreum: {
		num: 669155,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Arboreum",
		pp: 10,
		priority: 0,
		flags: {},
		pseudoWeather: 'arboreum',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('woodenrock') ) {
					return 10;
				}
				return 5;
			},
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Arboreum', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Wood') {
					this.debug('arboreum increase');
					return this.chainModify([1.5]);
				}
			},
			onModifyDefPriority: 10,
			onModifyDef(def, pokemon) {
			if (pokemon.hasType('Wood')) {
				return this.chainModify([1.5]);
			}			
		},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Arboreum');
			},
		},
		secondary: null,
		target: "all",
		type: "Wood",
		isNonstandard: "Future",
	},
	tohachigame: {
		num: 669156,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Tohachi Game",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	sealingtalisman: {
		num: 669157,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Sealing Talisman",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bonhitsusen: {
		num: 669158,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Bonhitsusen",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Light",
		isNonstandard: "Future",
	},
	brushstrike: {
		num: 669159,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Brush Strike",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'paint',
		},
		target: "normal",
		type: "Paint",
		isNonstandard: "Future",
	},
	kongoushakujou: {
		num: 669160,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "Kongou Shakujou",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	deserttree: {
		num: 669161,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Desert Tree",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	snowman: {
		num: 669162,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Snowman",
		pp: 5,
		priority: -1,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Ice",
		isNonstandard: "Future",
	},
	shatter: {
		num: 669163,
		accuracy: 100,
		basePower: 200,
		category: "Physical",
		name: "Shatter",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Glass",
		isNonstandard: "Future",
	},
	gumburst: {
		num: 669164,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Gum Burst",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	treasurechest: {
		num: 669165,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Treasure Chest",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	gamble: {
		num: 669166,
		accuracy: 60,
		basePower: 130,
		category: "Physical",
		name: "Gamble",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, west: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	nuclearrain: {
		num: 669167,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Nuclear Rain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	tipfedora: {
		num: 669168,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Tip Fedora",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (!target.volatiles['dynamax']) {
				target.addVolatile('taunt');
			}
		},
		self: {
			boosts: {
				spa: 1,
				spd: 1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	pulledpunch: {
		num: 669169,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Pulled Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	trolling: {
		num: 669171,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Trolling",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	reload: {
		num: 669172,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Reload",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	hallucinogen: {
		num: 669173,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Hallucinogen",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	clearskies: {
		num: 669174,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Clear Skies",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Normal",
		isNonstandard: "Future",
	},
	vitalcrush: {
		num: 669176,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Vital Crush",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	fivestarstrike: {
		num: 669177,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Five Star Strike",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	annoyance: {
		num: 669180,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Annoyance",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	acidbath: {
		num: 669182,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Bath",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather('acidrain')) {
				factor = 0.667;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Poison",
		isNonstandard: "Future",
	},
	darkgather: {
		num: 669183,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dark Gather",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit(pokemon) {
			let factor = 0.5;
			if (this.field.isWeather('midnight')) {
				factor = 0.667;
			}
			const success = !!this.heal(this.modify(pokemon.maxhp, factor));
			if (!success) {
				this.add('-fail', pokemon, 'heal');
				return this.NOT_FAIL;
			}
			return success;
		},
		secondary: null,
		target: "self",
		type: "Dark",
		isNonstandard: "Future",
	},
	undeadrespite: {
		num: 669184,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Undead Respite",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Zombie",
		isNonstandard: "Future",
	},
	studynotes: {
		num: 669185,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Study Notes",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	papersharpening: {
		num: 669186,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Paper Sharpening",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	moltentears: {
		num: 669188,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "Molten Tears",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	curryburst: {
		num: 669189,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Curry Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	dildohorn: {
		num: 669190,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Dildo Horn",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	hyperrubber: {
		num: 669191,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Hyper Rubber",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Rubber",
		isNonstandard: "Future",
	},
	movecatalog: {
		num: 669192,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Move Catalog",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	duedate: {
		num: 669193,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Due Date",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	bookstack: {
		num: 669194,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Book Stack",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	learnmove: {
		num: 669195,
		accuracy: 80,
		basePower: 0,
		category: "Status",
		name: "Learn Move",
		pp: 1,
		priority: -1,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	lavaburst: {
		num: 669196,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Lava Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	alchemy: {
		num: 669197,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Alchemy",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	pulpstream: {
		num: 669198,
		accuracy: 90,
		basePower: 95,
		category: "Special",
		name: "Pulp Stream",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	trainingroom: {
		num: 669200,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Training Room",
		pp: 5,
		priority: -7,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Fighting",
		isNonstandard: "Future",
	},
	nitpick: {
		num: 669201,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Nitpick",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	aqueduct: {
		num: 669202,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Aqueduct",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Water",
		isNonstandard: "Future",
	},
	restinpeace: {
		num: 669203,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rest in Peace",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	speedbump: {
		num: 669204,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Speed Bump",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Rubber",
		isNonstandard: "Future",
	},
	berrygrowth: {
		num: 669205,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Berry Growth",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	cyberspace: {
		num: 669206,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cyberspace",
		pp: 10,
		priority: 0,
		flags: {},
		condition: {
			duration: 5,
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Cyberspace', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'Cyber') {
					this.debug('star field increase');
					return this.chainModify([1.5]);
				}
			},
			onModifySpDPriority: 10,
			onModifySpD(spd, pokemon) {
			if (pokemon.hasType('Cyber')) {
				return this.chainModify([1.5]);
			}			
		},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Cyberspace');
			},
		},
		secondary: null,
		target: "allySide",
		type: "Cyber",
		isNonstandard: "Future",
	},
	maxreplenish: {
		num: 669207,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Max Replenish",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	recyclebeam: {
		num: 669208,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Recycle Beam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	guro: {
		num: 669209,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Guro",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	predationplant: {
		num: 669210,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Predation Plant",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source, target) {
			const action = this.queue.willMove(target);
			const move = action?.choice === 'move' ? action.move : null;
			if (!move || (move.category === 'Status' && move.id !== 'mefirst') || target.volatiles['mustrecharge']) {
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	schorchingsting: {
		num: 669211,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Schorching Sting",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	tiedup: {
		num: 669212,
		accuracy: true,
		basePower: 70,
		category: "Physical",
		name: "Tiedup",
		pp: 15,
		priority: 0,
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	gemmine: {
		num: 669213,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gem Mine",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Rock",
		isNonstandard: "Future",
	},
	choiceknit: {
		num: 669214,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Choice Knit",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Fabric",
		isNonstandard: "Future",
	},
	gemcreate: {
		num: 669215,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Gem Create",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Crystal",
		isNonstandard: "Future",
	},
	balloonparty: {
		num: 669216,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Balloon Party",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Rubber",
		isNonstandard: "Future",
	},
	ultimatum: {
		num: 669217,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ultimatum",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	initiate: {
		num: 669218,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Initiate",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	tapout: {
		num: 669219,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tap out",
		pp: 20,
		priority: 0,
		flags: {},
		secondary: null,
		onHit(target) {
			if (!this.canSwitch(target.side)) {
				this.attrLastMove('[still]');
				this.add('-fail', target);
				return this.NOT_FAIL;
			}
		},
		self: {
			onHit(source) {
				source.skipBeforeSwitchOutEventFlag = true;
			},
		},
		boosts: {
			atk: 1,
		},
		selfSwitch: 'copyvolatile',
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
	},
	pitstop: {
		num: 669220,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pit Stop",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Rubber",
		isNonstandard: "Future",
	},
	lightpulse: {
		num: 669221,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Light Pulse",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	medievalwind: {
		num: 669222,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Medieval Wind",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	dragonwish: {
		num: 669223,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dragon Wish",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Dragon",
		isNonstandard: "Future",
	},
	spellbind: {
		num: 669224,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Spellbind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	snowballfight: {
		num: 669225,
		accuracy: 95,
		basePower: 18,
		category: "Physical",
		name: "Snowball Fight",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	berrydrink: {
		num: 669226,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Berry Drink",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Grass",
		isNonstandard: "Future",
	},
	seismickick: {
		num: 669227,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Seismic Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	frostkick: {
		num: 669228,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Frost Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	dustkick: {
		num: 669229,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Dust Kick",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, kick: 1},
		secondary: {
			chance: 10,
			boosts: {
				accuracy: -1,
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	snowballpunch: {
		num: 669230,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		name: "Snowball Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	eatingchomp: {
		num: 669231,
		accuracy: 95,
		basePower: 75,
		category: "Physical",
		name: "Eating Chomp",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	woodcannon: {
		num: 669232,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Wood Cannon",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	afterimage: {
		num: 669233,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "After Image",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		volatileStatus: 'substitute',
		onTryHit(source) {
			if (!this.canSwitch(source.side)) {
				this.add('-fail', source);
				return this.NOT_FAIL;
			}
			if (source.volatiles['substitute']) {
				this.add('-fail', source, 'move: Shed Tail');
				return this.NOT_FAIL;
			}
			if (source.hp <= Math.ceil(source.maxhp / 2)) {
				this.add('-fail', source, 'move: Shed Tail', '[weak]');
				return this.NOT_FAIL;
			}
		},
		onHit(target) {
			this.directDamage(Math.ceil(target.maxhp / 2));
		},
		self: {
			onHit(source) {
				source.skipBeforeSwitchOutEventFlag = true;
			},
		},
		selfSwitch: 'copyvolatile',
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	blight: {
		num: 669234,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Blight",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Bug",
		isNonstandard: "Future",
	},
	mysticchime: {
		num: 669235,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mystic Chime",
		pp: 10,
		priority: 0,
		flags: {sound: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Sound",
		isNonstandard: "Future",
	},
	dropguard: {
		num: 669236,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Drop Guard",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Fighting",
		isNonstandard: "Future",
	},
	barkpress: {
		num: 669237,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Bark Press",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	corrosivespray: {
		num: 669238,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Corrosive Spray",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onEffectiveness(typeMod, target, type) {
			if (type === 'Steel') return 1;
		},
		secondary: {
			chance: 15,
			status: 'brn',
		},
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	numbinginjection: {
		num: 669239,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Numbing Injection",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	skidout: {
		num: 669240,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Skid Out",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			// You can't get here unless the pursuit succeeds
			if (target.beingCalledBack || target.switchFlag) {
				this.debug('Chase Beam damage boost');
				return move.basePower * 2;
			}
			return move.basePower;
		},
beforeTurnCallback(pokemon) {
			for (const side of this.sides) {
				if (side.hasAlly(pokemon)) continue;
				side.addSideCondition('pursuit', pokemon);
				const data = side.getSideConditionData('pursuit');
				if (!data.sources) {
					data.sources = [];
				}
				data.sources.push(pokemon);
			}
		},
		onModifyMove(move, source, target) {
			if (target?.beingCalledBack || target?.switchFlag) move.accuracy = true;
		},
		onTryHit(target, pokemon) {
			target.side.removeSideCondition('pursuit');
		},
		condition: {
			duration: 1,
			onBeforeSwitchOut(pokemon) {
				this.debug('Pursuit start');
				let alreadyAdded = false;
				pokemon.removeVolatile('destinybond');
				for (const source of this.effectState.sources) {
					if (!source.isAdjacent(pokemon) || !this.queue.cancelMove(source) || !source.hp) continue;
					if (!alreadyAdded) {
						this.add('-activate', pokemon, 'move: Pursuit');
						alreadyAdded = true;
					}
					// Run through each action in queue to check if the Pursuit user is supposed to Mega Evolve this turn.
					// If it is, then Mega Evolve before moving.
					if (source.canMegaEvo || source.canUltraBurst) {
						for (const [actionIndex, action] of this.queue.entries()) {
							if (action.pokemon === source && action.choice === 'megaEvo') {
								this.actions.runMegaEvo(source);
								this.queue.list.splice(actionIndex, 1);
								break;
							}
						}
					}
					this.actions.runMove('pursuit', source, source.getLocOf(pokemon));
				}
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	glitter: {
		num: 669241,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Glitter",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	glitterbomb: {
		num: 669242,
		accuracy: 95,
		basePower: 70,
		category: "Special",
		name: "Glitter Bomb",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bullet: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	pixiefangs: {
		num: 669243,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Pixie Fangs",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	tag: {
		num: 669244,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Tag",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	imprint: {
		num: 669245,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Imprint",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	photocopy: {
		num: 669246,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Photocopy",
		pp: 10,
		priority: 1,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	cryptomine: {
		num: 669247,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Cryptomine",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	woodpike: {
		num: 669248,
		accuracy: 95,
		basePower: 60,
		category: "Physical",
		name: "Wood Pike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	poisonspit: {
		num: 669249,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Poison Spit",
		pp: 30,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	lifeline: {
		num: 669250,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lifeline",
		pp: 10,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Ghost",
		isNonstandard: "Future",
	},
	exorcise: {
		num: 669251,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Exorcise",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(pokemon) {
				if (pokemon.hasType('Ghost')){
				pokemon.setType(pokemon.getTypes(true).map(type => type === "Ghost" ? "???" : type));
				this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Exocise');
				}
		},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	antivenom: {
		num: 669252,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Antivenom",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	aimforthehorn: {
		num: 669254,
		accuracy: 100,
		basePower: 85,
		category: "Special",
		name: "Aim for the Horn",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	wyverncry: {
		num: 669255,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Wyvern Cry",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
	},
	dogfight: {
		num: 669256,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Dogfight",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	dragonvenom: {
		num: 669257,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Dragon Venom",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	viralflames: {
		num: 669258,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Viral Flames",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	flyingsport: {
		num: 669259,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Flying Sport",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Flying",
		isNonstandard: "Future",
	},
	pandemic: {
		num: 669260,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Pandemic",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Virus",
		isNonstandard: "Future",
	},
	icesport: {
		num: 669261,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Ice Sport",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Ice",
		isNonstandard: "Future",
	},
	fearitself: {
		num: 669262,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Fear Itself",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	antiectpunch: {
		num: 669263,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Antiect Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	dryspell: {
		num: 669264,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dry Spell",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Fire",
		isNonstandard: "Future",
	},
	chargedgrease: {
		num: 669265,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Charged Grease",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	oilsmack: {
		num: 669266,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Oil Smack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	gorillaarm: {
		num: 669267,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Gorilla Arm",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	minihammer: {
		num: 669268,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Mini Hammer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	slitwrists: {
		num: 669269,
		accuracy: 95,
		basePower: 10,
		category: "Physical",
		name: "Slit Wrists",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Blood",
		isNonstandard: "Future",
	},
	lumber: {
		num: 669270,
		accuracy: 90,
		basePower: 105,
		category: "Physical",
		name: "Lumber",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	clumsyswing: {
		num: 669271,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Clumsy Swing",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fighting",
		isNonstandard: "Future",
	},
	lazybreak: {
		num: 669272,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lazy Break",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [2, 3],
		boosts: {
			spe: -1,
			evasion: -1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	openstrike: {
		num: 669273,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Open Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	powerarena: {
		num: 669274,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Arena",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Fighting",
		isNonstandard: "Future",
	},
	swarm: {
		num: 669275,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Swarm",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Bug",
		isNonstandard: "Future",
	},
	irondust: {
		num: 669276,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Iron Dust",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Steel",
		isNonstandard: "Future",
	},
	greasegun: {
		num: 669277,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Grease Gun",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	glasseater: {
		num: 669278,
		accuracy: 85,
		basePower: 70,
		category: "Physical",
		name: "Glass Eater",
		pp: 20,
		priority: 0,
		onHit(pokemon, source) {
			const item = pokemon.getItem();
			if ((item.isBerry || item.isGem) && pokemon.takeItem(source)) {
				this.add('-enditem', pokemon, item.name, '[from] move: Glass Eater');
			}
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	magmaslash: {
		num: 669279,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Magma Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	greaseflake: {
		num: 669280,
		accuracy: 100,
		basePower: 45,
		category: "Special",
		name: "Grease Flake",
		pp: 25,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	selffatten: {
		num: 669281,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Self Fatten",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Greasy",
		isNonstandard: "Future",
	},
	greasebubble: {
		num: 669282,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Grease Bubble",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	deceptivefan: {
		num: 669283,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Deceptive Fan",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	fatslam: {
		num: 669284,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Fat Slam",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	corrupt: {
		num: 669285,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Corrupt",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	maniachowl: {
		num: 669286,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Maniac Howl",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	unhingedhowl: {
		num: 669287,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Unhinged Howl",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	heatseekcrawl: {
		num: 669288,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "HeatSeek Crawl",
		pp: 15,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	greasepunch: {
		num: 669289,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Grease Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	frigerate: {
		num: 669290,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Frigerate",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	toxify: {
		num: 669291,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Toxify",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	simplify: {
		num: 669292,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Simplify",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	cursedflare: {
		num: 669293,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cursed Flare",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	autophobia: {
		num: 669294,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Autophobia",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	terrainball: {
		num: 669295,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Terrain Ball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	soulbarrier: {
		num: 669296,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Soul Barrier",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Ghost",
		isNonstandard: "Future",
	},
	echolocation: {
		num: 669297,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Echolocation",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Sound",
		isNonstandard: "Future",
	},
	barrierburst: {
		num: 669298,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Barrier Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	sleepwalk: {
		num: 669299,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Sleep Walk",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1, heal: 1},
		onTry(source) {
			if (source.status === 'slp' || source.hasAbility('comatose') || source.hasAbility('boardpowerz')) return false;

			if (source.hp === source.maxhp) {
				this.add('-fail', source, 'heal');
				return null;
			}
			if (source.hasAbility(['insomnia', 'vitalspirit'])) {
				this.add('-fail', source, '[from] ability: ' + source.getAbility().name, '[of] ' + source);
				return null;
			}
		},
		onHit(target, source, move) {
			const result = target.setStatus('slp', source, move);
			if (!result) return result;
			target.statusState.time = 3;
			target.statusState.startTime = 3;
			this.heal(target.maxhp); // Aesthetic only as the healing happens after you fall asleep in-game
		},
		selfSwitch: true,
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	glassceiling: {
		num: 669300,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Glass Ceiling",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Glass",
		isNonstandard: "Future",
	},
	wallbreaker: {
		num: 669301,
		accuracy: 95,
		basePower: 150,
		category: "Physical",
		name: "Wall Breaker",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	pressuretime: {
		num: 669302,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Pressure Time",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Time",
		isNonstandard: "Future",
	},
	graveyard: {
		num: 669303,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Graveyard",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Zombie",
		isNonstandard: "Future",
	},
	sweetcannon: {
		num: 669304,
		accuracy: 100,
		basePower: 130,
		category: "Special",
		name: "Sweet Cannon",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	plainterrain: {
		num: 669305,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Plain Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	matingseason: {
		num: 669306,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mating Season",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Heart",
		isNonstandard: "Future",
	},
	factory: {
		num: 669307,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Factory",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Tech",
		isNonstandard: "Future",
	},
	luckyroom: {
		num: 669308,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lucky Room",
		pp: 5,
		priority: -7,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Normal",
		isNonstandard: "Future",
	},
	homersimpson: {
		num: 669309,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "HOMER SIMPSON",
		pp: 15,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Normal",
		isNonstandard: "Future",
	},
	birdflock: {
		num: 669310,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bird Flock",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Flying",
		isNonstandard: "Future",
	},
	leechingfangs: {
		num: 669311,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Leeching Fangs",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	recycleterrain: {
		num: 669312,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Recycle Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Plastic",
		isNonstandard: "Future",
	},
	thickfog: {
		num: 669313,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Thick Fog",
		pp: 5,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Steam",
		isNonstandard: "Future",
	},
	invisibility: {
		num: 669314,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Invisibility",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Light",
		isNonstandard: "Future",
	},
	bloodrain: {
		num: 669315,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Blood Rain",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "allySide",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodbathe: {
		num: 669316,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Blood Bathe",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodshower: {
		num: 669317,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Blood Shower",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	poisonlovepill: {
		num: 669318,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "PoisonLovePill",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	telekrunch: {
		num: 669319,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Telekrunch",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	vibrantcharge: {
		num: 669320,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Vibrant Charge",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	lavadrip: {
		num: 669321,
		accuracy: 100,
		basePower: 20,
		category: "Special",
		name: "Lava Drip",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	frostfang: {
		num: 669322,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Frost Fang",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	eeriebubbles: {
		num: 669323,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Eerie Bubbles",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	adhesivewave: {
		num: 669324,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Adhesive Wave",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Rubber",
		isNonstandard: "Future",
	},
	woundbite: {
		num: 669326,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Wound Bite",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	violentrage: {
		num: 669327,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Violent Rage",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	hypnopendulum: {
		num: 669329,
		accuracy: 70,
		basePower: 0,
		category: "Status",
		name: "Hypno Pendulum",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	oceanhearts: {
		num: 669330,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Ocean Hearts",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	ragingscales: {
		num: 669331,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Raging Scales",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	disturbancescales: {
		num: 669332,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "DisturbanceScales",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Bug",
		isNonstandard: "Future",
	},
	snowvest: {
		num: 669333,
		accuracy: 95,
		basePower: 95,
		category: "Special",
		name: "Snow Vest",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	shuttlelaunch: {
		num: 669334,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Shuttle Launch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	maxwildfire: {
		num: 669335,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "MAXWILDFIRE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	maxterror: {
		num: 669336,
		accuracy: true,
		basePower: 95,
		category: "Special",
		name: "MAXTERROR",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target, source, move) {
				if (source.isActive) target.addVolatile('trapped', source, move, 'trapper');
			},
		},
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	auroraresonance: {
		num: 669337,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Aurora Resonance",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	maxmalodor: {
		num: 669338,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "MAX Malodor",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	stunshock: {
		num: 669339,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Stun Shock",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	dracodepletion: {
		num: 669340,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Draco Depletion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	centiferno: {
		num: 669341,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Centiferno",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		volatileStatus: 'partiallytrapped',
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	imageofthebeast: {
		num: 669342,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "Image of the Beast",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	coiloftheworld: {
		num: 669343,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Coil of the World",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	cyberspacerise: {
		num: 669344,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Cyberspace Rise",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	blackplague: {
		num: 669345,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "BLACK PLAGUE",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	darkagehex: {
		num: 669346,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Dark Age Hex",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	technologyscoil: {
		num: 669347,
		accuracy: 95,
		basePower: 120,
		category: "Physical",
		name: "Technologys Coil",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	webfield: {
		num: 669348,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Web Field",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Bug",
		isNonstandard: "Future",
	},
	aquaweb: {
		num: 669349,
		accuracy: 95,
		basePower: 55,
		category: "Special",
		name: "Aquaweb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, web: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	brokenguillotine: {
		num: 669350,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Broken Guillotine",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Shadow",
		isNonstandard: "Future",
	},
	letthemeatcake: {
		num: 669351,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "LetThemEatCake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "foeSide",
		type: "Shadow",
		isNonstandard: "Future",
	},
	falsedelys: {
		num: 669352,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "False de Lys",
		pp: 10,
		priority: 4,
		flags: {},
		secondary: null,
		target: "self",
		type: "Shadow",
		isNonstandard: "Future",
	},
	knightofowner: {
		num: 669353,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "KnightOfOwner",
		pp: 10,
		priority: -1,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	trojanrush: {
		num: 669354,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Trojan Rush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	tricktackle: {
		num: 669356,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Trick Tackle",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	manaverse: {
		num: 669357,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Manaverse",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Magic",
		isNonstandard: "Future",
	},
	defensecharm: {
		num: 669358,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Defensecharm",
		pp: 25,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	magiccape: {
		num: 669359,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magic Cape",
		pp: 20,
		priority: 0,
		flags: {},
		condition: {
			duration: 1,
			onStart(target, source, effect) {
				this.add('-singleturn', target, 'move: Magic Coat');
				if (effect?.effectType === 'Move') {
					this.effectState.pranksterBoosted = effect.pranksterBoosted;
				}
			},
			onTryHitPriority: 2,
			onTryHit(target, source, move) {
				if (target === source || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				const newMove = this.dex.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = this.effectState.pranksterBoosted;
				this.actions.useMove(newMove, target, source);
				return null;
			},
			onAllyTryHitSide(target, source, move) {
				if (target.isAlly(source) || move.hasBounced || !move.flags['reflectable']) {
					return;
				}
				const newMove = this.dex.getActiveMove(move.id);
				newMove.hasBounced = true;
				newMove.pranksterBoosted = false;
				this.actions.useMove(newMove, this.effectState.target, source);
				return null;
			},
		},
		selfSwitch: 'copyvolatile',
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	bindingcircle: {
		num: 669360,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Binding Circle",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	mysticlock: {
		num: 669361,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Mystic Lock",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	copyright: {
		num: 669362,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Copyright",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Paper",
		isNonstandard: "Future",
	},
	stagehelper: {
		num: 669363,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stage Helper",
		pp: 10,
		priority: 5,
		flags: {},
		secondary: null,
		target: "adjacentAlly",
		type: "Magic",
		isNonstandard: "Future",
	},
	darksport: {
		num: 669364,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dark Sport",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Dark",
		isNonstandard: "Future",
	},
	darkscreen: {
		num: 669365,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dark Screen",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Dark",
		isNonstandard: "Future",
	},
	claustrowall: {
		num: 669366,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "ClaustroWall",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Fear",
		isNonstandard: "Future",
	},
	bouncycastle: {
		num: 669368,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Bouncy Castle",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Rubber",
		isNonstandard: "Future",
	},
	spiritstorm: {
		num: 669369,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spiritstorm",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Ghost",
		isNonstandard: "Future",
	},
	fallenbattlefield: {
		num: 669370,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fallen Battlefield",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Ghost",
		isNonstandard: "Future",
	},
	death: {
		num: 669372,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "DEATH",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	apexmutation: {
		num: 669373,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Apex Mutation",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	nadirmutation: {
		num: 669374,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nadir Mutation",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	selfirradiate: {
		num: 669375,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Self Irradiate",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	radiotherapy: {
		num: 669376,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Radiotherapy",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	chemotherapy: {
		num: 669377,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Chemotherapy",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	slugsmooch: {
		num: 669378,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Slug Smooch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	hostslicer: {
		num: 669379,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Host Slicer",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 30,
			volatileStatus: 'bleed',
		},
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	infooverload: {
		num: 669380,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Info Overload",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
		isNonstandard: "Future",
	},
	selfishdrain: {
		num: 669381,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Selfish Drain",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	spiritcutter: {
		num: 669382,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Spirit Cutter",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	fullmoon: {
		num: 669383,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Full Moon",
		pp: 10,
		priority: 0,
		flags: {mirror: 1, moon: 1},
		secondary: null,
		target: "all",
		type: "Fairy",
		isNonstandard: "Future",
	},
	eclipse: {
		num: 669384,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Eclipse",
		pp: 15,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Dark",
		isNonstandard: "Future",
	},
	armorcrash: {
		num: 669385,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Armor Crash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	chlorobeam: {
		num: 669386,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Chlorobeam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sun: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Grass",
		isNonstandard: "Future",
	},
	omegaeclipse: {
		num: 669387,
		accuracy: 85,
		basePower: 150,
		category: "Special",
		name: "Omega Eclipse",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	frozeniceberg: {
		num: 669388,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Frozen Iceberg",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	glassshot: {
		num: 669389,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Glass Shot",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	anytime: {
		num: 669390,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Anytime",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	throwvoice: {
		num: 669391,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Throw Voice",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	glasschop: {
		num: 669392,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Glass Chop",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	midnightblade: {
		num: 669393,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Midnight Blade",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	abruption: {
		num: 669394,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Abruption",
		pp: 10,
		priority: 3,
		flags: {protect: 1, mirror: 1, defrost: 1},
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Abruption only works on your first turn out.");
				return false;
			}
		},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	cough: {
		num: 669395,
		accuracy: 95,
		basePower: 65,
		category: "Special",
		name: "Cough",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	soupsplash: {
		num: 669396,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Soup Splash",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Food",
		isNonstandard: "Future",
	},
	coronavirus: {
		num: 669397,
		accuracy: 80,
		basePower: 110,
		category: "Special",
		name: "Corona Virus",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	apocalypsepunch: {
		num: 669398,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Apocalypse Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	timestall: {
		num: 669399,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Time Stall",
		pp: 1,
		priority: 0,
		flags: {gravity: 1},
		secondary: null,
		target: "self",
		type: "Time",
		isNonstandard: "Future",
	},
	acidsport: {
		num: 669400,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Sport",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Poison",
		isNonstandard: "Future",
	},
	tauroskiathermokrasia: {
		num: 669401,
		accuracy: 80,
		basePower: 110,
		category: "Physical",
		name: "TauroSkiaThermokrasia",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	wildbeastslogic: {
		num: 669402,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "WildBeastsLogic",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		boosts: {
			evasion: 1,
		},
		condition: {
			onStart(target, source, effect) {
				if (effect?.id === 'zpower') {
					this.add('-start', target, 'move: WildBeastsLogic', '[zeffect]');
				} else if (effect && (['costar', 'imposter', 'psychup', 'transform'].includes(effect.id))) {
					this.add('-start', target, 'move: WildBeastsLogic', '[silent]');
				} else {
					this.add('-start', target, 'move: WildBeastsLogic');
				}
			},
			onModifyCritRatio(critRatio) {
				return critRatio + 2;
			},
		},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	nurseofsteel: {
		num: 669403,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nurse of Steel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	nightingalepledge: {
		num: 669404,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nightingale Pledge",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "allySide",
		type: "Normal",
		isNonstandard: "Future",
	},
	lamortespoir: {
		num: 669405,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "LaMortEspoir",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	aciddrench: {
		num: 669406,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Acid Drench",
		pp: 30,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	headrush: {
		num: 669408,
		accuracy: 85,
		basePower: 35,
		category: "Physical",
		name: "Head Rush",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	fintanfinegas: {
		num: 669409,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fintan Finegas",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Water",
		isNonstandard: "Future",
	},
	uiscebeatha: {
		num: 669410,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Uisce Beatha",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1, heal: 1},
		onHit(pokemon) {
			if (['', 'slp', 'frz'].includes(pokemon.status) && pokemon.hp >= pokemon.maxhp) return false;
			pokemon.cureStatus();
		},
		heal: [1, 2],
		secondary: null,
		target: "allySide",
		type: "Water",
		isNonstandard: "Future",
	},
	macanluin: {
		num: 669411,
		accuracy: 90,
		basePower: 110,
		category: "Physical",
		name: "Mac an Luin",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	meretrixmaterconflag: {
		num: 669412,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "MeretrixMaterConflag",
		pp: 5,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Shadow",
		isNonstandard: "Future",
	},
	mumyousandanzuki: {
		num: 669413,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "MumyouSandanZuki",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	flagofsincerity: {
		num: 669414,
		accuracy: 95,
		basePower: 20,
		category: "Physical",
		name: "Flag of Sincerity",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	queenofvictory: {
		num: 669415,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Queen of Victory",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		isNonstandard: "Future",
	},
	swordofboudica: {
		num: 669416,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sword of Boudica",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	chariotofboudica: {
		num: 669417,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Chariot of Boudica",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Fighting",
		isNonstandard: "Future",
	},
	lentumdomusillustrius: {
		num: 669418,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "LentumDomusIllustrius",
		pp: 10,
		priority: 0,
		flags: {sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	masshysteria: {
		num: 669419,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "Mass Hysteria",
		pp: 10,
		priority: 0,
		volatileStatus: 'confusion',
		boosts: {
			atk: 2,
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Chaos",
		isNonstandard: "Future",
	},
	flucticulusdiana: {
		num: 669420,
		accuracy: 95,
		basePower: 0,
		category: "Status",
		name: "FlucticulusDiana",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, moon: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	shadowarrow: {
		num: 669421,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Shadow Arrow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	lovearrow: {
		num: 669422,
		accuracy: 90,
		basePower: 75,
		category: "Special",
		name: "Love Arrow",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	mikotto: {
		num: 669423,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Mikotto",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	tristaramoremio: {
		num: 669424,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "TristarAmoreMio",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1, moon: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	behemoth: {
		num: 669425,
		accuracy: 95,
		basePower: 130,
		category: "Physical",
		name: "Behemoth",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	gorillapower: {
		num: 669426,
		accuracy: 95,
		basePower: 100,
		category: "Physical",
		name: "Gorilla Power",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	undeathlife: {
		num: 669427,
		accuracy: 100,
		basePower: 110,
		category: "Physical",
		name: "UNDEATH LIFE",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 100,
			onHit(target) {
				if (target.getTypes().join() === 'Zombie' || !target.setType('Zombie')) {
					// Soak should animate even when it fails.
					// Returning false would suppress the animation.
					this.add('-fail', target);
					return null;
				}
				this.add('-start', target, 'typechange', 'Zombie');
			},
		},
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	soulleecher: {
		num: 669428,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Soul Leecher",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	consumerism: {
		num: 669429,
		accuracy: 90,
		basePower: 140,
		category: "Physical",
		name: "CONSUMERISM",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	thedevourer: {
		num: 669430,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "THEDEVOURER",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	replenigger: {
		num: 669431,
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "REPLENIGGER",
		pp: 40,
		priority: 6,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	jewrocks: {
		num: 669432,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Jew Rocks",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	salmonleap: {
		num: 669433,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Salmon Leap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bounce: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	mirrorize: {
		num: 669434,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Mirrorize",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	drumpalm: {
		num: 669435,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Drum Palm",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	jianhop: {
		num: 669436,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Jian Hop",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bounce: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	multidirectionblade: {
		num: 669437,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "MultiDirectionBlade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	witchrage: {
		num: 669438,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Witch Rage",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	leapoffaith: {
		num: 669439,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Leap of Faith",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1, bounce: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	lavaquake: {
		num: 669440,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Lavaquake",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Magma",
		isNonstandard: "Future",
	},
	featherarrow: {
		num: 669441,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Feather Arrow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	gangalf: {
		num: 669442,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "GANGALF",
		pp: 40,
		priority: 3,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	hotmonkeydicc: {
		num: 669443,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "HOTMONKEYDICC",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	veryhazard: {
		num: 669444,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "VERY HAZARD",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Rock",
		isNonstandard: "Future",
	},
	gangbang: {
		num: 669445,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Gangbang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	santamariaanchor: {
		num: 669452,
		accuracy: 85,
		basePower: 110,
		category: "Physical",
		name: "SantaMaria Anchor",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	fabricworld: {
		num: 669453,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fabric World",
		pp: 10,
		priority: 0,
		pseudoWeather: 'fabricworld',
		condition: {
			duration: 5,
			durationCallback(target, source, effect) {
				if (source?.hasItem('rottedrock') ) {
					return 10;
				}
				return 5;
			},
			onFieldStart(field, source) {
				this.add('-fieldstart', 'move: Fabric World', '[of] ' + source);
			},
			onBasePowerPriority: 1,
			onBasePower(basePower, attacker, defender, move) {
				if (move.type === 'fabric') {
					this.debug('fabric world increase');
					return this.chainModify([1.5]);
				}
			},
			onModifyDefPriority: 10,
			onModifyDef(def, pokemon) {
			if (pokemon.hasType('fabric')) {
				return this.chainModify([1.5]);
			}			
		},
			onFieldResidualOrder: 27,
			onFieldResidualSubOrder: 4,
			onFieldEnd() {
				this.add('-fieldend', 'move: Fabric World');
			},
		},
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Fabric",
		isNonstandard: "Future",
	},
	vformation: {
		num: 669454,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "V Formation",
		pp: 5,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Flying",
		isNonstandard: "Future",
	},
	coralreef: {
		num: 669455,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coral Reef",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Water",
		isNonstandard: "Future",
	},
	coralgraze: {
		num: 669456,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Coral Graze",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Water",
		isNonstandard: "Future",
	},
	coralcannon: {
		num: 669457,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Coral Cannon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, coral: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	coralblade: {
		num: 669458,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Coral Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	lubricate: {
		num: 669459,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lubricate",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Greasy",
		isNonstandard: "Future",
	},
	oilskin: {
		num: 669460,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Oil Skin",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Greasy",
		isNonstandard: "Future",
	},
	greasebomb: {
		num: 669461,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Grease Bomb",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	greasyslap: {
		num: 669462,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Greasy Slap",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, source, target, move) {
			const item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemState, target, target, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit(target, source) {
			if (source.hp) {
				const item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Greasy Slap', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	evileye: {
		num: 669463,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Evil Eye",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	shadowyeyes: {
		num: 669464,
		accuracy: 100,
		basePower: 50,
		category: "Special",
		name: "Shadowy Eyes",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	sporeexplosion: {
		num: 669465,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Spore Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Grass",
		isNonstandard: "Future",
	},
	greasypeck: {
		num: 669466,
		accuracy: 100,
		basePower: 35,
		category: "Physical",
		name: "Greasy Peck",
		pp: 35,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, beak: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	oildrill: {
		num: 669467,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Oil Drill",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	pumpjack: {
		num: 669468,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Pumpjack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	stoke: {
		num: 669469,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Stoke",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, sound: 1},
		secondary: null,
		target: "self",
		type: "Fire",
		isNonstandard: "Future",
	},
	rockbreaker: {
		num: 669470,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Rock Breaker",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	exhaustflame: {
		num: 669471,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Exhaust Flame",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	atomicblaster: {
		num: 669472,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Atomic Blaster",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	radiationblade: {
		num: 669473,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Radiation Blade",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	lightningjoust: {
		num: 669474,
		accuracy: 100,
		basePower: 110,
		category: "Physical",
		name: "Lightning Joust",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	shieldofjust: {
		num: 669475,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Shield of Just",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	terriertornado: {
		num: 669476,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Terrier Tornado",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	dumdumuppercut: {
		num: 669477,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Dumdum Uppercut",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	goldentriangle: {
		num: 669478,
		accuracy: 75,
		basePower: 110,
		category: "Special",
		name: "Golden Triangle",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	burstshot: {
		num: 669479,
		accuracy: 90,
		basePower: 50,
		category: "Special",
		name: "Burst Shot",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cyber",
		isNonstandard: "Future",
	},
	numesludge: {
		num: 669480,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Numesludge",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	pooptoss: {
		num: 669481,
		accuracy: 90,
		basePower: 75,
		category: "Physical",
		name: "Poop Toss",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	guerillapoop: {
		num: 669482,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Guerilla Poop",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	raremetalpoop: {
		num: 669483,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "RareMetalPoop",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	lovelyattack: {
		num: 669484,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Lovely Attack",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	loveserenade: {
		num: 669485,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Love Serenade",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	darkrecital: {
		num: 669486,
		accuracy: 55,
		basePower: 115,
		category: "Special",
		name: "Dark Recital",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	monkeyplay: {
		num: 669487,
		accuracy: 95,
		basePower: 100,
		category: "Special",
		name: "Monkey Play",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	lullabybubble: {
		num: 669488,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Lullaby Bubble",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	symphonycrusher: {
		num: 669489,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Symphony Crusher",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	kobushitone: {
		num: 669490,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Kobushi Tone",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	needlesquall: {
		num: 669491,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Needle Squall",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "allAdjacent",
		type: "Steel",
		isNonstandard: "Future",
	},
	poopdunk: {
		num: 669492,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Poop Dunk",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	antigravity: {
		num: 669493,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Anti Gravity",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	cowerbehind: {
		num: 669494,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cower Behind",
		pp: 15,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Dark",
		isNonstandard: "Future",
	},
	misdirection: {
		num: 669495,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Misdirection",
		pp: 15,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	proxy: {
		num: 669496,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Proxy",
		pp: 15,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	frequency: {
		num: 669497,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Frequency",
		pp: 15,
		priority: 0,
		flags: {},onHit(target, source, effect) {
			const moves = this.dex.moves.all().filter(move => (
				(![2, 4].includes(this.gen) || !source.moves.includes(move.id)) &&
				!move.realMove && !move.isZ && !move.isMax &&
				(!move.isNonstandard || move.isNonstandard === 'Unobtainable') &&
				move.type === 'Sound' && move.id !== 'frequency'
			));
			let randomMove = '';
			if (moves.length) {
				moves.sort((a, b) => a.num - b.num);
				randomMove = this.sample(moves).id;
			}
			if (!randomMove) return false;
			source.side.lastSelectedMove = this.toID(randomMove);
			this.actions.useMove(randomMove, target);
		},
		secondary: null,
		target: "self",
		type: "Sound",
		isNonstandard: "Future",
	},
	fortifyally: {
		num: 669498,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Fortify Ally",
		pp: 15,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	timeexchange: {
		num: 669499,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Time Exchange",
		pp: 15,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Time",
		isNonstandard: "Future",
	},
	shieldpress: {
		num: 669500,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Shield Press",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	voltmotor: {
		num: 669501,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Volt Motor",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Tech",
		isNonstandard: "Future",
	},
	pixel: {
		num: 669502,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Pixel",
		pp: 35,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	mittenpound: {
		num: 669503,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Mitten Pound",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			boosts: {
				atk: -1,
			},
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	scarfwrap: {
		num: 669504,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Scarf Wrap",
		volatileStatus: 'partiallytrapped',
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	sweaterslam: {
		num: 669505,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Sweater Slam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			chance: 70,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	blurryblast: {
		num: 669506,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "BLURRY BLAST",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	braver: {
		num: 669507,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Braver",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	arcticemperor: {
		num: 669508,
		accuracy: 95,
		basePower: 50,
		category: "Physical",
		name: "Arctic Emperor",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	blowdrygun: {
		num: 669509,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "BlowDryGun",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	justicebullet: {
		num: 669510,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Justice Bullet",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	thunderer: {
		num: 669511,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Thunderer",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, west: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	bigiron: {
		num: 669512,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Big Iron",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, west: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	quickdraw: {
		num: 669513,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Quick Draw",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Quick Draw only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {protect: 1, mirror: 1, west: 1},
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	revolver: {
		num: 669514,
		accuracy: 90,
		basePower: 18,
		category: "Physical",
		name: "Revolver",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, west: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	pilpul: {
		num: 669515,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Pilpul",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	shepherdcrook: {
		num: 669516,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Shepherd Crook",
		pp: 15,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	sheepwool: {
		num: 669517,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Sheep Wool",
		pp: 10,
		priority: 0,
		secondary: {
			chance: 20,
			status: 'slp',
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	matzoball: {
		num: 669518,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "Matzo Ball",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	eatdango: {
		num: 669519,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Eat Dango",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	dangoball: {
		num: 669520,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Dango Ball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	phantommaiden: {
		num: 669521,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Phantom Maiden",
		pp: 5,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.gender === 'F') {
				this.debug('BP doubled on female target');
				return move.basePower * 1.5;
			}
			return move.basePower;
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					atk: 1,
					spa: 1,
				},
			},
		},
		drain: [1, 2],
		flags: {protect: 1, mirror: 1},
		target: "normal",
		type: "Zombie",
		isNonstandard: "Future",
	},
	woodspin: {
		num: 669522,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Wood Spin",
		pp: 30,
		priority: 0,
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	dreidelspin: {
		num: 669523,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dreidel Spin",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Wood",
		isNonstandard: "Future",
	},
	hey: {
		num: 669524,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Hey",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	gimmel: {
		num: 669525,
		accuracy: 60,
		basePower: 1,
		category: "Physical",
		name: "Gimmel",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	nun: {
		num: 669526,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Nun",
		pp: 40,
		priority: 0,
		flags: {gravity: 1},
		secondary: null,
		target: "self",
		type: "Wood",
		isNonstandard: "Future",
	},
	shin: {
		num: 669527,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Shin",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, snatch: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	lordchaldeas: {
		num: 669528,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lord Chaldeas",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Steel",
		isNonstandard: "Future",
	},
	lordcamelot: {
		num: 669529,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lord Camelot",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Steel",
		isNonstandard: "Future",
	},
	rousingresolution: {
		num: 669530,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Rousing Resolution",
		pp: 20,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	sgaedearg: {
		num: 669531,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "S Gae Dearg",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	sgaebuidhe: {
		num: 669532,
		accuracy: 95,
		basePower: 85,
		category: "Physical",
		name: "S Gae Buidhe",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	cyberpunch: {
		num: 669535,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Cyber Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	hannukahcandles: {
		num: 669536,
		accuracy: 85,
		basePower: 8,
		category: "Special",
		name: "Hannukah Candles",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	powermorph: {
		num: 669537,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Power Morph",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	timbit: {
		num: 669538,
		accuracy: 90,
		basePower: 30,
		category: "Physical",
		name: "Timbit",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	icingspray: {
		num: 669539,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Icing Spray",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	icingcannon: {
		num: 669540,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Icing Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	donutring: {
		num: 669541,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Donut Ring",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	trashthrash: {
		num: 669542,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Trash Thrash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
		isNonstandard: "Future",
	},
	sensualtouch: {
		num: 669544,
		accuracy: 65,
		basePower: 0,
		category: "Status",
		name: "Sensual Touch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	mindfogger: {
		num: 669545,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Mind Fogger",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	helterskelter: {
		num: 669546,
		accuracy: 85,
		basePower: 0,
		category: "Status",
		name: "Helter Skelter",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	moonladder: {
		num: 669547,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Moon Ladder",
		pp: 10,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	darknesslove: {
		num: 669548,
		accuracy: 85,
		basePower: 100,
		category: "Special",
		name: "Darkness Love",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	phantompain: {
		num: 669549,
		accuracy: 75,
		basePower: 40,
		category: "Special",
		name: "Phantom Pain",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	paperbind: {
		num: 669550,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Paper Bind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	requiemfordeath: {
		num: 669551,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "RequiemforDeath",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	symphony: {
		num: 669552,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Symphony",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	fleurdelys: {
		num: 669553,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Fleur De Lys",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	unyieldstance: {
		num: 669554,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Unyield Stance",
		pp: 10,
		priority: 3,
		flags: {},
		secondary: null,
		target: "self",
		type: "Steel",
		isNonstandard: "Future",
	},
	rakanfudarakutokai: {
		num: 669555,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		name: "RakanFudarakutokai",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	tenshinkashouzanmai: {
		num: 669556,
		accuracy: 75,
		basePower: 110,
		category: "Special",
		name: "TenshinKashouZanmai",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	stalkinggaze: {
		num: 669557,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Stalking Gaze",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	shapeshiftdragon: {
		num: 669558,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "ShapeshiftDragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	ovenslam: {
		num: 669559,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Oven Slam",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	deadheartbeatmelody: {
		num: 669560,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "DeadHeartbeatMelody",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	phantasmalpedigree: {
		num: 669561,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Phantasmal Pedigree",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	cyberphantasy: {
		num: 669562,
		accuracy: 70,
		basePower: 60,
		category: "Physical",
		name: "Cyber Phantasy",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	febrileinspiration: {
		num: 669563,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Febrile Inspiration",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Crystal",
		isNonstandard: "Future",
	},
	ichorofreverie: {
		num: 669564,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Ichor of Reverie",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	meditativesensitivity: {
		num: 669565,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "MeditativeSensitivity",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	raveshadowflash: {
		num: 669566,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "RaveShadowFlash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	unfeelpatrolspirits: {
		num: 669567,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "UnfeelPatrolSpirits",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	summonelementals: {
		num: 669568,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Summon Elementals",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Magic",
		isNonstandard: "Future",
	},
	elementalgem: {
		num: 669569,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Elemental Gem",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Crystal",
		isNonstandard: "Future",
	},
	swordofparacelsus: {
		num: 669570,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Sword of Paracelsus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	fireelementals: {
		num: 669571,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Fire Elementals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	waterelementals: {
		num: 669572,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Water Elementals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	earthelementals: {
		num: 669573,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Earth Elementals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		isNonstandard: "Future",
	},
	windelementals: {
		num: 669574,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Wind Elementals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	pashupata: {
		num: 669575,
		accuracy: 70,
		basePower: 120,
		category: "Physical",
		name: "Pashupata",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	agnigandiva: {
		num: 669576,
		accuracy: true,
		basePower: 90,
		category: "Special",
		name: "Agni Gandiva",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, arrow: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	tarasqueshield: {
		num: 669577,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Tarasque Shield",
		pp: 15,
		priority: 1,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Dragon",
		isNonstandard: "Future",
	},
	tarasque: {
		num: 669578,
		accuracy: 75,
		basePower: 120,
		category: "Physical",
		name: "Tarasque",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dragon",
		isNonstandard: "Future",
	},
	christinechristine: {
		num: 669579,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "Christine Christine",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fear",
		isNonstandard: "Future",
	},
	kinopunch: {
		num: 669580,
		accuracy: 75,
		basePower: 100,
		category: "Physical",
		name: "Kino Punch",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	skinalive: {
		num: 669581,
		accuracy: 65,
		basePower: 120,
		category: "Physical",
		name: "Skin Alive",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	innardspunch: {
		num: 669583,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Innards Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	lapithaicaeneus: {
		num: 669584,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Lapithai Caeneus",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	poseidonmaelstrom: {
		num: 669585,
		accuracy: 75,
		basePower: 120,
		category: "Special",
		name: "Poseidon Maelstrom",
		pp: 5,
		priority: -1,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	"3dattack": {
		num: 669586,
		accuracy: 90,
		basePower: 30,
		category: "Special",
		name: "3D Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	digicharge: {
		num: 669587,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Digi Charge",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	install: {
		num: 669588,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Install",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Cyber",
		isNonstandard: "Future",
	},
	shortcut: {
		num: 669589,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Shortcut",
		pp: 20,
		priority: 1,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	highbreaching: {
		num: 669590,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "High Breaching",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	croceamors: {
		num: 669591,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Crocea Mors",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	throatheal: {
		num: 669592,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Throat Heal",
		pp: 5,
		onHit(target, source) {
			this.add('-activate', source, 'move: Throat Heal');
			let success = false;
			if (target.volatiles['throatchop']) {
				target.removeVolatile('uproar');
				return;
			}
			const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];
			for (const ally of allies) {
				if (ally.cureStatus()) success = true;
				
			}
			return success;

		},
		priority: 0,
		flags: {snatch: 1, sound: 1},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	bendwill: {
		num: 669593,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Bend Will",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	bakingpowderveil: {
		num: 669594,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "BakingPowderVeil",
		pp: 15,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Food",
		isNonstandard: "Future",
	},
	minddrain: {
		num: 669595,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Mind Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	fourseasons: {
		num: 669596,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Four Seasons",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	julianaboomerang: {
		num: 669597,
		accuracy: 90,
		basePower: 50,
		category: "Physical",
		name: "Juliana Boomerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	goldentornado: {
		num: 669598,
		accuracy: 90,
		basePower: 65,
		category: "Special",
		name: "Golden Tornado",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	extortionpummel: {
		num: 669599,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Extortion Pummel",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	destitutiondrain: {
		num: 669600,
		accuracy: 80,
		basePower: 120,
		category: "Special",
		name: "Destitution Drain",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		isNonstandard: "Future",
	},
	unchirush: {
		num: 669601,
		accuracy: 85,
		basePower: 30,
		category: "Physical",
		name: "Unchi Rush",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	voltexplosion: {
		num: 669602,
		accuracy: 100,
		basePower: 200,
		category: "Special",
		name: "Volt Explosion",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Electric",
		isNonstandard: "Future",
	},
	leylines: {
		num: 669603,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Leylines",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Magic",
		isNonstandard: "Future",
	},
	diamonddust: {
		num: 669604,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Diamond Dust",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	hatspin: {
		num: 669605,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Hat Spin",
		pp: 20,
		priority: 0,
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Hat Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Hat Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Hat Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Hat Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	eaurevoir: {
		num: 669606,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Eau Revoir",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	prowl: {
		num: 669607,
		accuracy: 70,
		basePower: 110,
		category: "Physical",
		name: "Prowl",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	dangerousgame: {
		num: 669608,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Dangerous Game",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Chaos",
		isNonstandard: "Future",
	},
	duriaantiquior: {
		num: 669609,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Duria Antiquior",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Rock",
		isNonstandard: "Future",
	},
	horseshoecrab: {
		num: 669610,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Horseshoe Crab",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	ammonite: {
		num: 669611,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		name: "Ammonite",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	dimorphodon: {
		num: 669612,
		accuracy: 100,
		basePower: 30,
		category: "Physical",
		name: "Dimorphodon",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	ichthyosaurus: {
		num: 669613,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Ichthyosaurus",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	astrapsteargo: {
		num: 669614,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Astrapste Argo",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Normal",
		isNonstandard: "Future",
	},
	argonautica: {
		num: 669615,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Argonautica",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Normal",
		isNonstandard: "Future",
	},
	enviousrage: {
		num: 669616,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Envious Rage",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	sexysquirt: {
		num: 669617,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Sexy Squirt",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	embrace: {
		num: 669618,
		accuracy: 90,
		basePower: 55,
		category: "Physical",
		name: "Embrace",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	lovebite: {
		num: 669619,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Love Bite",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	sadomaso: {
		num: 669620,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Sadomaso",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	domesticabuse: {
		num: 669621,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Domestic Abuse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	lovehypnosis: {
		num: 669622,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Love Hypnosis",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	emotionalabuse: {
		num: 669623,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Emotional Abuse",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	vore: {
		num: 669624,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Vore",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, gravity: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	toughlove: {
		num: 669625,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Tough Love",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	wetdreams: {
		num: 669627,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Wet Dreams",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	xxxsite: {
		num: 669628,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "XXX Site",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	sexysleep: {
		num: 669629,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Sexy Sleep",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Heart",
		isNonstandard: "Future",
	},
	snowdogechallenge: {
		num: 669630,
		accuracy: 100,
		basePower: 95,
		category: "Physical",
		name: "SNOWDOGECHALLENGE",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	yourbestnightmare: {
		num: 669634,
		accuracy: 70,
		basePower: 120,
		category: "Special",
		name: "YOURBESTNIGHTMARE",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
		isNonstandard: "Future",
	},
	chaossaber: {
		num: 669635,
		accuracy: 70,
		basePower: 70,
		category: "Physical",
		name: "Chaos Saber",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	caldera: {
		num: 669636,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Caldera",
		pp: 10,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	hieroglyphein: {
		num: 669638,
		accuracy: 60,
		basePower: 150,
		category: "Special",
		name: "Hieroglyphein",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 20,
			boosts: {
				spd: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	eromangasaurus: {
		num: 669639,
		accuracy: 90,
		basePower: 120,
		category: "Special",
		name: "EROMANGASAURUS",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		recoil: [33, 100],
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	stuffedtackle: {
		num: 669640,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Stuffed Tackle",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			chance: 10,
			self: {
				boosts: {
					def: 1,
				},
			},
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	nuclearlance: {
		num: 669641,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Nuclear Lance",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
		isNonstandard: "Future",
	},
	aquatichorror: {
		num: 669642,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Aquatic Horror",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Meme",
		isNonstandard: "Future",
	},
	vocaloid: {
		num: 669643,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Vocaloid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Cyber",
		isNonstandard: "Future",
	},
	chupacabra: {
		num: 669644,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Chupacabra",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		drain: [1, 2],
		selfSwitch: true,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	timestop: {
		num: 669645,
		accuracy: 65,
		basePower: 0,
		category: "Status",
		name: "Timestop",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	privatesquare: {
		num: 669646,
		accuracy: 65,
		basePower: 0,
		category: "Status",
		name: "Private Square",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Time",
		isNonstandard: "Future",
	},
	timestasis: {
		num: 669647,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Time Stasis",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		status: 'frz',
		target: "all",
		type: "Time",
		isNonstandard: "Future",
	},
	infiniteserpent: {
		num: 669648,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Infinite Serpent",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	metalbat: {
		num: 669649,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Metal Bat",
		pp: 10,
		priority: -6,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	tomitakeflash: {
		num: 669650,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Tomitake Flash",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
		isNonstandard: "Future",
	},
	selfharm: {
		num: 669651,
		accuracy: 90,
		basePower: 15,
		category: "Physical",
		name: "Self Harm",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "adjacentAllyOrSelf",
		type: "Dark",
		isNonstandard: "Future",
	},
	lasagnaattack: {
		num: 669652,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "Lasagna Attack",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	darkpuncture: {
		num: 669653,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Dark Puncture",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	pocketdimension: {
		num: 669654,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Pocket Dimension",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	thecure: {
		num: 669655,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "The Cure",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	whosonnext: {
		num: 669656,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Whos On Next",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	spaceacid: {
		num: 669657,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Space Acid",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	kill: {
		num: 669658,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Kill",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	focuslaser: {
		num: 669659,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "Focus Laser",
		pp: 20,
		priority: -3,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	coldsting: {
		num: 669660,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Cold Sting",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	lingerieattack: {
		num: 669661,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Lingerie Attack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: {
			chance: 50,
			volatileStatus: 'attract',
		},
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	justdesserts: {
		num: 669662,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		name: "Just Desserts",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	butterslap: {
		num: 669663,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Butter Slap",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	absolutevenom: {
		num: 669665,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "ABSOLUTE VENOM",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	apophismaw: {
		num: 669666,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Apophis Maw",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	serpentscure: {
		num: 669667,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Serpents Cure",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	hotcocoa: {
		num: 669668,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Hot Cocoa",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	sip: {
		num: 669669,
		accuracy: 100,
		basePower: 40,
		category: "Special",
		name: "Sip",
		pp: 25,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	thiccslam: {
		num: 669670,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "THICC Slam",
		pp: 10,
		priority: 0,
		basePowerCallback(pokemon, target) {
			const targetWeight = target.getWeight();
			const pokemonWeight = pokemon.getWeight();
			let bp;
			if (pokemonWeight >= targetWeight * 5) {
				bp = 120;
			} else if (pokemonWeight >= targetWeight * 4) {
				bp = 100;
			} else if (pokemonWeight >= targetWeight * 3) {
				bp = 80;
			} else if (pokemonWeight >= targetWeight * 2) {
				bp = 60;
			} else {
				bp = 40;
			}
			this.debug('BP: ' + bp);
			return bp;
		},
		onTryHit(target, pokemon, move) {
			if (target.volatiles['dynamax']) {
				this.add('-fail', pokemon, 'Dynamax');
				this.attrLastMove('[still]');
				return null;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	erase: {
		num: 669671,
		accuracy: 40,
		basePower: 1,
		category: "Physical",
		name: "ERASE",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	popcornblast: {
		num: 669672,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Popcorn Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	breakfastbreaker: {
		num: 669673,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Breakfast Breaker",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Breakfast Breaker only works on your first turn out.");
				return false;
			}
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	insanitymode: {
		num: 669674,
		accuracy: 95,
		basePower: 125,
		category: "Physical",
		name: "Insanity Mode",
		pp: 1,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "randomNormal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	yourebluenow: {
		num: 669677,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "YoureBlueNow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	vacuumcut: {
		num: 669676,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Vacuum Cut",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	kidnap: {
		num: 669677,
		accuracy: 90,
		basePower: 60,
		category: "Physical",
		name: "Kidnap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	storagepower: {
		num: 669678,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Storage Power",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	firewallpress: {
		num: 669679,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Firewall Press",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	cosmiclaw: {
		num: 669681,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Cosmic Law",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	stored: {
		num: 669682,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "STORED",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	snacktrap: {
		num: 669683,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Snack Trap",
		pp: 5,
		priority: -6,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Food",
		isNonstandard: "Future",
	},
	discombubbles: {
		num: 669684,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Discombubbles",
		pp: 10,
		priority: 0,
		flags: {reflectable: 1, defrost: 1, nonsky: 1},
		sideCondition: 'discombubbles',
		condition: {
			// this is a side condition
			onSideStart(side) {
				this.add('-sidestart', side, 'move: Discombubbles');
			},
			onEntryHazard(pokemon) {
				if (!pokemon.isGrounded()) return;
				if (pokemon.hasType('Psychic') || pokemon.hasType('Fear')) {
					this.add('-sideend', pokemon.side, 'move: Discombubbles', '[of] ' + pokemon);
					pokemon.side.removeSideCondition('discombubbles');
				} else if (pokemon.hasItem('heavydutyboots')) {
					return;
				} else {
					pokemon.addVolatile('confusion', pokemon.side.foe.active[0]);
				}
			},
		},
		secondary: null,
		target: "foeSide",
		type: "Psychic",
		isNonstandard: "Future",
	},
	disasterblade: {
		num: 669685,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Disaster Blade",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePower(basePower, pokemon) {
			if (pokemon.volatiles[ 'perishsong']) {
				return this.chainModify(1.5);
			}
		},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	marshmellowfluff: {
		num: 669686,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Marshmellow Fluff",
		pp: 20,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Food",
		isNonstandard: "Future",
	},
	hauntedhouse: {
		num: 669687,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Haunted House",
		pp: 10,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Wood",
		isNonstandard: "Future",
	},
	floodlight: {
		num: 669688,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Floodlight",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Light",
		isNonstandard: "Future",
	},
	guidinglight: {
		num: 669689,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Guiding Light",
		pp: 10,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "allySide",
		type: "Light",
		isNonstandard: "Future",
	},
	coralbomb: {
		num: 669690,
		accuracy: 80,
		basePower: 80,
		category: "Physical",
		name: "Coral Bomb",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	theadversary: {
		num: 669691,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "The Adversary",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	morningstar: {
		num: 669692,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "MORNINGSTAR",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	divinelaws: {
		num: 669693,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Divine Laws",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	shadow: {
		num: 669694,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "SHADOW",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	him: {
		num: 669695,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "HIM",
		pp: 40,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Qmarks",
		isNonstandard: "Future",
	},
	foundryslash: {
		num: 669696,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "Foundry Slash",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Magma",
		isNonstandard: "Future",
	},
	greasepuke: {
		num: 669697,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Grease Puke",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
		isNonstandard: "Future",
	},
	oilyterrain: {
		num: 669699,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Oily Terrain",
		pp: 10,
		priority: 0,
		flags: {pulse: 1},
		secondary: null,
		target: "scripted",
		type: "Greasy",
		isNonstandard: "Future",
	},
	storedchaos: {
		num: 669700,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Stored CHAOS",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	violencegust: {
		num: 669701,
		accuracy: 100,
		basePower: 73,
		category: "Physical",
		name: "VIOLENCE GUST",
		pp: 15,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	absoluteice: {
		num: 669703,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Absolute Ice",
		pp: 1,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Ice",
		isNonstandard: "Future",
	},
	loveseed: {
		num: 669707,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Love Seed",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	bondage: {
		num: 669708,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Bondage",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	watersports: {
		num: 669709,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Water Sports",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "all",
		type: "Heart",
		isNonstandard: "Future",
	},
	squirtcannon: {
		num: 669710,
		accuracy: 100,
		basePower: 120,
		category: "Special",
		name: "Squirt Cannon",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	lovestruckpowder: {
		num: 669711,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Lovestruck Powder",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	matingcall: {
		num: 669712,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Mating Call",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	edging: {
		num: 669713,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Edging",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	pixiehearts: {
		num: 669714,
		accuracy: 95,
		basePower: 90,
		category: "Special",
		name: "Pixie Hearts",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	pixiewink: {
		num: 669715,
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Pixie Wink",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
		isNonstandard: "Future",
	},
	fireplay: {
		num: 669716,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Fire Play",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	footjob: {
		num: 669717,
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Footjob",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kick: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	buttslam: {
		num: 669718,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Butt Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	peachblossom: {
		num: 669719,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Peach Blossom",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Normal",
		isNonstandard: "Future",
	},
	sugarkiss: {
		num: 669720,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		name: "Sugar Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	butterflykiss: {
		num: 669721,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Butterfly Kiss",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		isNonstandard: "Future",
	},
	peckkiss: {
		num: 669722,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Peck Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	lizardkiss: {
		num: 669723,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Lizard Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	vacuumkiss: {
		num: 669724,
		accuracy: 100,
		basePower: 55,
		category: "Special",
		name: "Vacuum Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	gumkiss: {
		num: 669725,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Gum Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1, kiss: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
		isNonstandard: "Future",
	},
	flowerkiss: {
		num: 669726,
		accuracy: 100,
		basePower: 55,
		category: "Physical",
		name: "Flower Kiss",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	screwattack: {
		num: 669727,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Screw Attack",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	judge: {
		num: 669729,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Judge",
		pp: 30,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Cyber",
		isNonstandard: "Future",
	},
	poisondarts: {
		num: 669730,
		accuracy: 90,
		basePower: 18,
		category: "Physical",
		name: "Poison Darts",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	axeswing: {
		num: 669731,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Axe Swing",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	printingpress: {
		num: 669732,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Printing Press",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		overrideOffensiveStat: 'def',
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	magicmenu: {
		num: 669733,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Magic Menu",
		pp: 15,
		priority: 0,
		flags: {},
		secondary: null,
		target: "scripted",
		type: "Magic",
		isNonstandard: "Future",
	},
	sizz: {
		num: 669734,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		name: "Sizz",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	sizzle: {
		num: 669735,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Sizzle",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	bang: {
		num: 669736,
		accuracy: 90,
		basePower: 45,
		category: "Special",
		name: "Bang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	kaboom: {
		num: 669737,
		accuracy: 90,
		basePower: 60,
		category: "Special",
		name: "Kaboom",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	snooze: {
		num: 669738,
		accuracy: 60,
		basePower: 0,
		category: "Status",
		name: "Snooze",
		pp: 10,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Magic",
		isNonstandard: "Future",
	},
	flameslash: {
		num: 669739,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Flame Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	karackleslash: {
		num: 669740,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Karackle Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Ice",
		isNonstandard: "Future",
	},
	metalslash: {
		num: 669741,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Metal Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	hatcherman: {
		num: 669742,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Hatcher Man",
		pp: 20,
		priority: -3,
		flags: {contact: 1, protect: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	whack: {
		num: 669743,
		accuracy: 90,
		basePower: 5,
		category: "Special",
		name: "Whack",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	magicburst: {
		num: 669745,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "Magic Burst",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	kamikaze: {
		num: 669746,
		accuracy: 100,
		basePower: 250,
		category: "Special",
		name: "Kamikaze",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfdestruct: "always",
		secondary: null,
		target: "allAdjacent",
		type: "Magic",
		isNonstandard: "Future",
	},
	heal: {
		num: 669747,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Heal",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	spellbounce: {
		num: 669748,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Spell Bounce",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	accelerate: {
		num: 669749,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Accelerate",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	kaclang: {
		num: 669750,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Kaclang",
		pp: 15,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	zoom: {
		num: 669751,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Zoom",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		volatileStatus: 'substitute',
		onTryHit(source) {
			if (!this.canSwitch(source.side)) {
				this.add('-fail', source);
				return this.NOT_FAIL;
			}
			if (source.volatiles['substitute']) {
				this.add('-fail', source, 'move: Shed Tail');
				return this.NOT_FAIL;
			}
			if (source.hp <= Math.ceil(source.maxhp / 2)) {
				this.add('-fail', source, 'move: Shed Tail', '[weak]');
				return this.NOT_FAIL;
			}
		},
		onHit(target) {
			this.directDamage(Math.ceil(target.maxhp / 2));
		},
		self: {
			onHit(source) {
				source.skipBeforeSwitchOutEventFlag = true;
			},
		},
		selfSwitch: 'copyvolatile',
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	oomph: {
		num: 669752,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Oomph",
		pp: 30,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Magic",
		isNonstandard: "Future",
	},
	crossboomerang: {
		num: 669753,
		accuracy: 90,
		basePower: 40,
		category: "Physical",
		name: "Cross Boomerang",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		multihit: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	diamondpickaxe: {
		num: 669754,
		accuracy: 80,
		basePower: 120,
		category: "Physical",
		name: "Diamond Pickaxe",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
		isNonstandard: "Future",
	},
	ironsword: {
		num: 669755,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Iron Sword",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	minecart: {
		num: 669756,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Minecart",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	tragicend: {
		num: 669757,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Tragic End",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Dark",
		isNonstandard: "Future",
	},
	bloodritual: {
		num: 669758,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Blood Ritual",
		pp: 5,
		priority: 0,
		flags: {snatch: 1},
		secondary: null,
		target: "self",
		type: "Blood",
		isNonstandard: "Future",
	},
	arterystrike: {
		num: 669759,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Artery Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bleedingburst: {
		num: 669760,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Bleeding Burst",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodsplatter: {
		num: 669761,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Blood Splatter",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Blood",
		isNonstandard: "Future",
	},
	bloodport: {
		num: 669762,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Bloodport",
		pp: 10,
		priority: 0,
		flags: {contact: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	fatality: {
		num: 669764,
		accuracy: 30,
		basePower: 1,
		category: "Physical",
		name: "Fatality",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
		isNonstandard: "Future",
	},
	maneater: {
		num: 669765,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Man Eater",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1, bite: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	getoverhere: {
		num: 669766,
		accuracy: 90,
		basePower: 70,
		category: "Physical",
		name: "GET OVER HERE",
		pp: 10,
		priority: -3,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	hellfire: {
		num: 669767,
		accuracy: 100,
		basePower: 30,
		category: "Special",
		name: "Hellfire",
		pp: 15,
		priority: 0,
		secondary: {
			chance: 35,
			status: 'brn',
		},
		flags: {protect: 1, mirror: 1, defrost: 1},
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	boomstick: {
		num: 669768,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Boomstick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	fusrodah: {
		num: 669769,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Fus Ro Dah!",
		pp: 20,
		priority: -1,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	hairgrab: {
		num: 669770,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Hair Grab",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	ventclimb: {
		num: 669771,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Vent Climb",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	goldengun: {
		num: 669772,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		name: "Golden Gun",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	tirofinale: {
		num: 669773,
		accuracy: 90,
		basePower: 160,
		category: "Special",
		name: "Tiro Finale",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		self: {
			boosts: {
				def: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fabric",
		isNonstandard: "Future",
	},
	demonhorns: {
		num: 669774,
		accuracy: 90,
		basePower: 45,
		category: "Physical",
		name: "Demon Horns",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	chaosmissile: {
		num: 669775,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Chaos Missile",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	plasmaball: {
		num: 669776,
		accuracy: 90,
		basePower: 80,
		category: "Special",
		name: "Plasma Ball",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	meteoricburst: {
		num: 669777,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Meteoric Burst",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	dragonpummelin: {
		num: 669779,
		accuracy: 100,
		basePower: 12,
		category: "Physical",
		name: "Dragon Pummelin'",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	vaccinerehab: {
		num: 669780,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "VaccineRehab",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Psychic",
		isNonstandard: "Future",
	},
	retaliatespell: {
		num: 669781,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Retaliate Spell",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	bfg: {
		num: 669782,
		accuracy: 90,
		basePower: 150,
		category: "Special",
		name: "BFG",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Tech",
		isNonstandard: "Future",
	},
	junglespear: {
		num: 669783,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Jungle Spear",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Grass",
		isNonstandard: "Future",
	},
	bombard: {
		num: 669784,
		accuracy: 100,
		basePower: 10,
		category: "Special",
		name: "Bombard",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	justicecrash: {
		num: 669785,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Justice Crash",
		pp: 10,
		priority: 3,
		onTry(source) {
			if (!source.hasAbility('numerouno') && source.activeMoveActions > 1) {
				this.hint("Justice Crash only works on your first turn out.");
				return false;
			}
		},
		secondary: {
			chance: 100,
			volatileStatus: 'flinch',
		},
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	energyballs: {
		num: 669786,
		accuracy: 95,
		basePower: 1,
		category: "Special",
		name: "Energy Balls",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	machgunblow: {
		num: 669787,
		accuracy: 95,
		basePower: 35,
		category: "Physical",
		name: "MachGunBlow",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	ninjastrike: {
		num: 669788,
		accuracy: 100,
		basePower: 1,
		category: "Physical",
		name: "Ninja Strike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	edgecut: {
		num: 669789,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Edge Cut",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			let type = pokemon.getTypes()[0];
			if (type === "Bird") type = "???";
			move.type = type;
		},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	excitebike: {
		num: 669790,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Excite Bike",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
		isNonstandard: "Future",
	},
	liquidflare: {
		num: 669791,
		accuracy: 95,
		basePower: 80,
		category: "Physical",
		name: "Liquid Flare",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Fire",
		isNonstandard: "Future",
	},
	staffsmash: {
		num: 669792,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Staff Smash",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	stuntdouble: {
		num: 669793,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Stunt Double",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		selfSwitch: true,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	comboattack: {
		num: 669794,
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Combo Attack",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		isNonstandard: "Future",
	},
	bansheescream: {
		num: 669795,
		accuracy: 90,
		basePower: 90,
		category: "Special",
		name: "Banshee Scream",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	waterkick: {
		num: 669796,
		accuracy: 90,
		basePower: 85,
		category: "Physical",
		name: "Water Kick",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	finalheaven: {
		num: 669797,
		accuracy: 100,
		basePower: 140,
		category: "Physical",
		name: "Final Heaven",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onTry(source) {
			if (source.moveSlots.length < 2) return false; // Last Resort fails unless the user knows at least 2 moves
			let hasLastResort = false; // User must actually have Last Resort for it to succeed
			for (const moveSlot of source.moveSlots) {
				if (moveSlot.id === 'finalheaven') {
					hasLastResort = true;
					continue;
				}
				if (!moveSlot.used) return false;
			}
			return hasLastResort;
		},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	dolphinblow: {
		num: 669798,
		accuracy: 90,
		basePower: 95,
		category: "Physical",
		name: "Dolphin Blow",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	catastrophe: {
		num: 669799,
		accuracy: 100,
		basePower: 150,
		category: "Physical",
		name: "Catastrophe",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Tech",
		isNonstandard: "Future",
	},
	fraggrenade: {
		num: 669800,
		accuracy: 80,
		basePower: 65,
		category: "Physical",
		name: "Frag Grenade",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Tech",
		isNonstandard: "Future",
	},
	virusdrain: {
		num: 669801,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		name: "Virus Drain",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
		isNonstandard: "Future",
	},
	spacedrain: {
		num: 669802,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Space Drain",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	holysword: {
		num: 669803,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Holy Sword",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	mandragora: {
		num: 669804,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "Mandragora",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Grass",
		isNonstandard: "Future",
	},
	luminaire: {
		num: 669805,
		accuracy: 100,
		basePower: 100,
		category: "Special",
		name: "Luminaire",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacent",
		type: "Divine",
		isNonstandard: "Future",
	},
	serpentwhip: {
		num: 669806,
		accuracy: 85,
		basePower: 120,
		category: "Physical",
		name: "Serpent Whip",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		isNonstandard: "Future",
	},
	energysword: {
		num: 669807,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Energy Sword",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Cosmic",
		isNonstandard: "Future",
	},
	sexybeam: {
		num: 669808,
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Sexy Beam",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
		isNonstandard: "Future",
	},
	boltslash: {
		num: 669809,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Bolt Slash",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	swordofdusk: {
		num: 669810,
		accuracy: 90,
		basePower: 150,
		category: "Physical",
		name: "Sword of Dusk",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	simcity: {
		num: 669811,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "Sim City",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	burialground: {
		num: 669812,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Burial Ground",
		pp: 5,
		priority: 0,
		flags: {reflectable: 1},
		secondary: null,
		target: "foeSide",
		type: "Zombie",
		isNonstandard: "Future",
	},
	threelineformation: {
		num: 669813,
		accuracy: 90,
		basePower: 100,
		category: "Special",
		name: "ThreeLineFormation",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	demonkingsixthheaven: {
		num: 669814,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "DemonKingSixthHeaven",
		pp: 5,
		priority: 0,
		flags: {mirror: 1},
		secondary: null,
		target: "all",
		type: "Chaos",
		isNonstandard: "Future",
	},
	jyuohanketsu: {
		num: 669815,
		accuracy: 90,
		basePower: 110,
		category: "Special",
		name: "Jyu O Hanketsu",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	suzumegaeshi: {
		num: 669816,
		accuracy: 100,
		basePower: 90,
		category: "Physical",
		name: "Suzume Gaeshi",
		pp: 15,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	durindana: {
		num: 669817,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "Durindana",
		pp: 5,
		priority: 0,
		flags: {},
		secondary: null,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	seishinkatadoru: {
		num: 669818,
		accuracy: 95,
		basePower: 110,
		category: "Special",
		name: "Seishin Katadoru",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
		isNonstandard: "Future",
	},
	himikopunch: {
		num: 669819,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Himiko Punch",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 100,
			boosts: {
				def: -1,
			},
		},
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	hassotobi: {
		num: 669820,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Hasso Tobi",
		pp: 10,
		priority: 0,
		self: {
			volatileStatus: 'focusenergy',
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		flags: {contact: 1, protect: 1, mirror: 1},
		target: "normal",
		type: "Wind",
		isNonstandard: "Future",
	},
	usumidori: {
		num: 669821,
		accuracy: true,
		basePower: 80,
		category: "Physical",
		name: "Usumidori",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	hoemaru: {
		num: 669822,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Hoemaru",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Sound",
		isNonstandard: "Future",
	},
	kikenjo: {
		num: 669823,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Kikenjo",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onAfterHit(target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		onAfterSubDamage(damage, target, pokemon) {
			if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
				this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
			}
			const sideConditions = ['spikes', 'toxicspikes', 'stealthrock', 'stickyweb', 'gmaxsteelsurge', 'luckyroll', 
			'magictrap', 'pillowpile', 'wiretap', 'mines', 'brambles', 'icicles','scrapmetal', 'legotrap', 'hotcoals', 'acidtrap', 'discombubbles'];
			for (const condition of sideConditions) {
				if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
					this.add('-sideend', pokemon.side, this.dex.conditions.get(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
			}
			if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
				pokemon.removeVolatile('partiallytrapped');
			}
		},
		secondary: {
			chance: 100,
			self: {
				boosts: {
					spe: 1,
				},
			},
		},
		critRatio: 2,
		target: "normal",
		type: "Water",
		isNonstandard: "Future",
	},
	alflaylawalayla: {
		num: 669824,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "Alf Layla wa Layla",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
		isNonstandard: "Future",
	},
	mysteryslayer: {
		num: 669825,
		accuracy: 90,
		basePower: 80,
		category: "Physical",
		name: "Mystery Slayer",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		onEffectiveness(typeMod, target, type) {
			if (type === 'Fairy' || type === 'Chaos'|| type === 'Ghost'|| type === 'Dragon'|| type === 'Zombie') return 1;
		},
		critRatio: 2,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	gooushourai: {
		num: 669826,
		accuracy: 100,
		basePower: 15,
		category: "Physical",
		name: "Goou Shourai",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Electric",
		isNonstandard: "Future",
	},
	hameshavanim: {
		num: 669828,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Hamesh Avanim",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		isNonstandard: "Future",
	},
	hansainokaen: {
		num: 669829,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Hansai no Kaen",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1, pulse: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Fire",
		isNonstandard: "Future",
	},
	arkofthecovenant: {
		num: 669830,
		accuracy: 40,
		basePower: 90,
		category: "Physical",
		name: "Ark of the Covenant",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	doujoujikane: {
		num: 669831,
		accuracy: 85,
		basePower: 110,
		category: "Physical",
		name: "Doujouji Kane",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	prydwentuberiding: {
		num: 669832,
		accuracy: 100,
		basePower: 110,
		category: "Special",
		name: "PrydwenTubeRiding",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: {
			chance: 80,
			boosts: {
				spa: -1,
			},
		},
		target: "allAdjacentFoes",
		type: "Water",
		isNonstandard: "Future",
	},
	sanatkumara: {
		num: 669833,
		accuracy: 90,
		basePower: 120,
		category: "Physical",
		name: "Sanat Kumara",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Magic",
		isNonstandard: "Future",
	},
	senshibankou: {
		num: 669834,
		accuracy: 70,
		basePower: 100,
		category: "Special",
		name: "Senshibankou",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Poison",
		isNonstandard: "Future",
	},
	sakesplash: {
		num: 669835,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Sake Splash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
		isNonstandard: "Future",
	},
	bonecollector: {
		num: 669836,
		accuracy: 30,
		basePower: 1,
		category: "Physical",
		name: "Bone Collector",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	athanaton10thousand: {
		num: 669837,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		name: "Athanaton10Thousand",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		boosts: {
			atk: -1,
			def: -1,
		},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Ghost",
		isNonstandard: "Future",
	},
	pandemoniumcetus: {
		num: 669838,
		accuracy: 85,
		basePower: 70,
		category: "Special",
		name: "Pandemonium Cetus",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Chaos",
		isNonstandard: "Future",
	},
	dominacoronam: {
		num: 669839,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Domina Coronam",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, bite: 1},
		secondary: null,
		target: "self",
		type: "Divine",
		isNonstandard: "Future",
	},
	cursedcuttingcrater: {
		num: 669840,
		accuracy: 85,
		basePower: 120,
		category: "Special",
		name: "CursedCuttingCrater",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Virus",
		isNonstandard: "Future",
	},
	wootpike: {
		num: 669841,
		accuracy: 95,
		basePower: 160,
		category: "Physical",
		name: "Woot Pike",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
		isNonstandard: "Future",
	},
	thenword: {
		num: 669843,
		accuracy: 100,
		basePower: 150,
		category: "Special",
		name: "The N Word",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
		isNonstandard: "Future",
	},
	songofgrail: {
		num: 669844,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Song of Grail",
		pp: 5,
		priority: 0,
		flags: {protect: 1, reflectable: 1, bite: 1},
		secondary: null,
		target: "allySide",
		type: "Divine",
		isNonstandard: "Future",
	},
	phantasmpunishment: {
		num: 669845,
		accuracy: 95,
		basePower: 90,
		category: "Physical",
		name: "Phantasm Punishment",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		onEffectiveness(typeMod, target, type) {
			if (type === 'Magic') return 1;
		},
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	chronosrose: {
		num: 669846,
		accuracy: 95,
		basePower: 110,
		category: "Physical",
		name: "Chronos Rose",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Time",
		isNonstandard: "Future",
	},
	originbullet: {
		num: 669847,
		accuracy: 100,
		basePower: 95,
		category: "Special",
		name: "Origin Bullet",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	tsumukarimuramasa: {
		num: 669848,
		accuracy: true,
		basePower: 100,
		category: "Physical",
		name: "TsumukariMuramasa",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Fire",
		isNonstandard: "Future",
	},
	greatclawofdeath: {
		num: 669849,
		accuracy: true,
		basePower: 110,
		category: "Physical",
		name: "GreatClawOfDeath",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	unlimitedlostworks: {
		num: 669850,
		accuracy: 85,
		basePower: 100,
		category: "Physical",
		name: "UnlimitedLostWorks",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	shadowbullets: {
		num: 669851,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		name: "Shadow Bullets",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Shadow",
		isNonstandard: "Future",
	},
	unspeakableformation: {
		num: 669852,
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Unspeakable Formation",
		pp: 20,
		priority: 0,

		
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Normal",
		isNonstandard: "Future",
	},
	meatcalibur: {
		num: 669853,
		accuracy: 90,
		basePower: 175,
		category: "Physical",
		name: "Meatcalibur",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		critRatio: 2,
		target: "allAdjacentFoes",
		type: "Food",
		isNonstandard: "Future",
	},
	speedsplit: {
		num: 669854,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Speed Split",
		pp: 10,
		priority: 0,
		flags: {protect: 1},
		onHit(target, source) {
			const newspe = Math.floor((target.storedStats.def + source.storedStats.spe) / 2);
			target.storedStats.spe = newspe;
			source.storedStats.spe = newspe;
			this.add('-activate', source, 'move: Speed Split', '[of] ' + target);
		},
		secondary: null,
		target: "normal",
		type: "Psychic",
		isNonstandard: "Future",
	},
	custosmorum: {
		num: 669855,
		accuracy: 70,
		basePower: 130,
		category: "Special",
		name: "Custos Morum",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Divine",
		isNonstandard: "Future",
	},
	iamreditetvirgo: {
		num: 669856,
		accuracy: true,
		basePower: 120,
		category: "Special",
		name: "Iam Redit et Virgo",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	elementsofharmony: {
		num: 669857,
		accuracy: 100,
		basePower: 1,
		category: "Special",
		name: "ElementsOfHarmony",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
		isNonstandard: "Future",
	},
	summonanimals: {
		num: 669858,
		accuracy: 90,
		basePower: 25,
		category: "Special",
		name: "Summon Animals",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		isNonstandard: "Future",
	},
	stymphalianbirds: {
		num: 669860,
		accuracy: 90,
		basePower: 25,
		category: "Physical",
		name: "Stymphalian Birds",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	harpe: {
		num: 669861,
		accuracy: 100,
		basePower: 80,
		category: "Special",
		name: "Harpe",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit(pokemon) {
			if (pokemon.hasType('Divine')){
			pokemon.setType(pokemon.getTypes(true).map(type => type === "Divine" ? "???" : type));
			this.add('-start', pokemon, 'typechange', pokemon.getTypes().join('/'), '[from] move: Exocise');
			}
	},
		secondary: null,
		critRatio: 2,
		target: "normal",
		type: "Steel",
		isNonstandard: "Future",
	},
	caressofmedusa: {
		num: 669862,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		name: "Caress of Medusa",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
		isNonstandard: "Future",
	},
	wingedsandals: {
		num: 669863,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Winged Sandals",
		pp: 25,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		isNonstandard: "Future",
	},
	governmentmen: {
		num: 669864,
		accuracy: 90,
		basePower: 27,
		category: "Physical",
		name: "Government Men",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Dark",
		isNonstandard: "Future",
	},
	momijigari: {
		num: 669865,
		accuracy: 100,
		basePower: 125,
		category: "Physical",
		name: "Momijigari",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, defrost: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		isNonstandard: "Future",
	},
	bonegnaw: {
		num: 669866,
		accuracy: 100,
		basePower: 65,
		category: "Physical",
		name: "Bone Gnaw",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	bonelance: {
		num: 669867,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		name: "Bone Lance",
		pp: 15,
		priority: 0,
		flags: {charge: 1, protect: 1, mirror: 1, contact: 1},
		onTryMove(attacker, defender, move) {
			if (attacker.removeVolatile(move.id)) {
				return;
			}
			this.add('-prepare', attacker, move.name);
			this.boost({atk: 1}, attacker, attacker, move);
			if (!this.runEvent('ChargeMove', attacker, defender, move)) {
				return;
			}
			attacker.addVolatile('twoturnmove', defender);
			return null;
		},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	bonetired: {
		num: 669868,
		accuracy: 95,
		basePower: 80,
		category: "Special",
		name: "Bone Tired",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	ribcage: {
		num: 669869,
		accuracy: 90,
		basePower: 65,
		category: "Physical",
		name: "Ribcage",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		volatileStatus: 'partiallytrapped',
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	boneify: {
		num: 669870,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Boneify",
		pp: 20,
		priority: 0,
		flags: {protect: 1, reflectable: 1, mirror: 1},
		onHit(target) {
			if (target.getTypes().join() === 'Bone' || !target.setType('Bone')) {
				// Soak should animate even when it fails.
				// Returning false would suppress the animation.
				this.add('-fail', target);
				return null;
			}
			this.add('-start', target, 'typechange', 'Bone');
		},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	boneitis: {
		num: 669871,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		name: "Boneitis",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	boner: {
		num: 669872,
		accuracy: 95,
		basePower: 70,
		category: "Physical",
		name: "Boner",
		pp: 15,
		priority: 0,
		basePowerCallback(pokemon, target, move) {
			if (target.gender === 'F') {
				this.debug('BP doubled on male target');
				return move.basePower * 2;
			}
			return move.basePower;
		},
		flags: {protect: 1, reflectable: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	skullfist: {
		num: 669873,
		accuracy: 90,
		basePower: 90,
		category: "Physical",
		name: "Skull Fist",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
		isNonstandard: "Future",
	},
	hiddenpowerblood: {
		num: 669873,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Blood",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
	},
	hiddenpowerbone: {
		num: 669874,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Bone",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
	},
	hiddenpowercosmic: {
		num: 669875,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Cosmic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
	},
	hiddenpowercrystal: {
		num: 669876,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Crystal",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
	},
	hiddenpowercyber: {
		num: 669877,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Cyber",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
	},
	hiddenpowerdivine: {
		num: 669952,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Divine",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
	},
	hiddenpowerfabric: {
		num: 669878,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Fabric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
	},
	hiddenpowerfairy: {
		num: 669879,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Fairy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
	},
	hiddenpowerfear: {
		num: 669880,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Fear",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
	},
	hiddenpowerfood: {
		num: 669881,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Food",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
	},
	hiddenpowerglass: {
		num: 669882,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Glass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
	},
	hiddenpowergreasy: {
		num: 669883,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Greasy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
	},
	hiddenpowerheart: {
		num: 669884,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Heart",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
	},
	hiddenpowerlight: {
		num: 669885,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Light",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
	},
	hiddenpowermagic: {
		num: 669886,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Magic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
	},
	hiddenpowermagma: {
		num: 669887,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Magma",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
	},
	hiddenpowermeme: {
		num: 669888,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Meme",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
	},
	hiddenpowernuclear: {
		num: 669889,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Nuclear",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
	},
	hiddenpowerogre: {
		num: 669890,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Ogre",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ogre",
	},
	hiddenpowerpaint: {
		num: 669891,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Paint",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paint",
	},
	hiddenpowerpaper: {
		num: 669892,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Paper",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
	},
	hiddenpowerplastic: {
		num: 669893,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Plastic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
	},
	hiddenpowerrubber: {
		num: 669894,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Rubber",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
	},
	hiddenpowersound: {
		num: 669895,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Sound",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
	},
	hiddenpowersteam: {
		num: 669896,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Steam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
	},
	hiddenpowertech: {
		num: 669897,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Tech",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
	},
	hiddenpowertime: {
		num: 669898,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Time",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
	},
	hiddenpowervirus: {
		num: 669899,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Virus",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
	},
	hiddenpowerwind: {
		num: 669900,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Wind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
	},
	hiddenpowerwood: {
		num: 669901,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Wood",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
	},
	hiddenpowerzombie: {
		num: 669902,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		isNonstandard: "Future",
		name: "Hidden Power Zombie",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
	},
	hiddenforce: {
		num: 669903,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyType(move, pokemon) {
			move.type = pokemon.hpType || 'Dark';
		},
		secondary: null,
		target: "normal",
		type: "Normal",
	},
	hiddenforceblood: {
		num: 669904,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Blood",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Blood",
	},
	hiddenforcebone: {
		num: 669905,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Bone",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bone",
	},
	hiddenforcebug: {
		num: 669906,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Bug",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
	},
	hiddenforcecosmic: {
		num: 669907,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Cosmic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cosmic",
	},
	hiddenforcecrystal: {
		num: 669908,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Crystal",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Crystal",
	},
	hiddenforcecyber: {
		num: 669909,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Cyber",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Cyber",
	},
	hiddenforcedivine: {
		num: 669951,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Divine",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Divine",
	},
	hiddenforcedark: {
		num: 669910,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Dark",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
	},
	hiddenforcedragon: {
		num: 669911,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Dragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
	},
	hiddenforceelectric: {
		num: 669912,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Electric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
	},
	hiddenforcefabric: {
		num: 669913,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Fabric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fabric",
	},
	hiddenforcefairy: {
		num: 669914,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Fairy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fairy",
	},
	hiddenforcefear: {
		num: 669915,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Fear",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fear",
	},
	hiddenforcefighting: {
		num: 669916,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Fighting",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
	},
	hiddenforcefire: {
		num: 669917,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Fire",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
	},
	hiddenforceflying: {
		num: 669918,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Flying",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
	},
	hiddenforcefood: {
		num: 669919,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Food",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Food",
	},
	hiddenforceghost: {
		num: 669920,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
	},
	hiddenforceglass: {
		num: 669921,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Glass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Glass",
	},
	hiddenforcegrass: {
		num: 669922,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Grass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
	},
	hiddenforcegreasy: {
		num: 669923,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Greasy",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Greasy",
	},
	hiddenforceground: {
		num: 669924,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Ground",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
	},
	hiddenforceheart: {
		num: 669925,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Heart",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Heart",
	},
	hiddenforceice: {
		num: 669926,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Ice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
	},
	hiddenforcelight: {
		num: 669927,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Light",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Light",
	},
	hiddenforcemagic: {
		num: 669928,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Magic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magic",
	},
	hiddenforcemagma: {
		num: 669929,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Magma",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Magma",
	},
	hiddenforcememe: {
		num: 669930,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Meme",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Meme",
	},
	hiddenforcenuclear: {
		num: 669931,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Nuclear",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Nuclear",
	},
	hiddenforceogre: {
		num: 669932,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Ogre",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ogre",
	},
	hiddenforcepaint: {
		num: 669933,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Paint",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paint",
	},
	hiddenforcepaper: {
		num: 669934,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Paper",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Paper",
	},
	hiddenforceplastic: {
		num: 669935,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Plastic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Plastic",
	},
	hiddenforcepoison: {
		num: 669936,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Poison",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
	},
	hiddenforcepsychic: {
		num: 669937,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Psychic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
	},
	hiddenforcerock: {
		num: 669938,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
	},
	hiddenforcerubber: {
		num: 669939,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Rubber",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rubber",
	},
	hiddenforcesound: {
		num: 669940,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Sound",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Sound",
	},
	hiddenforcesteam: {
		num: 669941,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Steam",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steam",
	},
	hiddenforcesteel: {
		num: 669942,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Steel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
	},
	hiddenforcetech: {
		num: 669943,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Tech",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Tech",
	},
	hiddenforcetime: {
		num: 669944,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Time",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Time",
	},
	hiddenforcevirus: {
		num: 669945,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Virus",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Virus",
	},
	hiddenforcewater: {
		num: 669946,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Water",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
	},
	hiddenforcewind: {
		num: 669947,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Wind",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wind",
	},
	hiddenforcewood: {
		num: 669948,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Wood",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Wood",
	},
	hiddenforcezombie: {
		num: 669949,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		isNonstandard: "Future",
		name: "Hidden Force Zombie",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Zombie",
	},
};
